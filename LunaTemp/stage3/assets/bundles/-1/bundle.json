{"materials":[{"id":24226,"path":"Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF.asset","assetBundleId":-1,"data":["LiberationSans SDF Material",0,408,3000,0,[["_FaceDilate",0],["_OutlineWidth",0],["_OutlineSoftness",0],["_UnderlayOffsetX",0],["_UnderlayOffsetY",0],["_UnderlayDilate",0],["_UnderlaySoftness",0],["_WeightNormal",0],["_WeightBold",0.75],["_ShaderFlags",0],["_ScaleRatioA",0.899999976158142],["_ScaleRatioB",1],["_ScaleRatioC",0.731249988079071],["_TextureWidth",1024],["_TextureHeight",1024],["_GradientScale",10],["_ScaleX",1],["_ScaleY",1],["_PerspectiveFilter",0.875],["_Sharpness",0],["_VertexOffsetX",0],["_VertexOffsetY",0],["_MaskSoftnessX",0],["_MaskSoftnessY",0],["_StencilComp",8],["_Stencil",0],["_StencilOp",0],["_StencilWriteMask",255],["_StencilReadMask",255],["_CullMode",0],["_ColorMask",15]],[["_FaceColor",1,1,1,1],["_OutlineColor",0,0,0,1],["_UnderlayColor",0,0,0,0.5]],[["_MainTex_ST",1,1,0,0],["_ClipRect",-32767,-32767,32767,32767]],[["_MainTex",6,24308]],[]]},{"id":24456,"path":"Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF - Drop Shadow.mat","assetBundleId":-1,"data":["LiberationSans SDF - Drop Shadow",0,408,3000,0,[["_FaceDilate",0.100000001490116],["_OutlineWidth",0.100000001490116],["_OutlineSoftness",0],["_UnderlayOffsetX",0.5],["_UnderlayOffsetY",-0.5],["_UnderlayDilate",0],["_UnderlaySoftness",0.0500000007450581],["_WeightNormal",0],["_WeightBold",0.75],["_ShaderFlags",0],["_ScaleRatioA",0.899999976158142],["_ScaleRatioB",0.731249988079071],["_ScaleRatioC",0.641250014305115],["_TextureWidth",1024],["_TextureHeight",1024],["_GradientScale",10],["_ScaleX",1],["_ScaleY",1],["_PerspectiveFilter",0.875],["_Sharpness",0],["_VertexOffsetX",0],["_VertexOffsetY",0],["_MaskSoftnessX",0],["_MaskSoftnessY",0],["_StencilComp",8],["_Stencil",0],["_StencilOp",0],["_StencilWriteMask",255],["_StencilReadMask",255],["_CullMode",0],["_ColorMask",15]],[["_FaceColor",1,1,1,1],["_OutlineColor",0,0,0,1],["_UnderlayColor",0,0,0,0.5]],[["_MainTex_ST",1,1,0,0],["_ClipRect",-32767,-32767,32767,32767]],[["_MainTex",6,24308]],[["OUTLINE_ON",1],["UNDERLAY_ON",1]]]},{"id":-2838,"path":"Default UI Material","assetBundleId":-1,"data":["Default UI Material",0,30,3000,0,[["_StencilComp",8],["_Stencil",0],["_StencilOp",0],["_StencilWriteMask",255],["_StencilReadMask",255],["_ColorMask",15],["_UseUIAlphaClip",0]],[["_Color",1,1,1,1]],[["_MainTex_ST",1,1,0,0]],[["_MainTex",null,null]],[]]},{"id":24470,"path":"Assets/TextMesh Pro/Resources/Sprite Assets/EmojiOne.asset","assetBundleId":-1,"data":["TextMeshPro/Sprite",0,410,3000,0,[["_StencilComp",8],["_Stencil",0],["_StencilOp",0],["_StencilWriteMask",255],["_StencilReadMask",255],["_CullMode",0],["_ColorMask",15],["_UseUIAlphaClip",0]],[["_Color",1,1,1,1]],[["_MainTex_ST",1,1,0,0],["_ClipRect",-32767,-32767,32767,32767]],[["_MainTex",6,24472]],[["UNITY_UI_CLIP_RECT",1]]]},{"id":33166,"path":"Assets/TextMesh Pro/Resources/Sprite Assets/EmojiOne.asset","assetBundleId":-1,"data":["TextMeshPro/Sprite",0,410,3000,0,[["_StencilComp",8],["_Stencil",0],["_StencilOp",0],["_StencilWriteMask",255],["_StencilReadMask",255],["_CullMode",0],["_ColorMask",15],["_UseUIAlphaClip",0]],[["_Color",1,1,1,1]],[["_MainTex_ST",1,1,0,0],["_ClipRect",-32767,-32767,32767,32767]],[["_MainTex",null,null]],[]]},{"id":24360,"path":"Assets/Content/Materials/Particles/CartoonWhite.mat","assetBundleId":-1,"data":["CartoonWhite",0,66,2000,0,[["_Cutoff",0.5],["_Glossiness",0],["_GlossMapScale",1],["_SmoothnessTextureChannel",0],["_Metallic",0],["_SpecularHighlights",1],["_GlossyReflections",1],["_BumpScale",1],["_Parallax",0.0199999995529652],["_OcclusionStrength",1],["_DetailNormalMapScale",1],["_UVSec",0],["_Mode",0],["_SrcBlend",1],["_DstBlend",0],["_ZWrite",1]],[["_Color",1,1,1,1],["_EmissionColor",1,1,1,1]],[["_MainTex_ST",1,1,0,0],["_MetallicGlossMap_ST",1,1,0,0],["_BumpMap_ST",1,1,0,0],["_ParallaxMap_ST",1,1,0,0],["_OcclusionMap_ST",1,1,0,0],["_EmissionMap_ST",1,1,0,0],["_DetailMask_ST",1,1,0,0],["_DetailAlbedoMap_ST",1,1,0,0],["_DetailNormalMap_ST",1,1,0,0]],[["_MainTex",6,28294],["_MetallicGlossMap",null,null],["_BumpMap",null,null],["_ParallaxMap",null,null],["_OcclusionMap",null,null],["_EmissionMap",null,null],["_DetailMask",null,null],["_DetailAlbedoMap",null,null],["_DetailNormalMap",null,null]],[["_EMISSION",1],["_RECEIVE_SHADOWS_OFF",0]]]},{"id":24462,"path":"Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF - Outline.mat","assetBundleId":-1,"data":["LiberationSans SDF - Outline",0,408,3000,0,[["_FaceDilate",0.100000001490116],["_OutlineWidth",0.100000001490116],["_OutlineSoftness",0],["_UnderlayOffsetX",0],["_UnderlayOffsetY",0],["_UnderlayDilate",0],["_UnderlaySoftness",0],["_WeightNormal",0],["_WeightBold",0.75],["_ShaderFlags",0],["_ScaleRatioA",0.899999976158142],["_ScaleRatioB",0.731249988079071],["_ScaleRatioC",0.641250014305115],["_TextureWidth",1024],["_TextureHeight",1024],["_GradientScale",10],["_ScaleX",1],["_ScaleY",1],["_PerspectiveFilter",0.875],["_Sharpness",0],["_VertexOffsetX",0],["_VertexOffsetY",0],["_MaskSoftnessX",0],["_MaskSoftnessY",0],["_StencilComp",8],["_Stencil",0],["_StencilOp",0],["_StencilWriteMask",255],["_StencilReadMask",255],["_CullMode",0],["_ColorMask",15]],[["_FaceColor",1,1,1,1],["_OutlineColor",0,0,0,1],["_UnderlayColor",0,0,0,0.5]],[["_MainTex_ST",1,1,0,0],["_ClipRect",-32767,-32767,32767,32767]],[["_MainTex",6,24308]],[["OUTLINE_ON",1]]]},{"id":24354,"path":"Assets/Content/Materials/Particles/spark_custom.mat","assetBundleId":-1,"data":["spark_custom",0,176,3000,0,[["_Cutoff",0.5],["_BumpScale",1],["_DistortionStrength",1],["_DistortionBlend",0.5],["_SoftParticlesNearFadeDistance",0],["_SoftParticlesFarFadeDistance",1],["_CameraNearFadeDistance",1],["_CameraFarFadeDistance",2],["_Mode",2],["_ColorMode",4],["_FlipbookMode",0],["_LightingEnabled",0],["_DistortionEnabled",0],["_EmissionEnabled",0],["_BlendOp",0],["_SrcBlend",5],["_DstBlend",10],["_ZWrite",0],["_Cull",2],["_SoftParticlesEnabled",0],["_CameraFadingEnabled",0],["_DistortionStrengthScaled",0]],[["_Color",1,1,1,1],["_EmissionColor",0,0,0,1]],[["_MainTex_ST",1,1,0,0],["_BumpMap_ST",1,1,0,0],["_EmissionMap_ST",1,1,0,0],["_SoftParticleFadeParams",0,0,0,0],["_CameraFadeParams",0,1e9999,0,0],["_ColorAddSubDiff",0,0,0,0]],[["_MainTex",6,27138],["_BumpMap",null,null],["_EmissionMap",null,null]],[["_ALPHABLEND_ON",1],["_COLORCOLOR_ON",1],["_FLIPBOOKBLENDING_OFF",0],["_SURFACE_TYPE_TRANSPARENT",0]]]}],"meshes":[{"id":24356,"path":"Assets/Content/Prefabs/Particles/SmokeMeshLowPoly.fbx","assetBundleId":-1,"data":["Smoke",true,0,62,[-0.03957561,0.004150331,0.08673717,0.3840256,0.2997021,0.3788332],[1,1,1,0,0,0,0,0,0,0],[0,1240],[[[1240,720]]],[],[]]},{"id":572,"path":"Library/unity default resources\\Quad","assetBundleId":-1,"data":["Quad",true,0,4,[0,0,0,0.5,0.5,3.061617e-17],[1,1,1,0,0,0,1,0,0,0],[1960,96],[[[2056,12]]],[],[]]}],"prefabs":[{"id":24246,"path":"Assets/Content/Prefabs/Quest - Slot.prefab","assetBundleId":-1,"components":[{"type":7,"id":24248,"data":[0.5,0.5,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":8,"id":24242,"enabled":1,"class":9,"data":[1,1,1,1.5,1.5,1.5,1,1,1,1,0.699999988079071,10,24240,0,0,11,24258,12,24250]},{"type":13,"id":24400,"data":[1]},{"type":14,"id":24402,"enabled":1,"class":11,"data":[15,24408,0,1,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":24398,"path":"Assets/Content/Prefabs/Quest - Slot.prefab","assetBundleId":-1,"components":[{"type":7,"id":24394,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":24406,"data":[1]},{"type":14,"id":24258,"enabled":1,"class":11,"data":[15,24238,0,0,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Icon",0,1,0,5]},{"id":24404,"path":"Assets/Content/Prefabs/Quest - Slot.prefab","assetBundleId":-1,"components":[{"type":7,"id":24396,"data":[0.5,1,0.100000001490116,0,0.899999976158142,0,0,20,0,-10,0,0,0,0,1,1,1,1]},{"type":13,"id":24410,"data":[1]},{"type":14,"id":24250,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Leaves 0",0,16,24224,5,24226,[],null,null,[],0,0,0,255,0,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,18,18,400,0,18,72,1,2,256,65535,0,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Amount",0,1,0,5]}],"data":["Quest - Slot",0,1,0,5]},{"id":24270,"path":"Assets/Content/Prefabs/TileSlot.prefab","assetBundleId":-1,"components":[{"type":1,"id":24272,"data":[1,0,0,1,1,1,0,0,0,1]},{"type":8,"id":24276,"enabled":1,"class":22,"data":[0,null,null]}],"children":[{"id":24418,"path":"Assets/Content/Prefabs/TileSlot.prefab","assetBundleId":-1,"components":[{"type":1,"id":24416,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":24420,"data":[1,5,458,[5,458],0,0,0,0,-1,-1,1,1,0,0,1,1,1,1,1,1,15,24422,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["TempBackground",0,1,0,0]}],"data":["TileSlot",0,1,0,0]},{"id":24184,"path":"Assets/Content/Prefabs/Tile.prefab","assetBundleId":-1,"components":[{"type":1,"id":24206,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":24194,"enabled":1,"class":17,"data":[0,0,18,24188,18,24186,18,24192,19,24204,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,null,null,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":24372,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":24374,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":24370,"path":"Assets/Content/Prefabs/Tile.prefab","assetBundleId":-1,"components":[{"type":1,"id":24362,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":24192,"data":[1,5,458,[5,458],0,0,0,0,-1,-1,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":24376,"path":"Assets/Content/Prefabs/Tile.prefab","assetBundleId":-1,"components":[{"type":1,"id":24364,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":24188,"data":[1,5,458,[5,458],0,0,0,0,-1,-1,1,1,0,0,1,1,1,1,1,1,null,null,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":24384,"path":"Assets/Content/Prefabs/Tile.prefab","assetBundleId":-1,"components":[{"type":1,"id":24366,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":24186,"data":[1,5,458,[5,458],0,0,0,0,-1,-1,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":24382,"path":"Assets/Content/Prefabs/Tile.prefab","assetBundleId":-1,"components":[{"type":1,"id":24368,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":24204,"data":[1,5,458,[5,458],1,0,0,0,-1,-1,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile",0,1,0,3]},{"id":24688,"path":"Assets/Content/Prefabs/Bag.prefab","assetBundleId":-1,"components":[{"type":1,"id":32364,"data":[-3.95000004768372,-5.59000015258789,0,1,1,1,0,0,0,1]},{"type":8,"id":32366,"enabled":1,"class":31,"data":[[22,32382,22,32384,22,32386,22,32388,22,32390,22,32392,22,32394]]}],"children":[{"id":32398,"path":"Assets/Content/Prefabs/Bag.prefab","assetBundleId":-1,"components":[{"type":1,"id":32368,"data":[1,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32382,"enabled":1,"class":22,"data":[0,null,null]}],"children":[{"id":32450,"path":"Assets/Content/Prefabs/Bag.prefab","assetBundleId":-1,"components":[{"type":1,"id":32400,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":32452,"data":[1,5,458,[5,458],0,0,0,0,-1,-1,1,1,0,0,1,1,1,1,1,1,15,24422,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["TempBackground",0,1,0,0]}],"data":["BagSlot (1)",0,1,0,0]},{"id":32410,"path":"Assets/Content/Prefabs/Bag.prefab","assetBundleId":-1,"components":[{"type":1,"id":32370,"data":[2,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32384,"enabled":1,"class":22,"data":[0,null,null]}],"children":[{"id":32440,"path":"Assets/Content/Prefabs/Bag.prefab","assetBundleId":-1,"components":[{"type":1,"id":32412,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":32456,"data":[1,5,458,[5,458],0,0,0,0,-1,-1,1,1,0,0,1,1,1,1,1,1,15,24422,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["TempBackground",0,1,0,0]}],"data":["BagSlot (2)",0,1,0,0]},{"id":32404,"path":"Assets/Content/Prefabs/Bag.prefab","assetBundleId":-1,"components":[{"type":1,"id":32372,"data":[3,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32386,"enabled":1,"class":22,"data":[0,null,null]}],"children":[{"id":32438,"path":"Assets/Content/Prefabs/Bag.prefab","assetBundleId":-1,"components":[{"type":1,"id":32406,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":32458,"data":[1,5,458,[5,458],0,0,0,0,-1,-1,1,1,0,0,1,1,1,1,1,1,15,24422,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["TempBackground",0,1,0,0]}],"data":["BagSlot (3)",0,1,0,0]},{"id":32422,"path":"Assets/Content/Prefabs/Bag.prefab","assetBundleId":-1,"components":[{"type":1,"id":32374,"data":[4,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32388,"enabled":1,"class":22,"data":[0,null,null]}],"children":[{"id":32444,"path":"Assets/Content/Prefabs/Bag.prefab","assetBundleId":-1,"components":[{"type":1,"id":32424,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":32464,"data":[1,5,458,[5,458],0,0,0,0,-1,-1,1,1,0,0,1,1,1,1,1,1,15,24422,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["TempBackground",0,1,0,0]}],"data":["BagSlot (4)",0,1,0,0]},{"id":32416,"path":"Assets/Content/Prefabs/Bag.prefab","assetBundleId":-1,"components":[{"type":1,"id":32376,"data":[5,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32390,"enabled":1,"class":22,"data":[0,null,null]}],"children":[{"id":32442,"path":"Assets/Content/Prefabs/Bag.prefab","assetBundleId":-1,"components":[{"type":1,"id":32418,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":32454,"data":[1,5,458,[5,458],0,0,0,0,-1,-1,1,1,0,0,1,1,1,1,1,1,15,24422,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["TempBackground",0,1,0,0]}],"data":["BagSlot (5)",0,1,0,0]},{"id":32434,"path":"Assets/Content/Prefabs/Bag.prefab","assetBundleId":-1,"components":[{"type":1,"id":32378,"data":[6,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32392,"enabled":1,"class":22,"data":[0,null,null]}],"children":[{"id":32448,"path":"Assets/Content/Prefabs/Bag.prefab","assetBundleId":-1,"components":[{"type":1,"id":32436,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":32460,"data":[1,5,458,[5,458],0,0,0,0,-1,-1,1,1,0,0,1,1,1,1,1,1,15,24422,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["TempBackground",0,1,0,0]}],"data":["BagSlot (6)",0,1,0,0]},{"id":32428,"path":"Assets/Content/Prefabs/Bag.prefab","assetBundleId":-1,"components":[{"type":1,"id":32380,"data":[7,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32394,"enabled":1,"class":22,"data":[0,null,null]}],"children":[{"id":32446,"path":"Assets/Content/Prefabs/Bag.prefab","assetBundleId":-1,"components":[{"type":1,"id":32430,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":32462,"data":[1,5,458,[5,458],0,0,0,0,-1,-1,1,1,0,0,1,1,1,1,1,1,15,24422,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["TempBackground",0,1,0,0]}],"data":["BagSlot (7)",0,1,0,0]}],"data":["Bag",0,1,0,0]},{"id":24342,"path":"Assets/Content/Prefabs/Particles/Poof.prefab","assetBundleId":-1,"components":[{"type":1,"id":24332,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":2,"id":24358,"data":[[0.600000023841858,0,0,[0,null,null,1,0,0],[3,null,null,1,0.200000002980232,0.600000023841858],[3,null,null,1,8,11],0,[3,null,null,1,0.400000005960464,0.800000011920929],[3,null,null,1,1,1],[3,null,null,1,1,1],0,[3,null,null,1,0,1],[3,null,null,1,0,1],[3,null,null,1,0,6.28318500518799],[0,null,null,-4.3463453322512e-13,5.60519385729927e-45,-4.34624775405568e-13,5.60519385729927e-45,1,1,1,1],[0,null,null,1,0,0],0,null,null,1,0,0,1,1000,0,0],[0,[1,null,[0,[[1,1,1,1,0],[1,1,1,1,1]],[[1,0],[1,1]]],-4.34660337236825e-13,5.60519385729927e-45,-4.34655133066397e-13,5.60519385729927e-45,-4.34653615183356e-13,5.60519385729927e-45,-4.59212273009662e+34,4.59079389897453e-41],0,1],[0,[1,null,[0,[[1,0.807843148708344,0,1,0],[0.243728399276733,0.271754592657089,0.338235318660736,1,0.593194484710693]],[[1,0],[1,0.900007605552673],[0,1]]],-4.34660770917694e-13,5.60519385729927e-45,-4.34655566747266e-13,5.60519385729927e-45,-4.34654048864225e-13,5.60519385729927e-45,-4.59212273009662e+34,4.59079389897453e-41]],[1,[0,null,null,1,0,0],[0,null,null,1,0,0],[[[0,null,null,1,0,6],1,0,6,0.00999999977648258,0]]],[0,[0,null,null,1,0,1],[0,null,null,1,0,1],[0,null,null,1,0,0.785398185253143],0,0,1],[1,[2,[0,0,0,0,0,0,0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,1,0,0,0,0,0],1,0,0],[2,[0,0,0,0,0,0,0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,1,0,0,0,0,0],1,0,0],[2,[0,-1,0,0,0,0,0,1,-0.4945055,0,0,0,0,0],[0,1,0,0,0,0,0,1,0.4065934,0,0,0,0,0],2.09439516067505,0,0],0],[1,4,0,0,0,0,0.550000011920929,0,0,[0,null,null,1,0,1],0,14.3983993530273,5,0,0,0,0,null,null,null,null,null,null,0,0,1,0,360,3,0,[0,null,null,1,0,1],0.200000002980232,0,-0.670000016689301,0,-90,0,0,1,1,1],[0,[1,null,[0,1,0,0,0,0,0,1,1,0,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],0,0,1],[1,[1,null,[0,0.47826,1.863361,1.863361,0,0,0,0.2713935,0.9681337,-0.449419,-0.449419,0,0,0,1,0,-2,-2,0,0,0],1.39999997615814,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],0],[0,0,0,2,2,1,[3,null,null,1,0,0.999899983406067],[0,null,null,1,0,0],1,0,0,0,1,[null,null]],[0,[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,1],0,[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0]],[0,0,[0,null,null,1,0,1],[0,null,null,1,0,1],[0,null,null,1,0,1],0.5,1,1,0.5,2,2,[0,null,null,1,0,0],0,0,[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[0,null,null,1,0,1],[0,null,null,1,0,0],[0,null,null,1,0,0]],[0,0,[0,null,null,1,0,1]],[0,[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],0,0],[1,[0,null,null,1,0,0.5],[0,null,null,1,0,1],[0,null,null,1,0,1],[0,null,null,1,0,1],0.419999986886978,0,0,[0,null,null,1,0,0],1,1],1,0]},{"type":3,"id":24352,"data":[1,5,24360,[5,24360],1,1,0,0,-1,-1,1,1,0,0,1,1,4,24356,1,5,0,4,0,2,0,0,1,0,0,0.5,0,0,0,null,null]}],"children":[],"data":["Poof",0,1,0,1]},{"id":24694,"path":"Assets/Content/Prefabs/Scene.prefab","assetBundleId":-1,"components":[{"type":1,"id":32586,"data":[0,0,0,1,1,1,0,0,0,1]}],"children":[{"id":32596,"path":"Assets/Content/Prefabs/Scene.prefab","assetBundleId":-1,"components":[{"type":1,"id":32588,"data":[0,0,-20,1,1,1,0,0,0,1]},{"type":23,"id":32604,"data":[1,0.5625,1,8,0.192156866192818,0.301960796117783,0.474509805440903,0,0.300000011920929,5000,60,-1,2,-1,[0,0,1,1],null,null,0,50,36,24,0,0,2]},{"type":24,"id":32606,"data":[]}],"children":[],"data":["Camera",4,1,0,0]},{"id":32594,"path":"Assets/Content/Prefabs/Scene.prefab","assetBundleId":-1,"components":[{"type":1,"id":32590,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":14,"id":32600,"enabled":1,"class":25,"data":[null,null,1,10]},{"type":14,"id":32602,"enabled":1,"class":26,"data":["Horizontal","Vertical","Submit","Cancel",10,0.5,0,1]}],"children":[],"data":["EventSystem",0,1,0,0]},{"id":32598,"path":"Assets/Content/Prefabs/Scene.prefab","assetBundleId":-1,"components":[{"type":1,"id":32592,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":32608,"data":[1,5,458,[5,458],0,0,0,-100,-1,-1,1,1,0,0,1,1,1,1,1,1,15,24288,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,0]}],"data":["Scene",0,1,0,0]},{"id":24696,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":1,"id":32612,"data":[0,0,0,1,1,1,0,0,0,1]}],"children":[{"id":32620,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32614,"data":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0]},{"type":43,"id":32642,"data":[1,100,100,1,0,4,"Default",-100,1,null,null,0,0,0,0]},{"type":14,"id":32644,"enabled":1,"class":47,"data":[1,100,1,1080,1920,0,0,3,96,96,1,0]},{"type":14,"id":32646,"enabled":1,"class":48,"data":[1,0,-1]}],"children":[{"id":32632,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32622,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":8,"id":32664,"enabled":1,"class":49,"data":[]}],"children":[{"id":32668,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32634,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,0.999599874019623,0.999599874019623,0.999599874019623]},{"type":13,"id":32686,"data":[1]},{"type":14,"id":32688,"enabled":1,"class":11,"data":[15,24228,0,0,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Background",0,1,0,5]}],"data":["offset",0,1,0,5]}],"data":["[Canvas] Background",0,1,0,5]},{"id":32624,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32616,"data":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0]},{"type":43,"id":32652,"data":[1,100,100,1,0,4,"Default",22222,1,null,null,0,0,0,0]},{"type":14,"id":32654,"enabled":1,"class":47,"data":[1,100,1,1080,1920,0,0,3,96,96,1,0]},{"type":14,"id":32656,"enabled":1,"class":48,"data":[1,0,-1]}],"children":[{"id":32636,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32626,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":8,"id":32666,"enabled":1,"class":49,"data":[]}],"children":[{"id":32670,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32638,"data":[0.5,1,0,1,1,1,0,500,0,0,0,0,0,0,1,1,1,1]},{"type":14,"id":32690,"enabled":0,"class":11,"data":[null,null,0,0,1,4,1,1,0,0,1,null,null,1,0.599999904632568,0.599999904632568,0.599999904632568,1,1,0,0,0,0]},{"type":14,"id":32692,"enabled":1,"class":50,"data":[0,1,1,0,1,0,0,0,0,0,0,0,0]},{"type":13,"id":32694,"data":[1]}],"children":[{"id":32716,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32672,"data":[0.5,0.5,0,0,0,0,450,0,0,0,0,0,0,0,1,1,1,1]},{"type":14,"id":32736,"enabled":0,"class":11,"data":[null,null,0,0,1,4,1,1,0,0,1,null,null,1,1,0.888257026672363,0,1,1,0,0,0,0]},{"type":13,"id":32738,"data":[1]}],"children":[{"id":32732,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32718,"data":[0.5,0.5,0,1,0,1,450,450,225,-250,0,0,0,0,1,1,1,1]},{"type":13,"id":32808,"data":[1]},{"type":14,"id":32810,"enabled":1,"class":11,"data":[15,24268,0,1,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":32806,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32734,"data":[0.5,0,0.5,0,0.5,0,431.050048828125,0,0,30,0,0,0,0,1,1,1,1]},{"type":13,"id":32884,"data":[1]},{"type":14,"id":32886,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Salmon: 0",0,16,24224,5,24226,[],null,null,[],255,0,0,255,1,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,60,60,400,0,18,72,1,2,1024,65535,-5,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Quest - Txt",0,1,0,5]}],"data":["Quest - Icon",0,1,0,5]}],"data":["Quest - Goal",0,1,0,5]},{"id":32698,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32674,"data":[0.5,0.5,0,0,0,0,560,0,0,0,0,0,0,0,1,1,1,1]},{"type":14,"id":32726,"enabled":1,"class":51,"data":[0,0,150,150,20,50,1,3,0,0,0,0,4]},{"type":14,"id":32728,"enabled":0,"class":11,"data":[null,null,0,0,1,4,1,1,0,0,1,null,null,1,0.359031826257706,0.879245281219482,0.031519990414381,1,1,0,0,0,0]},{"type":13,"id":32730,"data":[1]}],"children":[{"id":32764,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32700,"data":[0.5,0.5,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":8,"id":32834,"enabled":1,"class":9,"data":[1,1,1,1.5,1.5,1.5,1,1,1,1,0.699999988079071,10,24198,0,1,11,32900,12,32862]},{"type":13,"id":32836,"data":[1]},{"type":14,"id":32838,"enabled":1,"class":11,"data":[15,24408,0,1,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":32822,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32766,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":32898,"data":[1]},{"type":14,"id":32900,"enabled":1,"class":11,"data":[15,24268,0,0,1,4,1,1,0,0,1,null,null,1,0,0,0,1,1,0,0,0,0]}],"children":[],"data":["Icon",0,1,0,5]},{"id":32802,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32768,"data":[0.5,1,0.100000001490116,0,0.899999976158142,0,0,20,0,-10,0,0,0,0,1,1,1,1]},{"type":13,"id":32860,"data":[1]},{"type":14,"id":32862,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Salmon 0",0,16,24224,5,24226,[],null,null,[],0,0,0,255,0,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,18,18,400,0,18,72,1,2,256,65535,0,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Amount",0,1,0,5]}],"data":["Quest - Slot (1)",0,1,0,5]},{"id":32748,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32702,"data":[0.5,0.5,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":8,"id":32816,"enabled":1,"class":9,"data":[1,1,1,1.5,1.5,1.5,1,1,1,1,0.699999988079071,10,24292,2,0,11,32896,12,32882]},{"type":13,"id":32818,"data":[1]},{"type":14,"id":32820,"enabled":1,"class":11,"data":[15,24408,0,1,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":32832,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32750,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":32908,"data":[1]},{"type":14,"id":32896,"enabled":1,"class":11,"data":[15,24290,0,0,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Icon",0,1,0,5]},{"id":32796,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32752,"data":[0.5,1,0.100000001490116,0,0.899999976158142,0,0,20,0,-10,0,0,0,0,1,1,1,1]},{"type":13,"id":32880,"data":[1]},{"type":14,"id":32882,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"OliveOil 2",0,16,24224,5,24226,[],null,null,[],0,0,0,255,0,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,18,18,400,0,18,72,1,2,256,65535,0,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Amount",0,1,0,5]}],"data":["Quest - Slot (2)",0,1,0,5]},{"id":32756,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32704,"data":[0.5,0.5,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":8,"id":32826,"enabled":1,"class":9,"data":[1,1,1,1.5,1.5,1.5,1,1,1,1,0.699999988079071,10,24298,1,0,11,32906,12,32878]},{"type":13,"id":32828,"data":[1]},{"type":14,"id":32830,"enabled":1,"class":11,"data":[15,24408,0,1,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":32846,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32758,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":32910,"data":[1]},{"type":14,"id":32906,"enabled":1,"class":11,"data":[15,24296,0,0,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Icon",0,1,0,5]},{"id":32794,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32760,"data":[0.5,1,0.100000001490116,0,0.899999976158142,0,0,20,0,-10,0,0,0,0,1,1,1,1]},{"type":13,"id":32876,"data":[1]},{"type":14,"id":32878,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Lemon 1",0,16,24224,5,24226,[],null,null,[],0,0,0,255,0,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,18,18,400,0,18,72,1,2,256,65535,0,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Amount",0,1,0,5]}],"data":["Quest - Slot (3)",0,1,0,5]},{"id":32772,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32706,"data":[0.5,0.5,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":8,"id":32840,"enabled":1,"class":9,"data":[1,1,1,1.5,1.5,1.5,1,1,1,1,0.699999988079071,10,24266,1,0,11,32904,12,32866]},{"type":13,"id":32842,"data":[1]},{"type":14,"id":32844,"enabled":1,"class":11,"data":[15,24408,0,1,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":32824,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32774,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":32902,"data":[1]},{"type":14,"id":32904,"enabled":1,"class":11,"data":[15,24264,0,0,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Icon",0,1,0,5]},{"id":32804,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32776,"data":[0.5,1,0.100000001490116,0,0.899999976158142,0,0,20,0,-10,0,0,0,0,1,1,1,1]},{"type":13,"id":32864,"data":[1]},{"type":14,"id":32866,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Dill 1",0,16,24224,5,24226,[],null,null,[],0,0,0,255,0,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,18,18,400,0,18,72,1,2,256,65535,0,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Amount",0,1,0,5]}],"data":["Quest - Slot (4)",0,1,0,5]},{"id":32780,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32708,"data":[0.5,0.5,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":8,"id":32848,"enabled":1,"class":9,"data":[1,1,1,1.5,1.5,1.5,1,1,1,1,0.699999988079071,10,24262,3,0,11,32894,12,32870]},{"type":13,"id":32850,"data":[1]},{"type":14,"id":32852,"enabled":1,"class":11,"data":[15,24408,0,1,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":32814,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32782,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":32892,"data":[1]},{"type":14,"id":32894,"enabled":1,"class":11,"data":[15,24260,0,0,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Icon",0,1,0,5]},{"id":32798,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32784,"data":[0.5,1,0.100000001490116,0,0.899999976158142,0,0,20,0,-10,0,0,0,0,1,1,1,1]},{"type":13,"id":32868,"data":[1]},{"type":14,"id":32870,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Garlic 3",0,16,24224,5,24226,[],null,null,[],0,0,0,255,0,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,18,18,400,0,18,72,1,2,256,65535,0,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Amount",0,1,0,5]}],"data":["Quest - Slot (5)",0,1,0,5]},{"id":32788,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32710,"data":[0.5,0.5,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":8,"id":32854,"enabled":1,"class":9,"data":[1,1,1,1.5,1.5,1.5,1,1,1,1,0.699999988079071,10,24244,1,0,11,32890,12,32874]},{"type":13,"id":32856,"data":[1]},{"type":14,"id":32858,"enabled":1,"class":11,"data":[15,24408,0,1,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":32812,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32790,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":32888,"data":[1]},{"type":14,"id":32890,"enabled":1,"class":11,"data":[15,24238,0,0,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Icon",0,1,0,5]},{"id":32800,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32792,"data":[0.5,1,0.100000001490116,0,0.899999976158142,0,0,20,0,-10,0,0,0,0,1,1,1,1]},{"type":13,"id":32872,"data":[1]},{"type":14,"id":32874,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Salt 1",0,16,24224,5,24226,[],null,null,[],0,0,0,255,0,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,18,18,400,0,18,72,1,2,256,65535,0,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Amount",0,1,0,5]}],"data":["Quest - Slot (6)",0,1,0,5]}],"data":["Quest - Inventory",0,1,0,5]}],"data":["TOP",0,1,0,5]},{"id":32676,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32640,"data":[0.5,0,0,0,1,0,0,100,0,0,0,0,0,0,1,1,1,1]}],"children":[{"id":32696,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32678,"data":[0.5,0,0.5,0,0.5,0,431.050048828125,100,0,374,0,0,0,0,1,0.999599874019623,0.999599874019623,0.999599874019623]},{"type":13,"id":32722,"data":[1]},{"type":14,"id":32724,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Match 3 Salmon!",0,16,24224,5,24226,[],null,null,[],255,0,0,255,1,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,60,60,400,0,18,72,17,2,1024,65535,-5,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Quest - Txt",0,1,0,5]}],"data":["BOTTOM",0,1,0,5]}],"data":["offset",0,1,0,5]}],"data":["[Canvas] Quest",0,1,0,5]},{"id":32628,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32618,"data":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0]},{"type":43,"id":32658,"data":[1,100,100,1,0,4,"Default",22222,1,null,null,0,0,0,0]},{"type":14,"id":32660,"enabled":1,"class":47,"data":[1,100,1,800,600,0,0,3,96,96,1,0]},{"type":14,"id":32662,"enabled":1,"class":48,"data":[1,0,-1]}],"children":[{"id":32648,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32630,"data":[0.5,0.5,0,0,1,1,0,0,1934,-25,0,0,0,0,1,1,1,1]},{"type":8,"id":32680,"enabled":1,"class":49,"data":[]}],"children":[{"id":32682,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32650,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":32712,"data":[1]},{"type":14,"id":32714,"enabled":1,"class":11,"data":[15,24306,0,0,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":32720,"path":"Assets/Content/Prefabs/UI.prefab","assetBundleId":-1,"components":[{"type":7,"id":32684,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":32740,"data":[1]},{"type":14,"id":32742,"enabled":1,"class":11,"data":[15,738,1,0,1,4,1,1,0,0,1,null,null,1,1,1,1,0,1,0,0,0,0]},{"type":14,"id":32744,"enabled":1,"class":52,"data":[[[[[null,null,"Game, Assembly-CSharp","OpenURL",1,[null,null,"UnityEngine.Object, UnityEngine",0,0,"",0],2]]]],[3,0,null,null,null,null,null,null,null,null],1,[1,1,1,1,0.960784316062927,0.960784316062927,0.960784316062927,1,0.7843137383461,0.7843137383461,0.7843137383461,1,0.960784316062927,0.960784316062927,0.960784316062927,1,0.7843137383461,0.7843137383461,0.7843137383461,0.501960813999176,1,0.100000001490116],[null,null,null,null,null,null,null,null],["Normal","Highlighted","Pressed","Selected","Disabled"],1,11,32742]}],"children":[],"data":["Button - Open Game Page",0,1,0,5]}],"data":["End Image",0,1,0,5]}],"data":["offset",0,1,0,5]}],"data":["[Canvas] EndCard",0,1,0,5]}],"data":["UI",0,1,0,0]},{"id":24386,"path":"Assets/Content/Prefabs/Particles/Block Trail.prefab","assetBundleId":-1,"components":[{"type":1,"id":24378,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":24390,"data":[1,5,458,[5,458],1,0,0,0,-1,-1,1,1,0,0,0,0,[],0,0.100000001490116,0.5,0,0.5,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0,0,0.1852903,1,0.3499962,1,1,0],0],1,1,1,0,1,1,1,0,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Block Trail",0,1,0,1]},{"id":24304,"path":"Assets/Content/Prefabs/Particles/Slot Highlight.prefab","assetBundleId":-1,"components":[{"type":1,"id":24318,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":2,"id":24320,"data":[[1,1,0,[0,null,null,1,0,0],[0,null,null,1,0,0.400000005960464],[0,null,null,1,0,0],0,[1,null,[0,1,0,0,0,0,0,0.5017921,0.7826087,0,0,0,0,0,1,1,0,0,0,0,0],0.5,0,0],[1,null,[0,1,0,0,0,0,0,1,1,0,0,0,0,0],1,0,0],[1,null,[0,1,0,0,0,0,0,1,1,0,0,0,0,0],1,0,0],0,[1,null,[0,-0.01086998,0,0,0,0,0,0.5053763,0.1195648,0,0,0,0,0,1,-0.01086998,0,0,0,0,0],6.28318500518799,0,0],[1,null,[0,0.456522,0,0,0,0,0,1,0.456522,0,0,0,0,0],6.28318500518799,0,0],[1,null,[0,0,1,1,0,1,1,1,1,1,1,0,1,1],6.28318500518799,0,0],[0,null,null,-4.34746422889321e-13,5.60519385729927e-45,-4.34736665069768e-13,5.60519385729927e-45,1,1,1,1],[0,null,null,1,0,0],0,null,null,0.300000011920929,0,0,1,1000,0,0],[0,[1,null,[0,[[1,1,1,1,0],[1,1,1,1,1]],[[1,0],[1,1]]],-4.34772226901026e-13,5.60519385729927e-45,-4.34767022730598e-13,5.60519385729927e-45,-4.34765504847556e-13,5.60519385729927e-45,-4.59212273009662e+34,4.59079389897453e-41],0,1],[0,[1,null,[0,[[1,1,1,1,0],[1,1,1,1,1]],[[0,0],[1,0.501457214355469],[0,1]]],-4.34772660581895e-13,5.60519385729927e-45,-4.34767456411467e-13,5.60519385729927e-45,-4.34765938528425e-13,5.60519385729927e-45,-4.59212273009662e+34,4.59079389897453e-41]],[0,[0,null,null,1,0,6],[0,null,null,1,0,0],[]],[0,[0,null,null,1,0,1],[0,null,null,1,0,1],[0,null,null,1,0,0.785398185253143],0,0,1],[0,[1,null,[0,1,0,0,0,0,0,1,1,0,0,0,0,0],1,0,0],[1,null,[0,1,0,0,0,0,0,1,1,0,0,0,0,0],1,0,0],[1,null,[0,0.497406,1.118327,1.118327,0,0,0,1,1,0,0,0,0,0],1.30899691581726,0,0],0],[0,4,0,0,0,0,1,0,0,[0,null,null,1,0,1],1,25,5,0,0,0,0,null,null,null,null,null,null,0,0,1,0,360,0,0,[0,null,null,1,0,1],0.200000002980232,0,0,0,0,0,0,1,1,1],[0,[1,null,[0,1,0,0,0,0,0,1,1,0,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],0,0,1],[0,[1,null,[0,0.5492208,1.244553,1.244553,0,0,0,1,1,0,0,0,0,0],4,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],0],[0,0,0,1,1,1,[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],0.999899983406067,0,0],[0,null,null,1,0,0],1,0,0,0,1,[null,null]],[0,[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,1],0,[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0]],[0,0,[0,null,null,1,0,1],[0,null,null,1,0,1],[0,null,null,1,0,1],0.5,1,1,0.5,2,2,[0,null,null,1,0,0],0,0,[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[0,null,null,1,0,1],[0,null,null,1,0,0],[0,null,null,1,0,0]],[0,0,[0,null,null,1,0,1]],[0,[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],0,0],[0,[0,null,null,1,0,1],[0,null,null,1,0,1],[0,null,null,1,0,1],[0,null,null,1,0,1],1,0,0,[0,null,null,1,0,0],1,1],1,0]},{"type":3,"id":24322,"data":[0,null,null,[null,null],1,1,0,0,-1,-1,1,1,0,0,1,1,4,572,1,4,3,4,2,2,0,0,1,0,0,0.5,0,0,0,null,null]}],"children":[{"id":24336,"path":"Assets/Content/Prefabs/Particles/Slot Highlight.prefab","assetBundleId":-1,"components":[{"type":1,"id":24326,"data":[0,0,0,1,1,1,0.707106828689575,0,0,0.707106828689575]},{"type":2,"id":24344,"data":[[0.600000023841858,0,0,[0,null,null,1,0,0],[3,null,null,1,0.200000002980232,0.600000023841858],[3,null,null,1,5,11],0,[3,null,null,1,0.200000002980232,0.5],[3,null,null,1,1,1],[3,null,null,1,1,1],0,[3,null,null,1,0,1],[3,null,null,1,0,1],[3,null,null,1,0,6.28318500518799],[0,null,null,-4.34740351357155e-13,5.60519385729927e-45,-4.34730593537602e-13,5.60519385729927e-45,1,0.782005965709686,0.117250561714172,1],[0,null,null,1,0,-2],0,null,null,1,0,0,1,1000,0,0],[0,[1,null,[0,[[1,0.807843148708344,0,1,0],[0.962264060974121,0.416248232126236,0.284010499715805,1,0.496635377407074]],[[1,0],[1,0.715129315853119],[0,1]]],-4.3476615536886e-13,5.60519385729927e-45,-4.34760951198432e-13,5.60519385729927e-45,-4.3475943331539e-13,5.60519385729927e-45,-4.59212273009662e+34,4.59079389897453e-41],0,1],[0,[1,null,[0,[[1,0.807843148708344,0,1,0],[1,1,1,1,0.594125270843506]],[[1,0],[1,0.715129315853119],[0,1]]],-4.34766589049729e-13,5.60519385729927e-45,-4.34761384879301e-13,5.60519385729927e-45,-4.34759866996259e-13,5.60519385729927e-45,-4.59212273009662e+34,4.59079389897453e-41]],[1,[0,null,null,1,0,0],[0,null,null,1,0,0],[[[0,null,null,1,0,20],1,0,20,0.00999999977648258,0]]],[0,[0,null,null,1,0,1],[0,null,null,1,0,1],[0,null,null,1,0,0.785398185253143],0,0,1],[1,[2,[0,0,0,0,0,0,0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,1,0,0,0,0,0],1,0,0],[2,[0,0,0,0,0,0,0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,1,0,0,0,0,0],1,0,0],[2,[0,-1,0,0,0,0,0,1,-0.4945055,0,0,0,0,0],[0,1,0,0,0,0,0,1,0.4065934,0,0,0,0,0],2.09439516067505,0,0],0],[1,10,0,0,0,0,0.200000002980232,0,0,[0,null,null,1,0,1],0,28.75,5,0,0,0,0,null,null,null,null,null,null,0,0,1,0,360,3,0,[0,null,null,1,0,1],0.200000002980232,0,-0.670000016689301,0,-90,0,0,1,1,1],[0,[1,null,[0,1,0,0,0,0,0,1,1,0,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],0,0,1],[1,[1,null,[0,0.47826,1.863361,1.863361,0,0,0,0.2713935,0.9681337,-0.449419,-0.449419,0,0,0,1,0,-2,-2,0,0,0],1.39999997615814,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],0],[0,0,0,2,2,1,[3,null,null,1,0,0.999899983406067],[0,null,null,1,0,0],1,0,0,0,1,[null,null]],[0,[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,1],0,[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0]],[0,0,[0,null,null,1,0,1],[0,null,null,1,0,1],[0,null,null,1,0,1],0.5,1,1,0.5,2,2,[0,null,null,1,0,0],0,0,[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[0,null,null,1,0,1],[0,null,null,1,0,0],[0,null,null,1,0,0]],[0,0,[0,null,null,1,0,1]],[0,[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],0,0],[1,[0,null,null,1,0,0.5],[0,null,null,1,0,1],[0,null,null,1,0,1],[0,null,null,1,0,1],0.419999986886978,0,0,[0,null,null,1,0,0],1,1],1,0]},{"type":3,"id":24346,"data":[1,5,24354,[5,24354],1,1,0,9999,-1,-1,1,1,0,0,1,1,4,24356,1,3,0,0,0,2,0,0,1,0,0,0.5,0,0,0,null,null]}],"children":[],"data":["Star Poof",0,1,0,1]},{"id":24340,"path":"Assets/Content/Prefabs/Particles/Slot Highlight.prefab","assetBundleId":-1,"components":[{"type":1,"id":24328,"data":[0,0,0,1,1,1,0.707106828689575,0,0,0.707106828689575]},{"type":2,"id":24348,"data":[[0.600000023841858,0,0,[0,null,null,1,0,0],[3,null,null,1,0.200000002980232,0.600000023841858],[3,null,null,1,5,11],0,[3,null,null,1,0.5,0.800000011920929],[3,null,null,1,1,1],[3,null,null,1,1,1],0,[3,null,null,1,0,1],[3,null,null,1,0,1],[3,null,null,1,0,6.28318500518799],[0,null,null,-4.34740351357155e-13,5.60519385729927e-45,-4.34730593537602e-13,5.60519385729927e-45,1,1,1,1],[0,null,null,1,0,0],0,null,null,1,0,0,1,1000,0,0],[0,[1,null,[0,[[1,0.807843148708344,0,1,0],[0.962264060974121,0.416248232126236,0.284010499715805,1,0.496635377407074]],[[1,0],[1,0.715129315853119],[0,1]]],-4.3476615536886e-13,5.60519385729927e-45,-4.34760951198432e-13,5.60519385729927e-45,-4.3475943331539e-13,5.60519385729927e-45,-4.59212273009662e+34,4.59079389897453e-41],0,1],[0,[1,null,[0,[[1,0.807843148708344,0,1,0],[1,1,1,1,0.594125270843506]],[[1,0],[1,0.715129315853119],[0,1]]],-4.34766589049729e-13,5.60519385729927e-45,-4.34761384879301e-13,5.60519385729927e-45,-4.34759866996259e-13,5.60519385729927e-45,-4.59212273009662e+34,4.59079389897453e-41]],[1,[0,null,null,1,0,0],[0,null,null,1,0,0],[[[0,null,null,1,0,10],1,0,10,0.00999999977648258,0]]],[0,[0,null,null,1,0,1],[0,null,null,1,0,1],[0,null,null,1,0,0.785398185253143],0,0,1],[1,[2,[0,0,0,0,0,0,0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,1,0,0,0,0,0],1,0,0],[2,[0,0,0,0,0,0,0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,1,0,0,0,0,0],1,0,0],[2,[0,-1,0,0,0,0,0,1,-0.4945055,0,0,0,0,0],[0,1,0,0,0,0,0,1,0.4065934,0,0,0,0,0],2.09439516067505,0,0],0],[1,4,0,0,0,0,0.100000001490116,0,0,[0,null,null,1,0,1],0,12,5,0,0,0,0,null,null,null,null,null,null,0,0,1,0,360,3,0,[0,null,null,1,0,1],0.200000002980232,0,-0.670000016689301,0,-90,0,0,1,1,1],[0,[1,null,[0,1,0,0,0,0,0,1,1,0,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],0,0,1],[1,[1,null,[0,0.47826,1.863361,1.863361,0,0,0,0.2713935,0.9681337,-0.449419,-0.449419,0,0,0,1,0,-2,-2,0,0,0],1.39999997615814,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],0],[0,0,0,2,2,1,[3,null,null,1,0,0.999899983406067],[0,null,null,1,0,0],1,0,0,0,1,[null,null]],[0,[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,1],0,[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0]],[0,0,[0,null,null,1,0,1],[0,null,null,1,0,1],[0,null,null,1,0,1],0.5,1,1,0.5,2,2,[0,null,null,1,0,0],0,0,[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[1,null,[0,0,0,1,0,0,0,1,1,1,0,0,0,0],1,0,0],[0,null,null,1,0,1],[0,null,null,1,0,0],[0,null,null,1,0,0]],[0,0,[0,null,null,1,0,1]],[0,[0,null,null,1,0,0],[0,null,null,1,0,0],[0,null,null,1,0,0],0,0],[1,[0,null,null,1,0,0.5],[0,null,null,1,0,1],[0,null,null,1,0,1],[0,null,null,1,0,1],0.419999986886978,0,0,[0,null,null,1,0,0],1,1],1,0]},{"type":3,"id":24350,"data":[1,5,24360,[5,24360],1,1,0,10000,-1,-1,1,1,0,0,1,1,4,24356,1,5,0,4,0,2,0,0,1,0,0,0.5,0,0,0,null,null]}],"children":[],"data":["Poof",0,1,0,1]}],"data":["Slot Highlight",0,1,0,1]},{"id":30428,"path":"Assets/Content/Prefabs/Particles/SmokeMeshLowPoly.fbx","assetBundleId":-1,"components":[{"type":1,"id":32574,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":55,"id":32576,"data":[4,24356]},{"type":56,"id":32578,"data":[null,null,1,null,null,[null,null],1,1,0,0,-1,-1,1,1,0,0,1,1]}],"children":[],"data":["SmokeMeshLowPoly",0,1,0,0]},{"id":24690,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32468,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32470,"enabled":1,"class":27,"data":[60,null,null,29,32472,54,32474,null,null,null,null,32,32476,33,32478,34,32480,35,32482,36,32484,37,32486,38,32488,0,39,32490,54,37,[]]}],"children":[{"id":32548,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32492,"data":[0,0,-10,1,1,1,0,0,0,1]}],"children":[],"data":["__________________________________________",0,0,0,0]},{"id":32536,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32494,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32566,"enabled":1,"class":40,"data":[null,null,null,null,[],1,5000]}],"children":[],"data":["Tile Spawner",0,1,0,0]},{"id":32558,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32496,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32490,"enabled":1,"class":39,"data":[null,null,200,[]]}],"children":[],"data":["Tile Randomizer",0,1,0,0]},{"id":32546,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32498,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32476,"enabled":1,"class":32,"data":[null,null,0.100000001490116,0.00999999977648258,0.100000001490116]}],"children":[],"data":["Tile Spawn Animation",0,1,0,0]},{"id":32552,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32500,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32472,"enabled":1,"class":29,"data":[null,null]}],"children":[],"data":["Tile Actions",0,1,0,0]},{"id":32560,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32502,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32474,"enabled":1,"class":54,"data":[null,null,0,0.899999976158142]}],"children":[],"data":["Tile Locker",0,1,0,0]},{"id":32528,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32504,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32478,"enabled":1,"class":33,"data":[null,null,41,24304,[],[]]}],"children":[],"data":["Tile Matcher",0,1,0,0]},{"id":32550,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32506,"data":[0,0,-10,1,1,1,0,0,0,1]}],"children":[],"data":["__________________________________________  ",0,0,0,0]},{"id":32538,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32508,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32480,"enabled":1,"class":34,"data":[null,null]}],"children":[],"data":["Lose Condition",0,1,0,0]},{"id":32562,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32510,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32482,"enabled":1,"class":35,"data":[null,null]}],"children":[],"data":["Win Condition",0,1,0,0]},{"id":32532,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32512,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32488,"enabled":1,"class":38,"data":[null,null,[null,null,null,null,null,null,null,null,null,null,null,null]]}],"children":[],"data":["Quest Condition",0,1,0,0]},{"id":32530,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32514,"data":[0,0,-10,1,1,1,0,0,0,1]}],"children":[],"data":["__________________________________________    ",0,0,0,0]},{"id":32542,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32516,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32484,"enabled":1,"class":36,"data":[null,null,0.200000002980232,[],0.5]}],"children":[],"data":["Input - Touch",0,1,0,0]},{"id":32534,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32518,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32564,"enabled":1,"class":42,"data":[null,null,1,0.0500000007450581]}],"children":[],"data":["Bag Sorter",0,1,0,0]},{"id":32540,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32520,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32486,"enabled":1,"class":37,"data":[null,null,null,null]}],"children":[],"data":["End Card",0,1,0,0]},{"id":32554,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32522,"data":[0,0,-10,1,1,1,0,0,0,1]}],"children":[],"data":["__________________________________________    ",0,0,0,0]},{"id":32556,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32524,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":32568,"enabled":1,"class":44,"data":[null,null,45,24212,45,24214,45,24216,45,24218,46,32570]},{"type":46,"id":32570,"data":[null,null,null,null,1,0,0,1,1,1]}],"children":[],"data":["Sounds",0,1,0,0]},{"id":32544,"path":"Assets/Content/Prefabs/GAME.prefab","assetBundleId":-1,"components":[{"type":1,"id":32526,"data":[0,0,-10,1,1,1,0,0,0,1]}],"children":[],"data":["__________________________________________     ",0,0,0,0]}],"data":["GAME",0,1,0,0]}],"scenes":[{"id":0,"name":"RheanovBackup","path":"Assets/Scenes/RheanovBackup.unity","assetBundleId":-1,"data":["RheanovBackup",0,1],"objects":[{"id":62292,"path":"__________________________________________  ","assetBundleId":0,"components":[{"type":1,"id":62294,"data":[0,0,-10,1,1,1,0,0,0,1]}],"children":[],"data":["__________________________________________  ",0,1,0,0]},{"id":61942,"path":"Scene","assetBundleId":0,"components":[{"type":1,"id":61944,"data":[0,0,0,1,1,1,0,0,0,1]}],"children":[{"id":61994,"path":"Scene","assetBundleId":0,"components":[{"type":1,"id":62000,"data":[0,0,-20,1,1,1,0,0,0,1]},{"type":23,"id":61998,"data":[1,0.5625,1,8,0.192156866192818,0.301960796117783,0.474509805440903,0,0.300000011920929,5000,60,-1,2,-1,[0,0,1,1],null,null,0,50,36,24,0,0,2]},{"type":24,"id":61996,"data":[]}],"children":[],"data":["Camera",4,1,0,0]},{"id":61880,"path":"Scene","assetBundleId":0,"components":[{"type":1,"id":61886,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":14,"id":61884,"enabled":1,"class":25,"data":[null,null,1,10]},{"type":14,"id":61882,"enabled":1,"class":26,"data":["Horizontal","Vertical","Submit","Cancel",10,0.5,0,1]}],"children":[],"data":["EventSystem",0,1,0,0]},{"id":62182,"path":"Scene","assetBundleId":0,"components":[{"type":1,"id":62186,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":62184,"data":[1,5,458,[5,458],0,0,0,-100,-1,0,1,1,0,0,1,1,1,1,1,1,15,24288,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,0,0,0]}],"data":["Scene",0,1,0,0]},{"id":62014,"path":"__________________________________________  ","assetBundleId":0,"components":[{"type":1,"id":62016,"data":[0,0,-10,1,1,1,0,0,0,1]}],"children":[],"data":["__________________________________________  ",0,1,0,0]},{"id":62204,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62208,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62206,"enabled":1,"class":27,"data":[60,28,62250,29,62102,null,null,30,62312,31,62272,32,62220,33,62322,34,62170,35,61980,36,62152,37,62158,38,62406,0,39,62006,54,37,[]]}],"children":[{"id":62244,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62246,"data":[0,0,-10,1,1,1,0,0,0,1]}],"children":[],"data":["__________________________________________",0,0,0,0]},{"id":62308,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62310,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62312,"enabled":1,"class":30,"data":[1]}],"children":[],"data":["Tile Locker2D",0,1,0,0]},{"id":62172,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62176,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62174,"enabled":1,"class":40,"data":[null,null,null,null,[],1,5000]}],"children":[],"data":["Tile Spawner",0,1,0,0]},{"id":62002,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62004,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62006,"enabled":1,"class":39,"data":[null,null,200,[]]}],"children":[],"data":["Tile Randomizer",0,1,0,0]},{"id":62216,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62218,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62220,"enabled":1,"class":32,"data":[null,null,0.100000001490116,0.00999999977648258,0.100000001490116]}],"children":[],"data":["Tile Spawn Animation",0,1,0,0]},{"id":62100,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62104,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62102,"enabled":1,"class":29,"data":[null,null]}],"children":[],"data":["Tile Actions",0,1,0,0]},{"id":62318,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62320,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62322,"enabled":1,"class":33,"data":[null,null,41,24304,[],[]]}],"children":[],"data":["Tile Matcher",0,1,0,0]},{"id":62018,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62020,"data":[0,0,-10,1,1,1,0,0,0,1]}],"children":[],"data":["__________________________________________  ",0,0,0,0]},{"id":62166,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62168,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62170,"enabled":1,"class":34,"data":[null,null]}],"children":[],"data":["Lose Condition",0,1,0,0]},{"id":61976,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":61978,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":61980,"enabled":1,"class":35,"data":[null,null]}],"children":[],"data":["Win Condition",0,1,0,0]},{"id":62402,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62404,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62406,"enabled":1,"class":38,"data":[null,null,[9,62042,9,62192,9,62290,9,62030,9,61986,9,61964]]}],"children":[],"data":["Quest Condition",0,1,0,0]},{"id":62414,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62416,"data":[0,0,-10,1,1,1,0,0,0,1]}],"children":[],"data":["__________________________________________    ",0,0,0,0]},{"id":62148,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62150,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62152,"enabled":1,"class":36,"data":[null,null,0.200000002980232,[],0.699999988079071]}],"children":[],"data":["Input - Touch",0,1,0,0]},{"id":62160,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62162,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62164,"enabled":1,"class":42,"data":[null,null,1,0.0500000007450581]}],"children":[],"data":["Bag Sorter",0,1,0,0]},{"id":62154,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62156,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62158,"enabled":1,"class":37,"data":[43,62228,null,null]}],"children":[],"data":["End Card",0,1,0,0]},{"id":61866,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":61868,"data":[0,0,-10,1,1,1,0,0,0,1]}],"children":[],"data":["__________________________________________    ",0,0,0,0]},{"id":61870,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":61872,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":61876,"enabled":1,"class":44,"data":[null,null,45,24212,45,24214,45,24216,45,24218,46,61874]},{"type":46,"id":61874,"data":[null,null,null,null,1,0,0,1,1,1]}],"children":[],"data":["Sounds",0,1,0,0]},{"id":62140,"path":"GAME","assetBundleId":0,"components":[{"type":1,"id":62142,"data":[0,0,-10,1,1,1,0,0,0,1]}],"children":[],"data":["__________________________________________     ",0,0,0,0]}],"data":["GAME",0,1,0,0]},{"id":62210,"path":"__________________________________________  ","assetBundleId":0,"components":[{"type":1,"id":62212,"data":[0,0,-10,1,1,1,0,0,0,1]}],"children":[],"data":["__________________________________________  ",0,1,0,0]},{"id":62338,"path":"UI","assetBundleId":0,"components":[{"type":1,"id":62340,"data":[0,0,0,1,1,1,0,0,0,1]}],"children":[{"id":61904,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":61906,"data":[0.5,0.5,0,0,0,0,1080,1919.99987792969,0,0,80,0,0,0,1,0.00833333376795053,0.00833333376795053,0.00833333376795053]},{"type":43,"id":61912,"data":[1,100,100,0,1,0,"Default",-100,1,23,61998,0,0,0,0]},{"type":14,"id":61910,"enabled":1,"class":47,"data":[1,100,1,1080,1920,0,0,3,96,96,1,0]},{"type":14,"id":61908,"enabled":1,"class":48,"data":[1,0,-1]}],"children":[{"id":61860,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":61862,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":8,"id":61864,"enabled":1,"class":49,"data":[]}],"children":[{"id":61930,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":61932,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,0.999599874019623,0.999599874019623,0.999599874019623]},{"type":13,"id":61936,"data":[1]},{"type":14,"id":61934,"enabled":1,"class":11,"data":[15,24228,0,0,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Background",0,1,0,5]}],"data":["offset",0,1,0,5]}],"data":["[Canvas] Background",0,1,0,5]},{"id":62044,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":62046,"data":[0.5,0.5,0,0,0,0,1080,1919.99987792969,0,0,80,0,0,0,1,0.00833333376795053,0.00833333376795053,0.00833333376795053]},{"type":43,"id":62052,"data":[1,100,100,0,1,1,"Default",22222,1,23,61998,0,0,0,0]},{"type":14,"id":62050,"enabled":1,"class":47,"data":[1,100,1,1080,1920,0,0,3,96,96,1,0]},{"type":14,"id":62048,"enabled":1,"class":48,"data":[1,0,-1]}],"children":[{"id":61914,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":61916,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":8,"id":61918,"enabled":1,"class":49,"data":[]}],"children":[{"id":61920,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":61922,"data":[0.5,1,0,1,1,1,0,500,0,-50,0,0,0,0,1,1,1,1]},{"type":14,"id":61928,"enabled":0,"class":11,"data":[null,null,0,0,1,4,1,1,0,0,1,null,null,1,0.599999904632568,0.599999904632568,0.599999904632568,1,1,0,0,0,0]},{"type":14,"id":61926,"enabled":1,"class":50,"data":[0,1,1,0,1,0,0,0,0,0,0,0,0]},{"type":13,"id":61924,"data":[1]}],"children":[{"id":62474,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":62476,"data":[0.5,0.5,0,1,0,1,450,500,225,-250,0,0,0,0,1,1,1,1]},{"type":14,"id":62480,"enabled":0,"class":11,"data":[null,null,0,0,1,4,1,1,0,0,1,null,null,1,1,0.888257026672363,0,1,1,0,0,0,0]},{"type":13,"id":62478,"data":[1]}],"children":[{"id":62482,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":62484,"data":[0.5,0.5,0,1,0,1,450,450,225,-250,0,0,0,0,1,1,1,1]},{"type":13,"id":62488,"data":[1]},{"type":14,"id":62486,"enabled":1,"class":11,"data":[15,24268,0,1,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":62260,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":62262,"data":[0.5,0,0.5,0,0.5,0,431.050048828125,0,0,30,0,0,0,0,1,1,1,1]},{"type":13,"id":62266,"data":[1]},{"type":14,"id":62264,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Salmon: 0",0,16,24224,5,24226,[],null,null,[],255,0,0,255,1,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,60,60,400,0,18,72,1,2,1024,65535,-5,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Quest - Txt",0,1,0,5]}],"data":["Quest - Icon",0,1,0,5]}],"data":["Quest - Goal",0,1,0,5]},{"id":62232,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":62234,"data":[0.5,0.5,0,1,0,1,560,500,765,-250,0,0,0,0,1,1,1,1]},{"type":14,"id":62240,"enabled":1,"class":51,"data":[0,0,150,150,20,50,1,3,0,0,0,0,4]},{"type":14,"id":62238,"enabled":0,"class":11,"data":[null,null,0,0,1,4,1,1,0,0,1,null,null,1,0.359031826257706,0.879245281219482,0.031519990414381,1,1,0,0,0,0]},{"type":13,"id":62236,"data":[1]}],"children":[{"id":-804342,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":62040,"data":[0.5,0.5,0,1,0,1,150,150,110,-150,0,0,0,0,1,1,1,1]},{"type":8,"id":62042,"enabled":1,"class":9,"data":[1,1,1,1.5,1.5,1.5,1,1,1,1,0.699999988079071,10,24198,0,1,11,-804354,12,-804362]},{"type":13,"id":-804344,"data":[1]},{"type":14,"id":-804346,"enabled":1,"class":11,"data":[15,24408,0,1,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":-804348,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":-804350,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":-804352,"data":[1]},{"type":14,"id":-804354,"enabled":1,"class":11,"data":[15,24268,0,0,1,4,1,1,0,0,1,null,null,1,0,0,0,1,1,0,0,0,0]}],"children":[],"data":["Icon",0,1,0,5]},{"id":-804356,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":-804358,"data":[0.5,1,0.100000001490116,0,0.899999976158142,0,0,20,0,-10,0,0,0,0,1,1,1,1]},{"type":13,"id":-804360,"data":[1]},{"type":14,"id":-804362,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Salmon 0",0,16,24224,5,24226,[],null,null,[],0,0,0,255,0,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,18,18,400,0,18,72,1,2,256,65535,0,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Amount",0,1,0,5]}],"data":["Quest - Slot (1)",0,1,0,5]},{"id":-804568,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":62190,"data":[0.5,0.5,0,1,0,1,150,150,280,-150,0,0,0,0,1,1,1,1]},{"type":8,"id":62192,"enabled":1,"class":9,"data":[1,1,1,1.5,1.5,1.5,1,1,1,1,0.699999988079071,10,24292,2,0,11,-804580,12,-804588]},{"type":13,"id":-804570,"data":[1]},{"type":14,"id":-804572,"enabled":1,"class":11,"data":[15,24408,0,1,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":-804574,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":-804576,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":-804578,"data":[1]},{"type":14,"id":-804580,"enabled":1,"class":11,"data":[15,24290,0,0,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Icon",0,1,0,5]},{"id":-804582,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":-804584,"data":[0.5,1,0.100000001490116,0,0.899999976158142,0,0,20,0,-10,0,0,0,0,1,1,1,1]},{"type":13,"id":-804586,"data":[1]},{"type":14,"id":-804588,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"OliveOil 2",0,16,24224,5,24226,[],null,null,[],0,0,0,255,0,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,18,18,400,0,18,72,1,2,256,65535,0,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Amount",0,1,0,5]}],"data":["Quest - Slot (2)",0,1,0,5]},{"id":-804710,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":62288,"data":[0.5,0.5,0,1,0,1,150,150,450,-150,0,0,0,0,1,1,1,1]},{"type":8,"id":62290,"enabled":1,"class":9,"data":[1,1,1,1.5,1.5,1.5,1,1,1,1,0.699999988079071,10,24298,1,0,11,-804722,12,-804730]},{"type":13,"id":-804712,"data":[1]},{"type":14,"id":-804714,"enabled":1,"class":11,"data":[15,24408,0,1,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":-804716,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":-804718,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":-804720,"data":[1]},{"type":14,"id":-804722,"enabled":1,"class":11,"data":[15,24296,0,0,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Icon",0,1,0,5]},{"id":-804724,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":-804726,"data":[0.5,1,0.100000001490116,0,0.899999976158142,0,0,20,0,-10,0,0,0,0,1,1,1,1]},{"type":13,"id":-804728,"data":[1]},{"type":14,"id":-804730,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Lemon 1",0,16,24224,5,24226,[],null,null,[],0,0,0,255,0,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,18,18,400,0,18,72,1,2,256,65535,0,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Amount",0,1,0,5]}],"data":["Quest - Slot (3)",0,1,0,5]},{"id":-804320,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":62028,"data":[0.5,0.5,0,1,0,1,150,150,110,-350,0,0,0,0,1,1,1,1]},{"type":8,"id":62030,"enabled":1,"class":9,"data":[1,1,1,1.5,1.5,1.5,1,1,1,1,0.699999988079071,10,24266,1,0,11,-804332,12,-804340]},{"type":13,"id":-804322,"data":[1]},{"type":14,"id":-804324,"enabled":1,"class":11,"data":[15,24408,0,1,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":-804326,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":-804328,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":-804330,"data":[1]},{"type":14,"id":-804332,"enabled":1,"class":11,"data":[15,24264,0,0,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Icon",0,1,0,5]},{"id":-804334,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":-804336,"data":[0.5,1,0.100000001490116,0,0.899999976158142,0,0,20,0,-10,0,0,0,0,1,1,1,1]},{"type":13,"id":-804338,"data":[1]},{"type":14,"id":-804340,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Dill 1",0,16,24224,5,24226,[],null,null,[],0,0,0,255,0,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,18,18,400,0,18,72,1,2,256,65535,0,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Amount",0,1,0,5]}],"data":["Quest - Slot (4)",0,1,0,5]},{"id":-804238,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":61984,"data":[0.5,0.5,0,1,0,1,150,150,280,-350,0,0,0,0,1,1,1,1]},{"type":8,"id":61986,"enabled":1,"class":9,"data":[1,1,1,1.5,1.5,1.5,1,1,1,1,0.699999988079071,10,24262,3,0,11,-804250,12,-804258]},{"type":13,"id":-804240,"data":[1]},{"type":14,"id":-804242,"enabled":1,"class":11,"data":[15,24408,0,1,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":-804244,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":-804246,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":-804248,"data":[1]},{"type":14,"id":-804250,"enabled":1,"class":11,"data":[15,24260,0,0,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Icon",0,1,0,5]},{"id":-804252,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":-804254,"data":[0.5,1,0.100000001490116,0,0.899999976158142,0,0,20,0,-10,0,0,0,0,1,1,1,1]},{"type":13,"id":-804256,"data":[1]},{"type":14,"id":-804258,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Garlic 3",0,16,24224,5,24226,[],null,null,[],0,0,0,255,0,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,18,18,400,0,18,72,1,2,256,65535,0,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Amount",0,1,0,5]}],"data":["Quest - Slot (5)",0,1,0,5]},{"id":-804156,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":61962,"data":[0.5,0.5,0,1,0,1,150,150,450,-350,0,0,0,0,1,1,1,1]},{"type":8,"id":61964,"enabled":1,"class":9,"data":[1,1,1,1.5,1.5,1.5,1,1,1,1,0.699999988079071,10,24244,1,0,11,-804168,12,-804176]},{"type":13,"id":-804158,"data":[1]},{"type":14,"id":-804160,"enabled":1,"class":11,"data":[15,24408,0,1,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":-804162,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":-804164,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":-804166,"data":[1]},{"type":14,"id":-804168,"enabled":1,"class":11,"data":[15,24238,0,0,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Icon",0,1,0,5]},{"id":-804170,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":-804172,"data":[0.5,1,0.100000001490116,0,0.899999976158142,0,0,20,0,-10,0,0,0,0,1,1,1,1]},{"type":13,"id":-804174,"data":[1]},{"type":14,"id":-804176,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Salt 1",0,16,24224,5,24226,[],null,null,[],0,0,0,255,0,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,18,18,400,0,18,72,1,2,256,65535,0,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Amount",0,1,0,5]}],"data":["Quest - Slot (6)",0,1,0,5]}],"data":["Quest - Inventory",0,1,0,5]}],"data":["TOP",0,1,0,5]},{"id":61892,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":61894,"data":[0.5,0,0,0,1,0,0,100,0,0,0,0,0,0,1,1,1,1]}],"children":[{"id":61896,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":61898,"data":[0.5,0,0.5,0,0.5,0,431.050048828125,100,0,374,0,0,0,0,1,0.999599874019623,0.999599874019623,0.999599874019623]},{"type":13,"id":61902,"data":[1]},{"type":14,"id":61900,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Match 3 Salmon!",0,16,24224,5,24226,[],null,null,[],255,0,0,255,1,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,60,60,400,0,18,72,17,2,1024,65535,-5,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Quest - Txt",0,1,0,5]}],"data":["BOTTOM",0,0,0,5]}],"data":["offset",0,1,0,5]}],"data":["[Canvas] Quest",0,1,0,5]},{"id":62222,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":62230,"data":[0.5,0.5,0,0,0,0,800,1422.22204589844,0,0,80,0,0,0,1,0.0112500004470348,0.0112500004470348,0.0112500004470348]},{"type":43,"id":62228,"data":[1,100,100,0,1,2,"Default",22222,1.35000002384186,23,61998,0,0,0,0]},{"type":14,"id":62226,"enabled":1,"class":47,"data":[1,100,1,800,600,0,0,3,96,96,1,0]},{"type":14,"id":62224,"enabled":1,"class":48,"data":[1,0,-1]}],"children":[{"id":62070,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":62072,"data":[0.5,0.5,0,0,1,1,0,0,1003,9,0,0,0,0,1,1,1,1]},{"type":8,"id":62074,"enabled":1,"class":49,"data":[]}],"children":[{"id":62446,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":62448,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":62452,"data":[1]},{"type":14,"id":62450,"enabled":1,"class":11,"data":[15,24306,0,0,1,4,1,1,0,0,1,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[{"id":62458,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":62460,"data":[0.5,0.5,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":62466,"data":[1]},{"type":14,"id":62464,"enabled":1,"class":11,"data":[15,738,1,0,1,4,1,1,0,0,1,null,null,1,1,1,1,0,1,0,0,0,0]},{"type":14,"id":62462,"enabled":1,"class":52,"data":[[[[[27,62206,"Game, Assembly-CSharp","OpenURL",1,[null,null,"UnityEngine.Object, UnityEngine",0,0,"",0],2]]]],[3,0,null,null,null,null,null,null,null,null],1,[1,1,1,1,0.960784316062927,0.960784316062927,0.960784316062927,1,0.7843137383461,0.7843137383461,0.7843137383461,1,0.960784316062927,0.960784316062927,0.960784316062927,1,0.7843137383461,0.7843137383461,0.7843137383461,0.501960813999176,1,0.100000001490116],[null,null,null,null,null,null,null,null],["Normal","Highlighted","Pressed","Selected","Disabled"],1,11,62464]}],"children":[],"data":["Button - Open Game Page",0,1,0,5]}],"data":["End Image",0,1,0,5]}],"data":["offset",0,1,0,5]}],"data":["[Canvas] EndCard",0,1,0,5]},{"id":62368,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":62376,"data":[0.5,0.5,0,0,0,0,700,200,0,-4.86999988555908,0,0,0,0,1,0.00999999977648258,0.00999999977648258,0.00999999977648258]},{"type":43,"id":62374,"data":[1,100,100,0,2,3,"Default",9999,1,23,61998,0,0,0,0]},{"type":14,"id":62372,"enabled":1,"class":47,"data":[0,100,1,800,600,0,0,3,96,96,1,1]},{"type":14,"id":62370,"enabled":1,"class":48,"data":[1,0,-1]}],"children":[{"id":62124,"path":"UI","assetBundleId":0,"components":[{"type":7,"id":62126,"data":[0.5,0,0.5,0.5,0.5,0.5,431.050048828125,100,0,0,0,0,0,0,1,1,1,1]},{"type":13,"id":62130,"data":[1]},{"type":14,"id":62128,"enabled":1,"class":12,"data":[0,null,null,0,0,0,0,"Match 3 Salmon!",0,16,24224,5,24226,[],null,null,[],255,0,0,255,1,0,0,1,0,3,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],null,null,null,null,0,null,null,-1183493901,0,255,255,255,255,60,60,400,0,18,72,17,2,1024,65535,-5,0,0,0,0,0,0,0.400000005960464,0,null,null,null,null,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,null,null,1,1,1,1,1,1,0,0,0,0]}],"children":[],"data":["Quest - Txt",0,1,0,5]}],"data":["[Canvas] Hint",0,1,0,5]}],"data":["UI",0,1,0,0]},{"id":61856,"path":"__________________________________________   ","assetBundleId":0,"components":[{"type":1,"id":61858,"data":[0,0,-10,1,1,1,0,0,0,1]}],"children":[],"data":["__________________________________________   ",0,1,0,0]},{"id":62268,"path":"Bag","assetBundleId":0,"components":[{"type":1,"id":62270,"data":[-3.95000004768372,-5.59000015258789,0,1,1,1,0,0,0,1]},{"type":8,"id":62272,"enabled":1,"class":31,"data":[[22,62504,22,62056,22,62108,22,62392,22,62078,22,62386,22,62442]]}],"children":[{"id":-805236,"path":"Bag","assetBundleId":0,"components":[{"type":1,"id":62506,"data":[1,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62504,"enabled":1,"class":22,"data":[0,null,null]}],"children":[{"id":-805238,"path":"Bag","assetBundleId":0,"components":[{"type":1,"id":-805240,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805242,"data":[1,5,458,[5,458],0,0,0,0,-1,0,1,1,0,0,1,1,1,1,1,1,15,24422,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["TempBackground",0,1,0,0]}],"data":["BagSlot (1)",0,1,0,0]},{"id":-804364,"path":"Bag","assetBundleId":0,"components":[{"type":1,"id":62058,"data":[2,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62056,"enabled":1,"class":22,"data":[0,null,null]}],"children":[{"id":-804366,"path":"Bag","assetBundleId":0,"components":[{"type":1,"id":-804368,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804370,"data":[1,5,458,[5,458],0,0,0,0,-1,0,1,1,0,0,1,1,1,1,1,1,15,24422,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["TempBackground",0,1,0,0]}],"data":["BagSlot (2)",0,1,0,0]},{"id":-804440,"path":"Bag","assetBundleId":0,"components":[{"type":1,"id":62110,"data":[3,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62108,"enabled":1,"class":22,"data":[0,null,null]}],"children":[{"id":-804442,"path":"Bag","assetBundleId":0,"components":[{"type":1,"id":-804444,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804446,"data":[1,5,458,[5,458],0,0,0,0,-1,0,1,1,0,0,1,1,1,1,1,1,15,24422,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["TempBackground",0,1,0,0]}],"data":["BagSlot (3)",0,1,0,0]},{"id":-805010,"path":"Bag","assetBundleId":0,"components":[{"type":1,"id":62394,"data":[4,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62392,"enabled":1,"class":22,"data":[0,null,null]}],"children":[{"id":-805012,"path":"Bag","assetBundleId":0,"components":[{"type":1,"id":-805014,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805016,"data":[1,5,458,[5,458],0,0,0,0,-1,0,1,1,0,0,1,1,1,1,1,1,15,24422,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["TempBackground",0,1,0,0]}],"data":["BagSlot (4)",0,1,0,0]},{"id":-804402,"path":"Bag","assetBundleId":0,"components":[{"type":1,"id":62080,"data":[5,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62078,"enabled":1,"class":22,"data":[0,null,null]}],"children":[{"id":-804404,"path":"Bag","assetBundleId":0,"components":[{"type":1,"id":-804406,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804408,"data":[1,5,458,[5,458],0,0,0,0,-1,0,1,1,0,0,1,1,1,1,1,1,15,24422,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["TempBackground",0,1,0,0]}],"data":["BagSlot (5)",0,1,0,0]},{"id":-805002,"path":"Bag","assetBundleId":0,"components":[{"type":1,"id":62388,"data":[6,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62386,"enabled":1,"class":22,"data":[0,null,null]}],"children":[{"id":-805004,"path":"Bag","assetBundleId":0,"components":[{"type":1,"id":-805006,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805008,"data":[1,5,458,[5,458],0,0,0,0,-1,0,1,1,0,0,1,1,1,1,1,1,15,24422,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["TempBackground",0,1,0,0]}],"data":["BagSlot (6)",0,1,0,0]},{"id":-805168,"path":"Bag","assetBundleId":0,"components":[{"type":1,"id":62444,"data":[7,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62442,"enabled":1,"class":22,"data":[0,null,null]}],"children":[{"id":-805170,"path":"Bag","assetBundleId":0,"components":[{"type":1,"id":-805172,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805174,"data":[1,5,458,[5,458],0,0,0,0,-1,0,1,1,0,0,1,1,1,1,1,1,15,24422,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["TempBackground",0,1,0,0]}],"data":["BagSlot (7)",0,1,0,0]}],"data":["Bag",0,1,0,0]},{"id":62248,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62252,"data":[-4,1.35000002384186,0,1,1,1,0,0,0,1]},{"type":8,"id":62250,"enabled":1,"class":28,"data":[null,null]}],"children":[{"id":62490,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62492,"data":[0,0,100,1,1,1,0,0,0,1]},{"type":8,"id":62494,"enabled":1,"class":53,"data":[0,[17,62198,17,62362,17,62418,17,62382,17,62432,17,62426,17,62424,17,62356,17,62300,17,62314,null,null,17,62242,17,62454,17,62342,17,62500,17,62278,17,62258,17,62380,17,62068,17,62138,17,62132,17,62412,17,61878,17,62094,17,62284,17,62032,17,62456,17,62472,17,62400,17,62328,17,62214]]}],"children":[{"id":61848,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":61850,"data":[1,0,0,1,1,1,0,0,0,1]}],"children":[{"id":-804590,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62196,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62198,"enabled":1,"class":17,"data":[0,0,18,-804606,18,-804612,18,-804600,19,-804618,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24200,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804592,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804594,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804596,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804598,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804600,"data":[1,5,458,[5,458],0,0,0,101,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804602,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804604,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804606,"data":[1,5,458,[5,458],0,0,0,102,-1,0,1,1,0,0,1,1,1,1,1,1,15,24210,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804608,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804610,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804612,"data":[1,5,458,[5,458],0,0,0,103,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804614,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804616,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804618,"data":[1,5,458,[5,458],1,0,0,100,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Bread",0,1,0,3]},{"id":-804942,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62360,"data":[0,-1,0,1,1,1,0,0,0,1]},{"type":8,"id":62362,"enabled":1,"class":17,"data":[0,0,18,-804958,18,-804964,18,-804952,19,-804970,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24202,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804944,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804946,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804948,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804950,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804952,"data":[1,5,458,[5,458],0,0,0,111,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804954,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804956,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804958,"data":[1,5,458,[5,458],0,0,0,112,-1,0,1,1,0,0,1,1,1,1,1,1,15,24294,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804960,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804962,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804964,"data":[1,5,458,[5,458],0,0,0,113,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804966,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804968,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804970,"data":[1,5,458,[5,458],1,0,0,110,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Eggs",0,1,0,3]},{"id":-804508,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62146,"data":[0,-2,0,1,1,1,0,0,0,1]},{"type":8,"id":62418,"enabled":1,"class":17,"data":[0,0,18,-804524,18,-804530,18,-804518,19,-804536,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24200,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804510,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804512,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804514,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804516,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804518,"data":[1,5,458,[5,458],0,0,0,121,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804520,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804522,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804524,"data":[1,5,458,[5,458],0,0,0,122,-1,0,1,1,0,0,1,1,1,1,1,1,15,24210,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804526,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804528,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804530,"data":[1,5,458,[5,458],0,0,0,123,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804532,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804534,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804536,"data":[1,5,458,[5,458],1,0,0,120,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Bread",0,1,0,3]}],"data":["Column - 1",0,1,0,0]},{"id":62334,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62336,"data":[2,1.20000004768372,0,1,1,1,0,0,0,1]}],"children":[{"id":-804126,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":61952,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62382,"enabled":1,"class":17,"data":[0,0,18,-804142,18,-804148,18,-804136,19,-804154,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24240,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804128,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804130,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804132,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804134,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804136,"data":[1,5,458,[5,458],0,0,0,131,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804138,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804140,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804142,"data":[1,5,458,[5,458],0,0,0,132,-1,0,1,1,0,0,1,1,1,1,1,1,15,24238,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804144,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804146,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804148,"data":[1,5,458,[5,458],0,0,0,133,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804150,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804152,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804154,"data":[1,5,458,[5,458],1,0,0,130,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Leaves",0,1,0,3]},{"id":-805108,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62430,"data":[0,-1,0,1,1,1,0,0,0,1]},{"type":8,"id":62432,"enabled":1,"class":17,"data":[0,0,18,-805124,18,-805130,18,-805118,19,-805136,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24236,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-805110,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-805112,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-805114,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805116,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805118,"data":[1,5,458,[5,458],0,0,0,141,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-805120,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805122,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-805124,"data":[1,5,458,[5,458],0,0,0,142,-1,0,1,1,0,0,1,1,1,1,1,1,15,24234,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-805126,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805128,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805130,"data":[1,5,458,[5,458],0,0,0,143,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-805132,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805134,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-805136,"data":[1,5,458,[5,458],1,0,0,140,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Apples",0,1,0,3]},{"id":-804822,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62332,"data":[0,-2,0,1,1,1,0,0,0,1]},{"type":8,"id":62426,"enabled":1,"class":17,"data":[0,0,18,-804838,18,-804844,18,-804832,19,-804850,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24232,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804824,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804826,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804828,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804830,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804832,"data":[1,5,458,[5,458],0,0,0,151,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804834,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804836,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804838,"data":[1,5,458,[5,458],0,0,0,152,-1,0,1,1,0,0,1,1,1,1,1,1,15,24230,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804840,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804842,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804844,"data":[1,5,458,[5,458],0,0,0,153,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804846,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804848,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804850,"data":[1,5,458,[5,458],1,0,0,150,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Butter",0,1,0,3]},{"id":-805078,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62422,"data":[0,-3,0,1,1,1,0,0,0,1]},{"type":8,"id":62424,"enabled":1,"class":17,"data":[0,0,18,-805094,18,-805100,18,-805088,19,-805106,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24302,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-805080,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-805082,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-805084,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805086,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805088,"data":[1,5,458,[5,458],0,0,0,161,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-805090,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805092,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-805094,"data":[1,5,458,[5,458],0,0,0,162,-1,0,1,1,0,0,1,1,1,1,1,1,15,24300,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-805096,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805098,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805100,"data":[1,5,458,[5,458],0,0,0,163,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-805102,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805104,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-805106,"data":[1,5,458,[5,458],1,0,0,160,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Honey",0,1,0,3]},{"id":-804912,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62354,"data":[0,-4,0,1,1,1,0,0,0,1]},{"type":8,"id":62356,"enabled":1,"class":17,"data":[0,0,18,-804928,18,-804934,18,-804922,19,-804940,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24222,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804914,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804916,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804918,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804920,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804922,"data":[1,5,458,[5,458],0,0,0,171,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804924,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804926,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804928,"data":[1,5,458,[5,458],0,0,0,172,-1,0,1,1,0,0,1,1,1,1,1,1,15,24220,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804930,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804932,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804934,"data":[1,5,458,[5,458],0,0,0,173,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804936,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804938,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804940,"data":[1,5,458,[5,458],1,0,0,170,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Spinach",0,1,0,3]}],"data":["Column - 2",0,1,0,0]},{"id":62116,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62118,"data":[3,0.800000011920929,0,1,1,1,0,0,0,1]}],"children":[{"id":-804732,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62298,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62300,"enabled":1,"class":17,"data":[0,0,18,-804748,18,-804754,18,-804742,19,-804760,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24222,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804734,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804736,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804738,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804740,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804742,"data":[1,5,458,[5,458],0,0,0,181,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804744,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804746,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804748,"data":[1,5,458,[5,458],0,0,0,182,-1,0,1,1,0,0,1,1,1,1,1,1,15,24220,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804750,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804752,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804754,"data":[1,5,458,[5,458],0,0,0,183,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804756,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804758,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804760,"data":[1,5,458,[5,458],1,0,0,180,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Spinach",0,1,0,3]},{"id":-804006,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":61854,"data":[0,-1,0,1,1,1,0,0,0,1]},{"type":8,"id":62314,"enabled":1,"class":17,"data":[0,0,18,-804022,18,-804028,18,-804016,19,-804034,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24240,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804008,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804010,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804012,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804014,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804016,"data":[1,5,458,[5,458],0,0,0,191,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804018,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804020,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804022,"data":[1,5,458,[5,458],0,0,0,192,-1,0,1,1,0,0,1,1,1,1,1,1,15,24238,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804024,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804026,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804028,"data":[1,5,458,[5,458],0,0,0,193,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804030,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804032,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804034,"data":[1,5,458,[5,458],1,0,0,190,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Leaves",0,1,0,3]},{"id":-804290,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62024,"data":[0,-3,0,1,1,1,0,0,0,1]},{"type":8,"id":62242,"enabled":1,"class":17,"data":[0,0,18,-804306,18,-804312,18,-804300,19,-804318,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24232,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804292,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804294,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804296,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804298,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804300,"data":[1,5,458,[5,458],0,0,0,211,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804302,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804304,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804306,"data":[1,5,458,[5,458],0,0,0,212,-1,0,1,1,0,0,1,1,1,1,1,1,15,24230,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804308,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804310,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804312,"data":[1,5,458,[5,458],0,0,0,213,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804314,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804316,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804318,"data":[1,5,458,[5,458],1,0,0,210,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Butter",0,1,0,3]},{"id":-804882,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62350,"data":[0,-4,0,1,1,1,0,0,0,1]},{"type":8,"id":62454,"enabled":1,"class":17,"data":[0,0,18,-804898,18,-804904,18,-804892,19,-804910,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24280,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804884,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804886,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804888,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804890,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804892,"data":[1,5,458,[5,458],0,0,0,221,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804894,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804896,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804898,"data":[1,5,458,[5,458],0,0,0,222,-1,0,1,1,0,0,1,1,1,1,1,1,15,24278,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804900,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804902,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804904,"data":[1,5,458,[5,458],0,0,0,223,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804906,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804908,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804910,"data":[1,5,458,[5,458],1,0,0,220,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - FetaChees",0,1,0,3]}],"data":["Column - 3",0,1,0,0]},{"id":62086,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62088,"data":[4,0,0,1,1,1,0,0,0,1]}],"children":[{"id":-804410,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62098,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62342,"enabled":1,"class":17,"data":[0,0,18,-804426,18,-804432,18,-804420,19,-804438,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24236,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804412,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804414,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804416,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804418,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804420,"data":[1,5,458,[5,458],0,0,0,101,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804422,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804424,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804426,"data":[1,5,458,[5,458],0,0,0,102,-1,0,1,1,0,0,1,1,1,1,1,1,15,24234,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804428,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804430,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804432,"data":[1,5,458,[5,458],0,0,0,103,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804434,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804436,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804438,"data":[1,5,458,[5,458],1,0,0,100,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Apples",0,1,0,3]},{"id":-805206,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62498,"data":[0,-1,0,1,1,1,0,0,0,1]},{"type":8,"id":62500,"enabled":1,"class":17,"data":[0,0,18,-805222,18,-805228,18,-805216,19,-805234,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24200,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-805208,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-805210,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-805212,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805214,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805216,"data":[1,5,458,[5,458],0,0,0,111,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-805218,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805220,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-805222,"data":[1,5,458,[5,458],0,0,0,112,-1,0,1,1,0,0,1,1,1,1,1,1,15,24210,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-805224,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805226,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805228,"data":[1,5,458,[5,458],0,0,0,113,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-805230,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805232,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-805234,"data":[1,5,458,[5,458],1,0,0,110,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Bread",0,1,0,3]},{"id":-804650,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62276,"data":[0,-2,0,1,1,1,0,0,0,1]},{"type":8,"id":62278,"enabled":1,"class":17,"data":[0,0,18,-804666,18,-804672,18,-804660,19,-804678,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24198,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804652,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804654,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804656,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804658,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804660,"data":[1,5,458,[5,458],0,0,0,121,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804662,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804664,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804666,"data":[1,5,458,[5,458],0,0,0,122,-1,0,1,1,0,0,1,1,1,1,1,1,15,24268,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804668,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804670,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804672,"data":[1,5,458,[5,458],0,0,0,123,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804674,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804676,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804678,"data":[1,5,458,[5,458],1,0,0,120,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Salmon",0,1,0,3]},{"id":-804620,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62256,"data":[0,-3,0,1,1,1,0,0,0,1]},{"type":8,"id":62258,"enabled":1,"class":17,"data":[0,0,18,-804636,18,-804642,18,-804630,19,-804648,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24202,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804622,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804624,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804626,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804628,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804630,"data":[1,5,458,[5,458],0,0,0,231,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804632,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804634,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804636,"data":[1,5,458,[5,458],0,0,0,232,-1,0,1,1,0,0,1,1,1,1,1,1,15,24294,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804638,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804640,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804642,"data":[1,5,458,[5,458],0,0,0,233,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804644,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804646,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804648,"data":[1,5,458,[5,458],1,0,0,230,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Eggs",0,1,0,3]},{"id":-804972,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62366,"data":[0,-4,0,1,1,1,0,0,0,1]},{"type":8,"id":62380,"enabled":1,"class":17,"data":[0,0,18,-804988,18,-804994,18,-804982,19,-805000,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24256,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804974,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804976,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804978,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804980,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804982,"data":[1,5,458,[5,458],0,0,0,241,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804984,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804986,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804988,"data":[1,5,458,[5,458],0,0,0,242,-1,0,1,1,0,0,1,1,1,1,1,1,15,24254,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804990,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804992,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804994,"data":[1,5,458,[5,458],0,0,0,243,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804996,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804998,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-805000,"data":[1,5,458,[5,458],1,0,0,240,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Beacon",0,1,0,3]}],"data":["Column - 4",0,1,0,0]},{"id":62200,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62202,"data":[5,0.800000011920929,0,1,1,1,0,0,0,1]}],"children":[{"id":-804372,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62066,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62068,"enabled":1,"class":17,"data":[0,0,18,-804388,18,-804394,18,-804382,19,-804400,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24280,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804374,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804376,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804378,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804380,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804382,"data":[1,5,458,[5,458],0,0,0,181,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804384,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804386,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804388,"data":[1,5,458,[5,458],0,0,0,182,-1,0,1,1,0,0,1,1,1,1,1,1,15,24278,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804390,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804392,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804394,"data":[1,5,458,[5,458],0,0,0,183,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804396,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804398,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804400,"data":[1,5,458,[5,458],1,0,0,180,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - FetaChees",0,1,0,3]},{"id":-804478,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62136,"data":[0,-1,0,1,1,1,0,0,0,1]},{"type":8,"id":62138,"enabled":1,"class":17,"data":[0,0,18,-804494,18,-804500,18,-804488,19,-804506,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24284,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804480,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804482,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804484,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804486,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804488,"data":[1,5,458,[5,458],0,0,0,191,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804490,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804492,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804494,"data":[1,5,458,[5,458],0,0,0,192,-1,0,1,1,0,0,1,1,1,1,1,1,15,24282,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804496,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804498,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804500,"data":[1,5,458,[5,458],0,0,0,193,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804502,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804504,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804506,"data":[1,5,458,[5,458],1,0,0,190,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - TofuChees",0,1,0,3]},{"id":-804036,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":61890,"data":[0,-2,0,1,1,1,0,0,0,1]},{"type":8,"id":62132,"enabled":1,"class":17,"data":[0,0,18,-804052,18,-804058,18,-804046,19,-804064,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24222,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804038,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804040,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804042,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804044,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804046,"data":[1,5,458,[5,458],0,0,0,201,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804048,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804050,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804052,"data":[1,5,458,[5,458],0,0,0,202,-1,0,1,1,0,0,1,1,1,1,1,1,15,24220,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804054,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804056,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804058,"data":[1,5,458,[5,458],0,0,0,203,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804060,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804062,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804064,"data":[1,5,458,[5,458],1,0,0,200,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Spinach",0,1,0,3]},{"id":-805048,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62410,"data":[0,-3,0,1,1,1,0,0,0,1]},{"type":8,"id":62412,"enabled":1,"class":17,"data":[0,0,18,-805064,18,-805070,18,-805058,19,-805076,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24284,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-805050,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-805052,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-805054,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805056,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805058,"data":[1,5,458,[5,458],0,0,0,211,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-805060,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805062,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-805064,"data":[1,5,458,[5,458],0,0,0,212,-1,0,1,1,0,0,1,1,1,1,1,1,15,24282,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-805066,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805068,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805070,"data":[1,5,458,[5,458],0,0,0,213,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-805072,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805074,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-805076,"data":[1,5,458,[5,458],1,0,0,210,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - TofuChees",0,1,0,3]},{"id":-803976,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":61846,"data":[0,-4,0,1,1,1,0,0,0,1]},{"type":8,"id":61878,"enabled":1,"class":17,"data":[0,0,18,-803992,18,-803998,18,-803986,19,-804004,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24196,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-803978,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-803980,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-803982,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-803984,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-803986,"data":[1,5,458,[5,458],0,0,0,221,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-803988,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-803990,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-803992,"data":[1,5,458,[5,458],0,0,0,222,-1,0,1,1,0,0,1,1,1,1,1,1,15,24190,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-803994,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-803996,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-803998,"data":[1,5,458,[5,458],0,0,0,223,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804000,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804002,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804004,"data":[1,5,458,[5,458],1,0,0,220,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Cinamon",0,1,0,3]}],"data":["Column - 5",0,1,0,0]},{"id":62112,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62114,"data":[6,1.20000004768372,0,1,1,1,0,0,0,1]}],"children":[{"id":-804066,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":61940,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62094,"enabled":1,"class":17,"data":[0,0,18,-804082,18,-804088,18,-804076,19,-804094,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24232,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804068,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804070,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804072,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804074,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804076,"data":[1,5,458,[5,458],0,0,0,131,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804078,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804080,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804082,"data":[1,5,458,[5,458],0,0,0,132,-1,0,1,1,0,0,1,1,1,1,1,1,15,24230,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804084,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804086,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804088,"data":[1,5,458,[5,458],0,0,0,133,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804090,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804092,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804094,"data":[1,5,458,[5,458],1,0,0,130,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Butter",0,1,0,3]},{"id":-804680,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62282,"data":[0,-1,0,1,1,1,0,0,0,1]},{"type":8,"id":62284,"enabled":1,"class":17,"data":[0,0,18,-804696,18,-804702,18,-804690,19,-804708,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24240,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804682,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804684,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804686,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804688,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804690,"data":[1,5,458,[5,458],0,0,0,141,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804692,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804694,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804696,"data":[1,5,458,[5,458],0,0,0,142,-1,0,1,1,0,0,1,1,1,1,1,1,15,24238,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804698,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804700,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804702,"data":[1,5,458,[5,458],0,0,0,143,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804704,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804706,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804708,"data":[1,5,458,[5,458],1,0,0,140,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Leaves",0,1,0,3]},{"id":-804096,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":61948,"data":[0,-2,0,1,1,1,0,0,0,1]},{"type":8,"id":62032,"enabled":1,"class":17,"data":[0,0,18,-804112,18,-804118,18,-804106,19,-804124,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24236,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804098,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804100,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804102,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804104,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804106,"data":[1,5,458,[5,458],0,0,0,151,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804108,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804110,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804112,"data":[1,5,458,[5,458],0,0,0,152,-1,0,1,1,0,0,1,1,1,1,1,1,15,24234,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804114,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804116,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804118,"data":[1,5,458,[5,458],0,0,0,153,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804120,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804122,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804124,"data":[1,5,458,[5,458],1,0,0,150,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Apples",0,1,0,3]},{"id":-804448,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62122,"data":[0,-3,0,1,1,1,0,0,0,1]},{"type":8,"id":62456,"enabled":1,"class":17,"data":[0,0,18,-804464,18,-804470,18,-804458,19,-804476,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24280,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804450,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804452,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804454,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804456,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804458,"data":[1,5,458,[5,458],0,0,0,161,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804460,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804462,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804464,"data":[1,5,458,[5,458],0,0,0,162,-1,0,1,1,0,0,1,1,1,1,1,1,15,24278,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804466,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804468,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804470,"data":[1,5,458,[5,458],0,0,0,163,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804472,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804474,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804476,"data":[1,5,458,[5,458],1,0,0,160,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - FetaChees",0,1,0,3]},{"id":-805176,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62470,"data":[0,-4,0,1,1,1,0,0,0,1]},{"type":8,"id":62472,"enabled":1,"class":17,"data":[0,0,18,-805192,18,-805198,18,-805186,19,-805204,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24256,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-805178,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-805180,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-805182,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805184,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805186,"data":[1,5,458,[5,458],0,0,0,171,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-805188,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805190,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-805192,"data":[1,5,458,[5,458],0,0,0,172,-1,0,1,1,0,0,1,1,1,1,1,1,15,24254,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-805194,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805196,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805198,"data":[1,5,458,[5,458],0,0,0,173,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-805200,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805202,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-805204,"data":[1,5,458,[5,458],1,0,0,170,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Beacon",0,1,0,3]}],"data":["Column - 6",0,1,0,0]},{"id":62082,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62084,"data":[7,0,0,1,1,1,0,0,0,1]}],"children":[{"id":-805018,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62398,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62400,"enabled":1,"class":17,"data":[0,0,18,-805034,18,-805040,18,-805028,19,-805046,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24302,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-805020,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-805022,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-805024,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805026,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805028,"data":[1,5,458,[5,458],0,0,0,101,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-805030,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805032,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-805034,"data":[1,5,458,[5,458],0,0,0,102,-1,0,1,1,0,0,1,1,1,1,1,1,15,24300,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-805036,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805038,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805040,"data":[1,5,458,[5,458],0,0,0,103,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-805042,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805044,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-805046,"data":[1,5,458,[5,458],1,0,0,100,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Honey",0,1,0,3]},{"id":-804792,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62326,"data":[0,-1,0,1,1,1,0,0,0,1]},{"type":8,"id":62328,"enabled":1,"class":17,"data":[0,0,18,-804808,18,-804814,18,-804802,19,-804820,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24202,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804794,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804796,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804798,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804800,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804802,"data":[1,5,458,[5,458],0,0,0,111,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804804,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804806,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804808,"data":[1,5,458,[5,458],0,0,0,112,-1,0,1,1,0,0,1,1,1,1,1,1,15,24294,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804810,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804812,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804814,"data":[1,5,458,[5,458],0,0,0,113,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804816,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804818,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804820,"data":[1,5,458,[5,458],1,0,0,110,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Eggs",0,1,0,3]},{"id":-804538,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62180,"data":[0,-2,0,1,1,1,0,0,0,1]},{"type":8,"id":62214,"enabled":1,"class":17,"data":[0,0,18,-804554,18,-804560,18,-804548,19,-804566,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24284,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804540,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804542,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804544,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804546,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804548,"data":[1,5,458,[5,458],0,0,0,121,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804550,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804552,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804554,"data":[1,5,458,[5,458],0,0,0,122,-1,0,1,1,0,0,1,1,1,1,1,1,15,24282,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804556,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804558,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804560,"data":[1,5,458,[5,458],0,0,0,123,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804562,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804564,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804566,"data":[1,5,458,[5,458],1,0,0,120,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - TofuChees",0,1,0,3]}],"data":["Column - 7",0,1,0,0]}],"data":["Layer - 1",0,1,0,0]},{"id":61954,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":61956,"data":[0,0,200,1,1,1,0,0,0,1]},{"type":8,"id":61958,"enabled":1,"class":53,"data":[0,[17,61992,17,62306,17,62316,17,62438]]}],"children":[{"id":62090,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62092,"data":[2.5,-1.21700000762939,0,1,1,1,0,0,0,1]}],"children":[{"id":-804260,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":61990,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":61992,"enabled":1,"class":17,"data":[0,0,18,-804276,18,-804282,18,-804270,19,-804288,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24196,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804262,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804264,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804266,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804268,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804270,"data":[1,5,458,[5,458],0,0,0,201,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804272,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804274,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804276,"data":[1,5,458,[5,458],0,0,0,202,-1,0,1,1,0,0,1,1,1,1,1,1,15,24190,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804278,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804280,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804282,"data":[1,5,458,[5,458],0,0,0,203,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804284,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804286,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804288,"data":[1,5,458,[5,458],1,0,0,200,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Cinamon",0,1,0,3]},{"id":-804762,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62304,"data":[1,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62306,"enabled":1,"class":17,"data":[0,0,18,-804778,18,-804784,18,-804772,19,-804790,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24302,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804764,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804766,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804768,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804770,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804772,"data":[1,5,458,[5,458],0,0,0,201,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804774,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804776,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804778,"data":[1,5,458,[5,458],0,0,0,202,-1,0,1,1,0,0,1,1,1,1,1,1,15,24300,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804780,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804782,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804784,"data":[1,5,458,[5,458],0,0,0,203,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804786,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804788,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804790,"data":[1,5,458,[5,458],1,0,0,200,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Honey",0,1,0,3]},{"id":-804178,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":61968,"data":[2,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62316,"enabled":1,"class":17,"data":[0,0,18,-804194,18,-804200,18,-804188,19,-804206,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24256,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804180,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804182,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804184,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804186,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804188,"data":[1,5,458,[5,458],0,0,0,201,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804190,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804192,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804194,"data":[1,5,458,[5,458],0,0,0,202,-1,0,1,1,0,0,1,1,1,1,1,1,15,24254,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804196,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804198,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804200,"data":[1,5,458,[5,458],0,0,0,203,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804202,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804204,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804206,"data":[1,5,458,[5,458],1,0,0,200,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Beacon",0,1,0,3]},{"id":-805138,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62436,"data":[3,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62438,"enabled":1,"class":17,"data":[0,0,18,-805154,18,-805160,18,-805148,19,-805166,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24198,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-805140,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-805142,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-805144,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805146,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805148,"data":[1,5,458,[5,458],0,0,0,201,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-805150,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805152,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-805154,"data":[1,5,458,[5,458],0,0,0,202,-1,0,1,1,0,0,1,1,1,1,1,1,15,24268,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-805156,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805158,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-805160,"data":[1,5,458,[5,458],0,0,0,203,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-805162,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-805164,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-805166,"data":[1,5,458,[5,458],1,0,0,200,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Salmon",0,1,0,3]}],"data":["Line - 1",0,1,0,0]}],"data":["Layer - 2",0,1,0,0]},{"id":62008,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62010,"data":[0,-0.13100004196167,300,1,1,1,0,0,0,1]},{"type":8,"id":62012,"enabled":1,"class":53,"data":[0,[17,61974,17,62378]]}],"children":[{"id":62060,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62062,"data":[3.5,-0.585999965667725,0,1,1,1,0,0,0,1]}],"children":[{"id":-804208,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":61972,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":8,"id":61974,"enabled":1,"class":17,"data":[0,0,18,-804224,18,-804230,18,-804218,19,-804236,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,1,10,24196,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804210,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804212,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804214,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804216,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804218,"data":[1,5,458,[5,458],0,0,0,301,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804220,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804222,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804224,"data":[1,5,458,[5,458],0,0,0,302,-1,0,1,1,0,0,1,1,1,1,1,1,15,24190,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804226,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804228,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804230,"data":[1,5,458,[5,458],0,0,0,303,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804232,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804234,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804236,"data":[1,5,458,[5,458],1,0,0,300,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Cinamon",0,1,0,3]},{"id":-804852,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":62346,"data":[1,0,0,1,1,1,0,0,0,1]},{"type":8,"id":62378,"enabled":1,"class":17,"data":[0,0,18,-804868,18,-804874,18,-804862,19,-804880,1,1,1,20,1.5,0.300000011920929,1,0,0,0.300000011920929,0.200000002980232,0,10,24198,[0,0.0799999982118607,0.699999988079071,0.800000011920929],0,0,0,0,[]]},{"type":20,"id":-804854,"data":[0,0,0.699999988079071,0.800000011920929,0,1,1,0,1,0,0.0799999982118607,null,null]},{"type":21,"id":-804856,"data":[1,null,null,1,0,1,0,0,0,1,1,0]}],"children":[{"id":-804858,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804860,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804862,"data":[1,5,458,[5,458],0,0,0,301,-1,0,1,1,0,0,1,1,1,1,1,1,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Background",0,1,0,3]},{"id":-804864,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804866,"data":[0,0.100000001490116,0,0.899999976158142,0.899999976158142,0,0,0,0,1]},{"type":18,"id":-804868,"data":[1,5,458,[5,458],0,0,0,302,-1,0,1,1,0,0,1,1,1,1,1,1,15,24268,0,0,0,1.13777780532837,1.13777780532837,0,0.5,0,0]}],"children":[],"data":["Icon",0,1,0,3]},{"id":-804870,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804872,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":18,"id":-804874,"data":[1,5,458,[5,458],0,0,0,303,-1,0,1,1,0,0,1,1,0,0,0,0.294117659330368,15,24388,0,0,0,1,1,0,0.5,0,0]}],"children":[],"data":["Dark",0,0,0,3]},{"id":-804876,"path":"DECK","assetBundleId":0,"components":[{"type":1,"id":-804878,"data":[0,0,0,1,1,1,0,0,0,1]},{"type":19,"id":-804880,"data":[1,5,458,[5,458],1,0,0,300,-1,0,1,1,0,0,0,0,[],0,0.25,0.200000002980232,0,0.200000002980232,0,1,0,5,0.100000001490116,[[0,1,1,1,1,1,1,1,1,1],[0.02470436,0,0.1964752,1,0.601175,0.9162334,0.9988251,0.01568628],0],1,1,1,0,1,1,1,0.0156862754374743,0,0,1,[0,1,0,0,0,0,0,1,0,0,0,0,0,0]]}],"children":[],"data":["Trail",0,1,0,3]}],"data":["Tile - Salmon",0,1,0,3]}],"data":["Line - 1",0,1,0,0]}],"data":["Layer - 3",0,1,0,0]}],"data":["DECK",0,1,0,0]},{"id":62034,"path":"__________________________________________  ","assetBundleId":0,"components":[{"type":1,"id":62036,"data":[0,0,-10,1,1,1,0,0,0,1]}],"children":[],"data":["__________________________________________  ",0,1,0,0]}],"render_settings":{"data":[1,1,3,0.211999997496605,0.226999998092651,0.25900000333786,1,0.211999997496605,0.226999998092651,0.25900000333786,1,0.0469999983906746,0.0430000014603138,0.0350000001490116,1,0.114000000059605,0.125,0.133000001311302,1,0.5,0.5,0.5,1,300,0,0.00999999977648258,0,null,null,3,[],[[2068,0],[2068,0],[2068,0],[2068,0],[2068,0],[2068,0]],1,2,1,[0.03696759,0,0,0,0,0,0,0,0,0.04214946,0,0,0,0,0,0,0,0,0.05455384,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],0,null,null,null,null,0,128,0,0,0,0,1]},"shaders":[50,34,28,66,70,176,408,30,410,420,426,424,412,414,418,428,430,422,432,416]}],"scriptable-objects":[{"id":24196,"path":"Assets/Tiles/Cinamon.asset","name":"Cinamon","assetBundleId":-1,"class":10,"data":[15,24190]},{"id":24198,"path":"Assets/Tiles/Salmon.asset","name":"Salmon","assetBundleId":-1,"class":10,"data":[15,24268]},{"id":24202,"path":"Assets/Tiles/Eggs.asset","name":"Eggs","assetBundleId":-1,"class":10,"data":[15,24294]},{"id":24200,"path":"Assets/Tiles/Bread.asset","name":"Bread","assetBundleId":-1,"class":10,"data":[15,24210]},{"id":24222,"path":"Assets/Tiles/Spinach.asset","name":"Spinach","assetBundleId":-1,"class":10,"data":[15,24220]},{"id":24236,"path":"Assets/Tiles/Apples.asset","name":"Apples","assetBundleId":-1,"class":10,"data":[15,24234]},{"id":24224,"path":"Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF.asset","name":"LiberationSans SDF","assetBundleId":-1,"class":16,"data":[231247347,5,24226,198912371,null,null,0,0,0.75,7,35,10,"1.1.0","e3265ab4bf004d28a9537516768c1c75",null,null,null,null,0,[0,"Liberation Sans","Regular",86,1,0,98.8916015625,77.853515625,59,45,0,-18.224609375,77.853515625,0.5,-18.224609375,0.5,-12.26171875,6.298828125,18,6.298828125,24],[[3,[0,0,0,0,24],[0,0,0,0],1,0,0],[4,[9,59,9,59,28],[555,816,9,59],1,0,0],[5,[25,19,3,59,31],[775,922,25,19],1,0,0],[6,[48,59,0,59,48],[471,170,48,59],1,0,0],[7,[47,70,0,64,48],[161,212,47,70],1,0,0],[8,[70,61,3,60,76],[409,10,70,61],1,0,0],[9,[53,61,3,60,57],[437,90,53,61],1,0,0],[10,[8,19,4,59,16],[975,961,8,19],1,0,0],[11,[24,80,5,62,29],[146,673,24,80],1,0,0],[12,[24,80,0,62,29],[189,671,24,80],1,0,0],[13,[31,30,1,59,33],[495,984,31,30],1,0,0],[14,[42,43,4,50,50],[972,330,42,43],1,0,0],[15,[10,20,7,9,24],[583,992,10,20],1,0,0],[16,[23,7,3,26,29],[399,925,23,7],1,0,0],[17,[10,9,7,9,24],[657,958,10,9],1,0,0],[18,[24,63,0,62,24],[695,409,24,63],1,0,0],[19,[42,61,3,60,48],[532,249,42,61],1,0,0],[20,[38,59,6,59,48],[915,501,38,59],1,0,0],[21,[40,60,4,60,48],[596,329,40,60],1,0,0],[22,[42,61,3,60,48],[417,503,42,61],1,0,0],[23,[45,59,1,59,48],[725,252,45,59],1,0,0],[24,[42,60,3,59,48],[724,330,42,60],1,0,0],[25,[41,61,4,60,48],[912,262,41,61],1,0,0],[26,[40,59,4,59,48],[438,830,40,59],1,0,0],[27,[42,61,3,60,48],[733,648,42,61],1,0,0],[28,[40,61,4,60,48],[856,484,40,61],1,0,0],[29,[10,45,7,45,24],[897,819,10,45],1,0,0],[30,[10,57,7,45,24],[429,287,10,57],1,0,0],[31,[42,43,4,50,50],[846,341,42,43],1,0,0],[32,[42,29,4,42,50],[227,281,42,29],1,0,0],[33,[42,43,4,50,50],[972,392,42,43],1,0,0],[34,[42,60,3,60,48],[733,728,42,60],1,0,0],[35,[74,74,6,62,87],[10,10,74,74],1,0,0],[36,[57,59,0,59,57],[828,103,57,59],1,0,0],[37,[46,59,7,59,57],[542,486,46,59],1,0,0],[38,[55,61,4,60,62],[509,88,55,61],1,0,0],[39,[51,59,7,59,62],[655,252,51,59],1,0,0],[40,[47,59,7,59,57],[629,409,47,59],1,0,0],[41,[43,59,7,59,53],[789,259,43,59],1,0,0],[42,[57,61,4,60,67],[904,103,57,61],1,0,0],[43,[48,59,7,59,62],[495,407,48,59],1,0,0],[44,[9,59,7,59,24],[552,919,9,59],1,0,0],[45,[36,60,1,59,43],[797,569,36,60],1,0,0],[46,[50,59,7,59,57],[458,326,50,59],1,0,0],[47,[39,59,7,59,48],[497,816,39,59],1,0,0],[48,[59,59,6,59,71],[97,955,59,59],1,0,0],[49,[48,59,7,59,62],[562,408,48,59],1,0,0],[50,[59,61,4,60,67],[583,89,59,61],1,0,0],[51,[46,59,7,59,57],[669,491,46,59],1,0,0],[52,[59,76,4,60,67],[10,103,59,76],1,0,0],[53,[52,59,7,59,62],[461,248,52,59],1,0,0],[54,[51,61,3,60,57],[288,273,51,61],1,0,0],[55,[50,59,1,59,52],[527,329,50,59],1,0,0],[56,[50,60,6,59,62],[655,330,50,60],1,0,0],[57,[57,59,0,59,57],[273,195,57,59],1,0,0],[58,[85,59,0,59,85],[103,10,85,59],1,0,0],[59,[56,59,1,59,58],[175,955,56,59],1,0,0],[60,[54,59,1,59,56],[582,169,54,59],1,0,0],[61,[49,59,2,59,53],[427,404,49,59],1,0,0],[62,[18,80,6,62,24],[232,671,18,80],1,0,0],[63,[24,63,0,62,24],[375,951,24,63],1,0,0],[64,[18,80,0,62,24],[223,393,18,80],1,0,0],[65,[38,31,0,59,38],[630,870,38,31],1,0,0],[66,[51,6,-2,-12,48],[497,894,51,6],1,0,0],[67,[19,13,4,63,29],[456,997,19,13],1,0,0],[68,[45,47,3,46,48],[669,648,45,47],1,0,0],[69,[40,63,5,62,48],[738,409,40,63],1,0,0],[70,[38,47,3,46,43],[908,579,38,47],1,0,0],[71,[40,63,3,62,48],[797,403,40,63],1,0,0],[72,[42,47,3,46,48],[785,337,42,47],1,0,0],[73,[25,62,1,62,25],[538,168,25,62],1,0,0],[74,[40,64,3,46,48],[86,872,40,64],1,0,0],[75,[38,62,5,62,48],[430,666,38,62],1,0,0],[76,[9,62,5,62,19],[852,567,9,62],1,0,0],[77,[17,80,-3,62,20],[145,773,17,80],1,0,0],[78,[40,62,5,62,44],[856,403,40,62],1,0,0],[79,[9,62,5,62,19],[880,564,9,62],1,0,0],[80,[64,46,5,46,74],[378,222,64,46],1,0,0],[81,[38,46,5,46,48],[630,805,38,46],1,0,0],[82,[42,47,3,46,48],[972,264,42,47],1,0,0],[83,[40,64,5,46,48],[145,872,40,64],1,0,0],[84,[40,64,3,46,48],[329,666,40,64],1,0,0],[85,[23,46,5,46,29],[926,816,23,46],1,0,0],[86,[38,47,2,46,43],[956,740,38,47],1,0,0],[87,[23,56,1,55,24],[388,672,23,56],1,0,0],[88,[38,46,5,45,48],[495,919,38,46],1,0,0],[89,[43,45,0,45,43],[226,329,43,45],1,0,0],[90,[63,45,-1,45,61],[655,188,63,45],1,0,0],[91,[43,45,0,45,43],[737,188,43,45],1,0,0],[92,[41,63,0,45,41],[609,640,41,63],1,0,0],[93,[35,45,3,45,42],[968,806,35,45],1,0,0],[94,[27,80,1,62,29],[164,113,27,80],1,0,0],[95,[8,80,7,62,22],[181,772,8,80],1,0,0],[96,[27,80,1,62,29],[227,182,27,80],1,0,0],[97,[44,11,3,34,50],[333,832,44,11],1,0,0],[98,[0,0,0,0,24],[0,0,0,0],1,0,0],[99,[10,59,9,45,28],[349,195,10,59],1,0,0],[100,[38,60,5,59,48],[915,422,38,60],1,0,0],[101,[45,60,2,60,48],[669,569,45,60],1,0,0],[102,[40,40,4,48,48],[733,807,40,40],1,0,0],[103,[50,59,-1,59,48],[358,357,50,59],1,0,0],[104,[8,80,7,62,22],[306,766,8,80],1,0,0],[105,[40,69,4,62,48],[223,492,40,69],1,0,0],[106,[25,8,1,59,29],[931,961,25,8],1,0,0],[107,[61,61,1,60,63],[277,90,61,61],1,0,0],[108,[32,33,1,60,32],[784,870,32,33],1,0,0],[109,[42,34,3,39,48],[972,454,42,34],1,0,0],[110,[42,24,4,32,50],[972,560,42,24],1,0,0],[111,[23,7,3,26,29],[583,890,23,7],1,0,0],[112,[61,61,1,60,63],[357,90,61,61],1,0,0],[113,[50,4,-1,65,48],[862,961,50,4],1,0,0],[114,[24,24,5,60,34],[687,906,24,24],1,0,0],[115,[43,52,2,52,47],[607,487,43,52],1,0,0],[116,[27,36,1,60,29],[792,815,27,36],1,0,0],[117,[27,37,1,60,29],[687,796,27,37],1,0,0],[118,[19,13,3,63,29],[545,997,19,13],1,0,0],[119,[43,63,5,45,50],[593,247,43,63],1,0,0],[120,[40,70,3,59,46],[208,770,40,70],1,0,0],[121,[10,10,9,28,29],[996,932,10,10],1,0,0],[122,[16,18,5,0,29],[622,958,16,18],1,0,0],[123,[24,35,3,59,29],[687,852,24,35],1,0,0],[124,[29,33,1,60,31],[835,877,29,33],1,0,0],[125,[42,34,3,39,48],[972,507,42,34],1,0,0],[126,[67,59,2,59,72],[498,10,67,59],1,0,0],[127,[68,59,2,59,72],[10,955,68,59],1,0,0],[128,[66,60,3,60,72],[584,10,66,60],1,0,0],[129,[43,60,5,45,53],[903,183,43,60],1,0,0],[130,[57,74,0,74,57],[829,10,57,74],1,0,0],[131,[57,74,0,74,57],[905,10,57,74],1,0,0],[132,[57,75,0,75,57],[10,673,57,75],1,0,0],[133,[57,75,0,75,57],[10,767,57,75],1,0,0],[134,[57,72,0,72,57],[88,113,57,72],1,0,0],[135,[57,75,0,75,57],[10,861,57,75],1,0,0],[136,[82,59,1,59,86],[207,10,82,59],1,0,0],[137,[55,78,4,60,62],[10,576,55,78],1,0,0],[138,[47,74,7,74,57],[84,580,47,74],1,0,0],[139,[47,74,7,74,57],[157,487,47,74],1,0,0],[140,[47,75,7,75,57],[157,393,47,75],1,0,0],[141,[47,72,7,72,57],[150,580,47,72],1,0,0],[142,[19,74,0,74,24],[227,859,19,74],1,0,0],[143,[19,74,5,74,24],[265,859,19,74],1,0,0],[144,[28,75,-2,75,24],[981,10,28,75],1,0,0],[145,[25,72,0,72,24],[216,580,25,72],1,0,0],[146,[58,59,0,59,62],[751,102,58,59],1,0,0],[147,[48,75,7,75,62],[210,88,48,75],1,0,0],[148,[59,75,4,74,67],[10,388,59,75],1,0,0],[149,[59,75,4,74,67],[10,482,59,75],1,0,0],[150,[59,76,4,75,67],[10,198,59,76],1,0,0],[151,[59,76,4,75,67],[10,293,59,76],1,0,0],[152,[59,73,4,72,67],[751,10,59,73],1,0,0],[153,[40,39,5,48,50],[838,819,40,39],1,0,0],[154,[63,65,2,62,67],[669,10,63,65],1,0,0],[155,[50,75,6,74,62],[88,392,50,75],1,0,0],[156,[50,75,6,74,62],[88,486,50,75],1,0,0],[157,[50,76,6,75,62],[88,297,50,76],1,0,0],[158,[50,73,6,72,62],[157,301,50,73],1,0,0],[159,[54,74,1,74,56],[88,204,54,74],1,0,0],[160,[46,59,7,59,57],[734,491,46,59],1,0,0],[161,[44,63,6,62,53],[545,564,44,63],1,0,0],[162,[45,64,3,63,48],[324,583,45,64],1,0,0],[163,[45,64,3,63,48],[333,749,45,64],1,0,0],[164,[45,63,3,62,48],[478,485,45,63],1,0,0],[165,[45,62,3,61,48],[250,952,45,62],1,0,0],[166,[45,60,3,59,48],[733,569,45,60],1,0,0],[167,[45,71,3,70,48],[260,580,45,71],1,0,0],[168,[71,47,2,46,76],[661,94,71,47],1,0,0],[169,[38,64,3,46,43],[427,583,38,64],1,0,0],[170,[42,64,3,63,48],[436,747,42,64],1,0,0],[171,[42,64,3,63,48],[484,567,42,64],1,0,0],[172,[42,63,3,62,48],[608,558,42,63],1,0,0],[173,[42,60,3,59,48],[851,262,42,60],1,0,0],[174,[19,63,0,63,24],[838,737,19,63],1,0,0],[175,[19,63,6,63,24],[418,951,19,63],1,0,0],[176,[29,62,-2,62,24],[980,104,29,62],1,0,0],[177,[25,59,0,59,24],[794,737,25,59],1,0,0],[178,[42,64,3,63,48],[487,650,42,64],1,0,0],[179,[38,61,5,61,48],[915,342,38,61],1,0,0],[180,[42,64,3,63,48],[548,646,42,64],1,0,0],[181,[42,64,3,63,48],[497,733,42,64],1,0,0],[182,[42,63,3,62,48],[672,714,42,63],1,0,0],[183,[42,62,3,61,48],[314,952,42,62],1,0,0],[184,[42,60,3,59,48],[972,185,42,60],1,0,0],[185,[43,39,2,48,47],[965,603,43,39],1,0,0],[186,[50,49,1,47,53],[357,435,50,49],1,0,0],[187,[38,64,5,63,48],[558,729,38,64],1,0,0],[188,[38,64,5,63,48],[615,722,38,64],1,0,0],[189,[38,63,5,62,48],[799,485,38,63],1,0,0],[190,[38,60,5,59,48],[956,661,38,60],1,0,0],[191,[41,81,0,63,41],[86,673,41,81],1,0,0],[192,[40,80,5,62,48],[86,773,40,80],1,0,0],[193,[41,77,0,59,41],[269,670,41,77],1,0,0],[1997,[0,0,0,0,43],[0,0,0,0],1,0,0],[1998,[0,0,0,0,86],[0,0,0,0],1,0,0],[1999,[0,0,0,0,43],[0,0,0,0],1,0,0],[2000,[0,0,0,0,86],[0,0,0,0],1,0,0],[2001,[0,0,0,0,29],[0,0,0,0],1,0,0],[2002,[0,0,0,0,22],[0,0,0,0],1,0,0],[2003,[0,0,0,0,14],[0,0,0,0],1,0,0],[2004,[0,0,0,0,48],[0,0,0,0],1,0,0],[2005,[0,0,0,0,24],[0,0,0,0],1,0,0],[2006,[0,0,0,0,17],[0,0,0,0],1,0,0],[2007,[0,0,0,0,7],[0,0,0,0],1,0,0],[2008,[0,0,0,0,0],[0,0,0,0],1,0,0],[2009,[4,65,-2,54,0],[204,871,4,65],1,0,0],[2010,[20,70,-10,59,0],[267,770,20,70],1,0,0],[2011,[21,70,-2,59,0],[260,393,21,70],1,0,0],[2012,[21,70,-19,59,0],[282,482,21,70],1,0,0],[2013,[48,6,0,25,48],[862,936,48,6],1,0,0],[2014,[48,6,0,25,48],[929,936,48,6],1,0,0],[2015,[86,6,0,25,86],[103,88,86,6],1,0,0],[2016,[86,6,0,25,86],[277,170,86,6],1,0,0],[2017,[22,62,7,62,36],[862,181,22,62],1,0,0],[2018,[51,15,-2,-4,48],[288,353,51,15],1,0,0],[2019,[9,19,5,59,19],[612,995,9,19],1,0,0],[2020,[9,19,5,59,19],[640,995,9,19],1,0,0],[2021,[9,19,5,8,19],[1002,961,9,19],1,0,0],[2022,[9,19,5,59,19],[686,949,9,19],1,0,0],[2023,[23,19,3,59,29],[967,894,23,19],1,0,0],[2024,[23,19,3,59,29],[580,916,23,19],1,0,0],[2025,[23,19,3,8,29],[580,954,23,19],1,0,0],[2026,[22,19,3,59,29],[622,920,22,19],1,0,0],[2027,[38,68,5,62,48],[303,865,38,68],1,0,0],[2028,[38,68,5,62,48],[300,387,38,68],1,0,0],[2029,[24,23,3,40,30],[819,929,24,23],1,0,0],[2030,[64,9,11,9,86],[661,160,64,9],1,0,0],[2031,[21,63,-2,52,0],[876,737,21,63],1,0,0],[2032,[21,63,-19,52,0],[916,734,21,63],1,0,0],[2033,[20,70,-10,59,0],[388,583,20,70],1,0,0],[2034,[20,70,-10,59,0],[397,747,20,70],1,0,0],[2035,[20,70,-10,59,0],[360,862,20,70],1,0,0],[2036,[0,0,0,0,17],[0,0,0,0],1,0,0],[2037,[82,61,2,60,86],[308,10,82,61],1,0,0],[2038,[12,22,3,59,16],[427,363,12,22],1,0,0],[2039,[26,22,3,59,30],[730,907,26,22],1,0,0],[2040,[35,22,-4,59,30],[730,866,35,22],1,0,0],[2041,[23,34,3,39,29],[883,883,23,34],1,0,0],[2042,[23,34,3,39,29],[925,883,23,34],1,0,0],[2043,[28,59,9,59,43],[583,812,28,59],1,0,0],[2044,[35,5,-3,68,29],[968,870,35,5],1,0,0],[2045,[44,59,-18,59,14],[799,181,44,59],1,0,0],[2046,[10,62,7,62,24],[322,474,10,62],1,0,0],[2047,[20,70,-10,59,0],[399,836,20,70],1,0,0],[2048,[20,70,-10,59,0],[794,648,20,70],1,0,0],[2049,[22,70,-11,59,0],[833,648,22,70],1,0,0],[2050,[22,70,-11,59,0],[874,648,22,70],1,0,0],[2051,[22,70,-11,59,0],[915,645,22,70],1,0,0],[2052,[20,70,-10,59,0],[456,908,20,70],1,0,0],[2075,[47,61,0,60,48],[351,503,47,61],1,0,0],[2090,[70,33,7,59,86],[382,170,70,33],1,0,0],[2179,[52,51,0,51,52],[358,287,52,51],1,0,0]],[[1,32,3,1],[1,33,4,1],[1,34,5,1],[1,35,6,1],[1,36,7,1],[1,37,8,1],[1,38,9,1],[1,39,10,1],[1,40,11,1],[1,41,12,1],[1,42,13,1],[1,43,14,1],[1,44,15,1],[1,45,16,1],[1,46,17,1],[1,47,18,1],[1,48,19,1],[1,49,20,1],[1,50,21,1],[1,51,22,1],[1,52,23,1],[1,53,24,1],[1,54,25,1],[1,55,26,1],[1,56,27,1],[1,57,28,1],[1,58,29,1],[1,59,30,1],[1,60,31,1],[1,61,32,1],[1,62,33,1],[1,63,34,1],[1,64,35,1],[1,65,36,1],[1,66,37,1],[1,67,38,1],[1,68,39,1],[1,69,40,1],[1,70,41,1],[1,71,42,1],[1,72,43,1],[1,73,44,1],[1,74,45,1],[1,75,46,1],[1,76,47,1],[1,77,48,1],[1,78,49,1],[1,79,50,1],[1,80,51,1],[1,81,52,1],[1,82,53,1],[1,83,54,1],[1,84,55,1],[1,85,56,1],[1,86,57,1],[1,87,58,1],[1,88,59,1],[1,89,60,1],[1,90,61,1],[1,91,62,1],[1,92,63,1],[1,93,64,1],[1,94,65,1],[1,95,66,1],[1,96,67,1],[1,97,68,1],[1,98,69,1],[1,99,70,1],[1,100,71,1],[1,101,72,1],[1,102,73,1],[1,103,74,1],[1,104,75,1],[1,105,76,1],[1,106,77,1],[1,107,78,1],[1,108,79,1],[1,109,80,1],[1,110,81,1],[1,111,82,1],[1,112,83,1],[1,113,84,1],[1,114,85,1],[1,115,86,1],[1,116,87,1],[1,117,88,1],[1,118,89,1],[1,119,90,1],[1,120,91,1],[1,121,92,1],[1,122,93,1],[1,123,94,1],[1,124,95,1],[1,125,96,1],[1,126,97,1],[1,160,98,1],[1,161,99,1],[1,162,100,1],[1,163,101,1],[1,164,102,1],[1,165,103,1],[1,166,104,1],[1,167,105,1],[1,168,106,1],[1,169,107,1],[1,170,108,1],[1,171,109,1],[1,172,110,1],[1,173,111,1],[1,174,112,1],[1,175,113,1],[1,176,114,1],[1,177,115,1],[1,178,116,1],[1,179,117,1],[1,180,118,1],[1,181,119,1],[1,182,120,1],[1,183,121,1],[1,184,122,1],[1,185,123,1],[1,186,124,1],[1,187,125,1],[1,188,126,1],[1,189,127,1],[1,190,128,1],[1,191,129,1],[1,192,130,1],[1,193,131,1],[1,194,132,1],[1,195,133,1],[1,196,134,1],[1,197,135,1],[1,198,136,1],[1,199,137,1],[1,200,138,1],[1,201,139,1],[1,202,140,1],[1,203,141,1],[1,204,142,1],[1,205,143,1],[1,206,144,1],[1,207,145,1],[1,208,146,1],[1,209,147,1],[1,210,148,1],[1,211,149,1],[1,212,150,1],[1,213,151,1],[1,214,152,1],[1,215,153,1],[1,216,154,1],[1,217,155,1],[1,218,156,1],[1,219,157,1],[1,220,158,1],[1,221,159,1],[1,222,160,1],[1,223,161,1],[1,224,162,1],[1,225,163,1],[1,226,164,1],[1,227,165,1],[1,228,166,1],[1,229,167,1],[1,230,168,1],[1,231,169,1],[1,232,170,1],[1,233,171,1],[1,234,172,1],[1,235,173,1],[1,236,174,1],[1,237,175,1],[1,238,176,1],[1,239,177,1],[1,240,178,1],[1,241,179,1],[1,242,180,1],[1,243,181,1],[1,244,182,1],[1,245,183,1],[1,246,184,1],[1,247,185,1],[1,248,186,1],[1,249,187,1],[1,250,188,1],[1,251,189,1],[1,252,190,1],[1,253,191,1],[1,254,192,1],[1,255,193,1],[1,8192,1997,1],[1,8193,1998,1],[1,8194,1999,1],[1,8195,2000,1],[1,8196,2001,1],[1,8197,2002,1],[1,8198,2003,1],[1,8199,2004,1],[1,8200,2005,1],[1,8201,2006,1],[1,8202,2007,1],[1,8203,2008,1],[1,8204,2009,1],[1,8205,2010,1],[1,8206,2011,1],[1,8207,2012,1],[1,8210,2013,1],[1,8211,2014,1],[1,8212,2015,1],[1,8213,2016,1],[1,8214,2017,1],[1,8215,2018,1],[1,8216,2019,1],[1,8217,2020,1],[1,8218,2021,1],[1,8219,2022,1],[1,8220,2023,1],[1,8221,2024,1],[1,8222,2025,1],[1,8223,2026,1],[1,8224,2027,1],[1,8225,2028,1],[1,8226,2029,1],[1,8230,2030,1],[1,8234,2031,1],[1,8235,2032,1],[1,8236,2033,1],[1,8237,2034,1],[1,8238,2035,1],[1,8239,2036,1],[1,8240,2037,1],[1,8242,2038,1],[1,8243,2039,1],[1,8244,2040,1],[1,8249,2041,1],[1,8250,2042,1],[1,8252,2043,1],[1,8254,2044,1],[1,8260,2045,1],[1,8286,2046,1],[1,8298,2047,1],[1,8299,2048,1],[1,8300,2049,1],[1,8301,2050,1],[1,8302,2051,1],[1,8303,2052,1],[1,8364,2075,1],[1,8482,2090,1],[1,9633,2179,1]],[6,24308],0,0,0,[[0,0,93,93],[93,0,104,78],[197,0,101,78],[298,0,101,80],[0,93,78,95],[0,188,78,95],[0,283,78,95],[0,378,78,94],[0,472,78,94],[0,566,74,97],[399,0,89,80],[0,663,76,94],[0,757,76,94],[0,851,76,94],[0,945,87,78],[488,0,86,78],[574,0,85,79],[659,0,82,84],[741,0,78,92],[819,0,76,93],[895,0,76,93],[971,0,47,94],[93,78,105,25],[78,103,76,91],[78,194,73,93],[78,287,69,95],[78,382,69,94],[78,476,69,94],[74,570,66,93],[76,663,60,100],[76,763,59,99],[76,862,59,83],[87,945,78,78],[154,103,46,99],[200,78,67,94],[151,202,66,89],[147,291,69,92],[147,383,66,94],[147,477,66,93],[140,570,66,91],[267,80,80,80],[347,80,80,80],[427,80,72,80],[499,78,74,80],[573,79,78,80],[651,84,90,66],[741,92,77,78],[818,93,76,78],[894,93,76,80],[970,94,48,81],[267,160,105,25],[217,172,46,99],[263,185,76,78],[372,160,89,52],[339,185,29,78],[368,212,83,65],[136,663,43,99],[179,661,43,99],[206,570,44,91],[222,661,37,99],[213,383,37,99],[213,482,59,88],[250,570,64,90],[259,660,60,96],[135,763,36,99],[135,862,59,83],[165,945,75,78],[171,762,27,99],[198,760,59,89],[194,861,23,84],[217,849,38,93],[240,942,64,81],[255,849,38,93],[257,760,39,89],[296,756,27,99],[293,855,57,87],[304,942,61,81],[651,150,83,28],[461,160,67,78],[528,158,44,81],[572,159,73,78],[645,178,82,64],[451,238,71,78],[522,239,61,80],[583,237,62,82],[645,242,70,78],[216,319,62,64],[217,271,61,48],[278,263,70,80],[250,383,40,89],[348,277,71,70],[278,343,70,34],[290,377,57,87],[419,277,29,76],[448,316,69,78],[517,319,69,78],[586,319,59,79],[645,320,69,79],[348,347,69,78],[417,353,31,41],[347,425,69,68],[417,394,68,78],[485,397,67,78],[552,398,67,78],[619,399,66,78],[685,399,43,82],[272,472,40,89],[312,464,29,81],[341,493,66,80],[314,573,64,83],[319,656,59,83],[323,739,64,83],[378,573,39,89],[378,662,42,75],[387,737,39,89],[407,493,61,80],[417,573,57,83],[420,656,57,81],[426,737,61,83],[468,475,64,82],[474,557,61,83],[477,640,61,83],[532,476,65,78],[535,554,63,82],[538,636,61,83],[487,723,61,83],[548,719,57,83],[597,477,62,71],[598,548,61,82],[599,630,60,82],[605,712,57,83],[659,481,65,78],[659,559,64,79],[659,638,64,66],[662,704,61,82],[714,320,61,79],[715,242,64,78],[728,399,59,82],[724,481,65,78],[723,559,64,79],[723,638,61,80],[723,718,61,79],[727,178,62,64],[789,171,63,78],[779,249,62,78],[775,327,61,66],[787,393,59,82],[789,475,57,82],[852,171,41,81],[893,173,62,79],[841,252,61,79],[902,252,60,80],[962,175,61,79],[962,254,61,66],[962,320,61,62],[836,331,61,62],[846,393,59,81],[846,474,59,80],[905,332,57,80],[962,382,61,62],[905,412,57,79],[962,444,61,53],[905,491,57,78],[962,497,61,53],[962,550,61,43],[323,822,63,30],[350,852,39,89],[365,941,43,82],[389,826,39,89],[428,820,59,78],[487,806,58,78],[784,638,39,89],[787,559,55,79],[784,727,44,78],[823,638,41,89],[828,727,38,82],[842,557,28,81],[870,554,28,81],[898,569,57,66],[955,593,62,58],[864,638,41,89],[905,635,41,89],[946,651,57,79],[866,727,40,82],[906,724,40,82],[946,730,57,66],[389,915,42,26],[408,941,38,82],[446,898,39,89],[545,806,28,78],[573,802,47,78],[620,795,57,65],[677,786,46,56],[723,797,59,59],[782,805,46,55],[828,809,59,58],[487,884,70,25],[485,909,57,65],[485,974,50,49],[542,909,28,78],[887,809,29,64],[916,806,42,65],[958,796,54,64],[620,860,57,50],[677,842,43,54],[720,856,54,41],[774,860,51,52],[825,867,48,52],[873,873,42,53],[446,987,38,32],[958,860,54,24],[535,987,38,32],[677,896,43,43],[720,897,45,41],[765,912,44,38],[809,919,43,42],[852,926,67,25],[852,951,69,23],[915,873,42,53],[957,884,42,38],[919,926,67,25],[921,951,44,27],[965,951,27,38],[573,880,42,26],[570,906,42,38],[570,944,42,38],[612,910,41,38],[612,948,35,37],[573,982,29,39],[602,985,28,38],[630,985,28,38],[986,922,29,29],[992,951,28,38],[647,948,29,28],[676,939,28,38]],[[78,93,15,10],[74,566,4,4],[198,78,2,25],[151,194,3,8],[147,287,4,4],[267,78,31,2],[488,78,11,2],[573,78,1,1],[651,79,8,5],[818,92,1,1],[970,93,1,1],[200,172,17,30],[263,172,4,13],[368,185,4,27],[140,661,39,2],[250,660,9,1],[136,762,35,1],[179,760,19,2],[171,861,23,1],[198,849,19,12],[217,942,23,3],[259,756,37,4],[293,849,3,6],[499,158,29,2],[572,158,1,1],[645,159,6,19],[451,212,10,26],[522,238,6,1],[572,237,11,2],[216,291,1,28],[263,263,15,8],[348,263,20,14],[278,377,12,6],[448,277,3,39],[517,316,5,3],[417,347,2,6],[347,377,1,48],[485,394,32,3],[552,397,34,1],[619,398,26,1],[250,472,22,10],[290,464,22,8],[272,561,69,9],[341,464,6,29],[312,545,29,25],[314,545,27,28],[314,656,5,4],[319,739,4,17],[378,737,9,2],[416,425,1,68],[417,656,3,6],[416,472,69,3],[416,472,52,21],[468,557,6,16],[474,640,3,16],[532,475,20,1],[532,554,3,3],[535,636,3,4],[477,723,10,14],[538,719,10,4],[597,476,22,1],[597,548,1,6],[598,630,1,6],[599,712,6,7],[659,477,26,4],[659,704,3,8],[734,150,7,28],[734,170,84,1],[734,170,55,8],[779,242,10,7],[775,320,4,7],[775,393,12,6],[787,475,2,6],[893,171,1,2],[841,249,11,3],[1018,0,5,175],[955,173,15,2],[955,173,7,79],[836,327,5,4],[897,331,5,62],[897,332,8,61],[386,822,1,30],[323,852,27,3],[350,941,15,1],[386,826,3,26],[426,820,2,6],[789,557,53,2],[846,554,24,3],[898,554,7,15],[955,569,7,24],[870,635,35,3],[946,635,9,16],[905,724,1,3],[428,898,18,17],[431,898,15,43],[548,802,25,4],[605,795,15,7],[662,786,15,9],[782,797,2,8],[485,898,2,11],[906,806,10,3],[1003,651,20,145],[946,796,12,10],[720,842,3,14],[774,856,8,4],[825,860,3,7],[873,867,14,6],[446,1019,39,4],[484,987,1,36],[535,974,7,13],[765,897,9,15],[720,938,45,85],[809,912,16,7],[852,919,21,7],[916,871,42,2],[957,871,1,13],[557,884,16,22],[557,884,13,25],[615,880,5,30],[612,906,8,4],[535,1019,38,4],[570,982,3,5],[535,1021,67,2],[602,982,10,3],[647,978,318,7],[658,978,307,45],[658,989,365,34],[1012,651,11,271],[999,884,24,38],[957,922,29,4],[1017,593,6,358],[1020,593,3,430],[1015,651,8,300],[653,910,24,29],[653,910,23,38],[704,939,61,84],[704,950,105,73],[704,961,148,62],[647,977,274,8],[647,976,29,9],[658,977,263,46],[658,976,18,47],[704,974,217,49]],["Liberation Sans",86,1,250,98.90625,0,77.84375,59.1875,-18.21875,0,77.84375,-12.26171875,0.5,-12.26171875,6.298828125,23.6749992370605,0,239.0625,9,1024,1024],1024,1024,9,4169,[],[[]],[[[[3,[0,0,-4.75,0]],[36,[0,0,0,0]],0],[[3,[0,0,-1.546875,0]],[55,[0,0,0,0]],0],[[3,[0,0,-1.546875,0]],[60,[0,0,0,0]],0],[[20,[0,0,-6.390625,0]],[20,[0,0,0,0]],0],[[36,[0,0,-4.75,0]],[3,[0,0,0,0]],0],[[36,[0,0,-6.390625,0]],[55,[0,0,0,0]],0],[[36,[0,0,-6.390625,0]],[57,[0,0,0,0]],0],[[36,[0,0,-3.1875,0]],[58,[0,0,0,0]],0],[[36,[0,0,-6.390625,0]],[60,[0,0,0,0]],0],[[36,[0,0,-1.546875,0]],[89,[0,0,0,0]],0],[[36,[0,0,-1.546875,0]],[90,[0,0,0,0]],0],[[36,[0,0,-1.546875,0]],[92,[0,0,0,0]],0],[[36,[0,0,-6.390625,0]],[2020,[0,0,0,0]],0],[[41,[0,0,-9.53125,0]],[15,[0,0,0,0]],0],[[41,[0,0,-9.53125,0]],[17,[0,0,0,0]],0],[[41,[0,0,-4.75,0]],[36,[0,0,0,0]],0],[[47,[0,0,-3.1875,0]],[3,[0,0,0,0]],0],[[47,[0,0,-6.390625,0]],[55,[0,0,0,0]],0],[[47,[0,0,-6.390625,0]],[57,[0,0,0,0]],0],[[47,[0,0,-6.390625,0]],[58,[0,0,0,0]],0],[[47,[0,0,-6.390625,0]],[60,[0,0,0,0]],0],[[47,[0,0,-3.1875,0]],[92,[0,0,0,0]],0],[[47,[0,0,-4.75,0]],[2020,[0,0,0,0]],0],[[51,[0,0,-1.546875,0]],[3,[0,0,0,0]],0],[[51,[0,0,-11.09375,0]],[15,[0,0,0,0]],0],[[51,[0,0,-11.09375,0]],[17,[0,0,0,0]],0],[[51,[0,0,-6.390625,0]],[36,[0,0,0,0]],0],[[53,[0,0,-1.546875,0]],[55,[0,0,0,0]],0],[[53,[0,0,-1.546875,0]],[57,[0,0,0,0]],0],[[53,[0,0,-1.546875,0]],[58,[0,0,0,0]],0],[[53,[0,0,-1.546875,0]],[60,[0,0,0,0]],0],[[55,[0,0,-1.546875,0]],[3,[0,0,0,0]],0],[[55,[0,0,-9.53125,0]],[15,[0,0,0,0]],0],[[55,[0,0,-4.75,0]],[16,[0,0,0,0]],0],[[55,[0,0,-9.53125,0]],[17,[0,0,0,0]],0],[[55,[0,0,-9.53125,0]],[29,[0,0,0,0]],0],[[55,[0,0,-9.53125,0]],[30,[0,0,0,0]],0],[[55,[0,0,-6.390625,0]],[36,[0,0,0,0]],0],[[55,[0,0,-1.546875,0]],[50,[0,0,0,0]],0],[[55,[0,0,-9.53125,0]],[68,[0,0,0,0]],0],[[55,[0,0,-9.53125,0]],[70,[0,0,0,0]],0],[[55,[0,0,-9.53125,0]],[72,[0,0,0,0]],0],[[55,[0,0,-3.1875,0]],[76,[0,0,0,0]],0],[[55,[0,0,-9.53125,0]],[82,[0,0,0,0]],0],[[55,[0,0,-3.1875,0]],[85,[0,0,0,0]],0],[[55,[0,0,-9.53125,0]],[86,[0,0,0,0]],0],[[55,[0,0,-3.1875,0]],[88,[0,0,0,0]],0],[[55,[0,0,-4.75,0]],[90,[0,0,0,0]],0],[[55,[0,0,-4.75,0]],[92,[0,0,0,0]],0],[[57,[0,0,-7.890625,0]],[15,[0,0,0,0]],0],[[57,[0,0,-4.75,0]],[16,[0,0,0,0]],0],[[57,[0,0,-7.890625,0]],[17,[0,0,0,0]],0],[[57,[0,0,-3.1875,0]],[29,[0,0,0,0]],0],[[57,[0,0,-3.1875,0]],[30,[0,0,0,0]],0],[[57,[0,0,-6.390625,0]],[36,[0,0,0,0]],0],[[57,[0,0,-6.390625,0]],[68,[0,0,0,0]],0],[[57,[0,0,-4.75,0]],[72,[0,0,0,0]],0],[[57,[0,0,-1.546875,0]],[76,[0,0,0,0]],0],[[57,[0,0,-4.75,0]],[82,[0,0,0,0]],0],[[57,[0,0,-3.1875,0]],[85,[0,0,0,0]],0],[[57,[0,0,-3.1875,0]],[88,[0,0,0,0]],0],[[57,[0,0,-3.1875,0]],[92,[0,0,0,0]],0],[[58,[0,0,-4.75,0]],[15,[0,0,0,0]],0],[[58,[0,0,-1.546875,0]],[16,[0,0,0,0]],0],[[58,[0,0,-4.75,0]],[17,[0,0,0,0]],0],[[58,[0,0,-1.546875,0]],[29,[0,0,0,0]],0],[[58,[0,0,-1.546875,0]],[30,[0,0,0,0]],0],[[58,[0,0,-3.1875,0]],[36,[0,0,0,0]],0],[[58,[0,0,-3.1875,0]],[68,[0,0,0,0]],0],[[58,[0,0,-1.546875,0]],[72,[0,0,0,0]],0],[[58,[0,0,-1.546875,0]],[82,[0,0,0,0]],0],[[58,[0,0,-1.546875,0]],[85,[0,0,0,0]],0],[[58,[0,0,-1.546875,0]],[88,[0,0,0,0]],0],[[58,[0,0,-0.75,0]],[92,[0,0,0,0]],0],[[60,[0,0,-1.546875,0]],[3,[0,0,0,0]],0],[[60,[0,0,-11.09375,0]],[15,[0,0,0,0]],0],[[60,[0,0,-7.890625,0]],[16,[0,0,0,0]],0],[[60,[0,0,-11.09375,0]],[17,[0,0,0,0]],0],[[60,[0,0,-4.75,0]],[29,[0,0,0,0]],0],[[60,[0,0,-5.578125,0]],[30,[0,0,0,0]],0],[[60,[0,0,-6.390625,0]],[36,[0,0,0,0]],0],[[60,[0,0,-6.390625,0]],[68,[0,0,0,0]],0],[[60,[0,0,-7.890625,0]],[72,[0,0,0,0]],0],[[60,[0,0,-3.1875,0]],[76,[0,0,0,0]],0],[[60,[0,0,-7.890625,0]],[82,[0,0,0,0]],0],[[60,[0,0,-6.390625,0]],[83,[0,0,0,0]],0],[[60,[0,0,-7.890625,0]],[84,[0,0,0,0]],0],[[60,[0,0,-4.75,0]],[88,[0,0,0,0]],0],[[60,[0,0,-4.75,0]],[89,[0,0,0,0]],0],[[73,[0,0,-1.546875,0]],[73,[0,0,0,0]],0],[[73,[0,0,1.546875,0]],[2020,[0,0,0,0]],0],[[85,[0,0,-4.75,0]],[15,[0,0,0,0]],0],[[85,[0,0,-4.75,0]],[17,[0,0,0,0]],0],[[85,[0,0,3.1875,0]],[2020,[0,0,0,0]],0],[[89,[0,0,-6.390625,0]],[15,[0,0,0,0]],0],[[89,[0,0,-6.390625,0]],[17,[0,0,0,0]],0],[[90,[0,0,-4.75,0]],[15,[0,0,0,0]],0],[[90,[0,0,-4.75,0]],[17,[0,0,0,0]],0],[[92,[0,0,-6.390625,0]],[15,[0,0,0,0]],0],[[92,[0,0,-6.390625,0]],[17,[0,0,0,0]],0],[[2019,[0,0,-1.546875,0]],[2019,[0,0,0,0]],0],[[2020,[0,0,-3.1875,0]],[3,[0,0,0,0]],0],[[2020,[0,0,-1.546875,0]],[86,[0,0,0,0]],0],[[2020,[0,0,-1.546875,0]],[2020,[0,0,0,0]],0]]],[],[],["","e3265ab4bf004d28a9537516768c1c75",0,86,9,4,1024,1024,1,"32 - 126, 160 - 255, 8192 - 8303, 8364, 8482, 9633","8f586378b4e144a9851e7b34d9b748ee","",0,0,4169,1],[[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null]],[[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null]]]},{"id":24240,"path":"Assets/Tiles/Leaves.asset","name":"Leaves","assetBundleId":-1,"class":10,"data":[15,24238]},{"id":24244,"path":"Assets/Tiles/Salt.asset","name":"Salt","assetBundleId":-1,"class":10,"data":[15,24238]},{"id":24256,"path":"Assets/Tiles/Beacon.asset","name":"Beacon","assetBundleId":-1,"class":10,"data":[15,24254]},{"id":24266,"path":"Assets/Tiles/Dill.asset","name":"Dill","assetBundleId":-1,"class":10,"data":[15,24264]},{"id":24232,"path":"Assets/Tiles/Butter.asset","name":"Butter","assetBundleId":-1,"class":10,"data":[15,24230]},{"id":24262,"path":"Assets/Tiles/Garlic.asset","name":"Garlic","assetBundleId":-1,"class":10,"data":[15,24260]},{"id":24284,"path":"Assets/Tiles/TofuChees.asset","name":"TofuChees","assetBundleId":-1,"class":10,"data":[15,24282]},{"id":24292,"path":"Assets/Tiles/OliveOil.asset","name":"OliveOil","assetBundleId":-1,"class":10,"data":[15,24290]},{"id":24280,"path":"Assets/Tiles/FetaChees.asset","name":"FetaChees","assetBundleId":-1,"class":10,"data":[15,24278]},{"id":24302,"path":"Assets/Tiles/Honey.asset","name":"Honey","assetBundleId":-1,"class":10,"data":[15,24300]},{"id":24460,"path":"Assets/TextMesh Pro/Resources/TMP Settings.asset","name":"TMP Settings","assetBundleId":-1,"class":59,"data":[1,1,0,0,1,1,1,0,0,16,24224,"Fonts & Materials/",36,0.5,2,20,5,200,50,0,0,[],1,57,24458,"Sprite Assets/",1,0,"Color Gradient Presets/",58,24464,"",60,24466,60,24468,0]},{"id":24458,"path":"Assets/TextMesh Pro/Resources/Sprite Assets/EmojiOne.asset","name":"EmojiOne","assetBundleId":-1,"class":57,"data":[-1836805472,5,24470,0,6,24472,[["Smiling face with smiling eyes",-1318250903,128522,0.5,0.5,null,null,0,0,384,128,128,0,115.599998474121,128,1],["1f60b",57188339,128523,0.5,0.5,null,null,1,128,384,128,128,0,115.599998474121,128,1],["1f60d",57188341,128525,0.5,0.5,null,null,2,256,384,128,128,0,115.599998474121,128,1],["1f60e",57188340,128526,0.5,0.5,null,null,3,384,384,128,128,0,115.599998474121,128,1],["Grinning face",-95541379,128512,0.5,0.5,null,null,4,0,256,128,128,0,115.599998474121,128,1],["1f601",57188256,128513,0.5,0.5,null,null,5,128,256,128,128,0,115.599998474121,128,1],["Face with tears of joy",239522663,128514,0.5,0.5,null,null,6,256,256,128,128,0,115.599998474121,128,1],["1f603",57188258,128515,0.5,0.5,null,null,7,384,256,128,128,0,115.599998474121,128,1],["1f604",57188261,128516,0.5,0.5,null,null,8,0,128,128,128,0,115.599998474121,128,1],["1f605",57188260,128517,0.5,0.5,null,null,9,128,128,128,128,0,115.599998474121,128,1],["1f606",57188263,128518,0.5,0.5,null,null,10,256,128,128,128,0,115.599998474121,128,1],["1f609",57188264,128521,0.5,0.5,null,null,11,384,128,128,128,0,115.599998474121,128,1],["1f618",57188168,128536,0.5,0.5,null,null,12,0,0,128,128,0,115.599998474121,128,1],["1f923",57200239,129315,0.5,0.5,null,null,13,128,0,128,128,0,115.599998474121,128,1],["263a",1748406,9786,0.5,0.5,null,null,14,256,0,128,128,0,115.599998474121,128,1],["2639",1748462,9785,0.5,0.5,null,null,15,384,0,128,128,0,115.599998474121,128,1]],[],"1.1.0",[0,"","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[["Smiling face with smiling eyes",-1318250903,2,128522,0,1],["1f60b",57188339,2,128523,1,1],["1f60d",57188341,2,128525,2,1],["1f60e",57188340,2,128526,3,1],["Grinning face",-95541379,2,128512,4,1],["1f601",57188256,2,128513,5,1],["Face with tears of joy",239522663,2,128514,6,1],["1f603",57188258,2,128515,7,1],["1f604",57188261,2,128516,8,1],["1f605",57188260,2,128517,9,1],["1f606",57188263,2,128518,10,1],["1f609",57188264,2,128521,11,1],[".notdef",-600915428,2,0,12,1],["1f923",57200239,2,129315,13,1],["263a",1748406,2,9786,14,1],["2639",1748462,2,9785,15,1]],[[null,null,0,[128,128,0,115.599998474121,128],[0,384,128,128],1,0,0],[null,null,1,[128,128,0,115.599998474121,128],[128,384,128,128],1,0,0],[null,null,2,[128,128,0,115.599998474121,128],[256,384,128,128],1,0,0],[null,null,3,[128,128,0,115.599998474121,128],[384,384,128,128],1,0,0],[null,null,4,[128,128,0,115.599998474121,128],[0,256,128,128],1,0,0],[null,null,5,[128,128,0,115.599998474121,128],[128,256,128,128],1,0,0],[null,null,6,[128,128,0,115.599998474121,128],[256,256,128,128],1,0,0],[null,null,7,[128,128,0,115.599998474121,128],[384,256,128,128],1,0,0],[null,null,8,[128,128,0,115.599998474121,128],[0,128,128,128],1,0,0],[null,null,9,[128,128,0,115.599998474121,128],[128,128,128,128],1,0,0],[null,null,10,[128,128,0,115.599998474121,128],[256,128,128,128],1,0,0],[null,null,11,[128,128,0,115.599998474121,128],[384,128,128,128],1,0,0],[null,null,12,[128,128,0,115.599998474121,128],[0,0,128,128],1,0,0],[null,null,13,[128,128,0,115.599998474121,128],[128,0,128,128],1,0,0],[null,null,14,[128,128,0,115.599998474121,128],[256,0,128,128],1,0,0],[null,null,15,[128,128,0,115.599998474121,128],[384,0,128,128],1,0,0]]]},{"id":24298,"path":"Assets/Tiles/Lemon.asset","name":"Lemon","assetBundleId":-1,"class":10,"data":[15,24296]},{"id":24464,"path":"Assets/TextMesh Pro/Resources/Style Sheets/Default Style Sheet.asset","name":"Default Style Sheet","assetBundleId":-1,"class":58,"data":[[["H1",2425,"<size=2em><b><#40ff80>*","*</size></b></color>",[60,115,105,122,101,61,50,101,109,62,60,98,62,60,35,52,48,102,102,56,48,62,42],[42,60,47,115,105,122,101,62,60,47,98,62,60,47,99,111,108,111,114,62],[60,115,105,122,101,61,50,101,109,62,60,98,62,60,35,52,48,102,102,56,48,62,42],[42,60,47,115,105,122,101,62,60,47,98,62,60,47,99,111,108,111,114,62]],["Quote",93368250,"<i><size=75%><margin=10%>","</i></size></width></margin>",[60,105,62,60,115,105,122,101,61,55,53,37,62,60,109,97,114,103,105,110,61,49,48,37,62],[60,47,105,62,60,47,115,105,122,101,62,60,47,119,105,100,116,104,62,60,47,109,97,114,103,105,110,62],[60,105,62,60,115,105,122,101,61,55,53,37,62,60,109,97,114,103,105,110,61,49,48,37,62],[60,47,105,62,60,47,115,105,122,101,62,60,47,119,105,100,116,104,62,60,47,109,97,114,103,105,110,62]],["Link",2656128,"<u><#40a0ff><link=\"ID_01\">","</u></color></link>",[60,117,62,60,35,52,48,97,48,102,102,62,60,108,105,110,107,61,34,73,68,95,48,49,34,62],[60,47,117,62,60,47,99,111,108,111,114,62,60,47,108,105,110,107,62],[60,117,62,60,35,52,48,97,48,102,102,62,60,108,105,110,107,61,34,73,68,95,48,49,34,62],[60,47,117,62,60,47,99,111,108,111,114,62,60,47,108,105,110,107,62]],["Title",97690656,"<size=125%><b><align=center>","</size></b></align>",[60,115,105,122,101,61,49,50,53,37,62,60,98,62,60,97,108,105,103,110,61,99,101,110,116,101,114,62],[60,47,115,105,122,101,62,60,47,98,62,60,47,97,108,105,103,110,62],[60,115,105,122,101,61,49,50,53,37,62,60,98,62,60,97,108,105,103,110,61,99,101,110,116,101,114,62],[60,47,115,105,122,101,62,60,47,98,62,60,47,97,108,105,103,110,62]],["H2",2426,"<size=1.5em><b><#4080FF>","</size></b></color>",[60,115,105,122,101,61,49,46,53,101,109,62,60,98,62,60,35,52,48,56,48,70,70,62],[60,47,115,105,122,101,62,60,47,98,62,60,47,99,111,108,111,114,62],[60,115,105,122,101,61,49,46,53,101,109,62,60,98,62,60,35,52,48,56,48,70,70,62],[60,47,115,105,122,101,62,60,47,98,62,60,47,99,111,108,111,114,62]],["H3",2427,"<size=1.17em><b><#FF8040>","</size></b></color>",[60,115,105,122,101,61,49,46,49,55,101,109,62,60,98,62,60,35,70,70,56,48,52,48,62],[60,47,115,105,122,101,62,60,47,98,62,60,47,99,111,108,111,114,62],[60,115,105,122,101,61,49,46,49,55,101,109,62,60,98,62,60,35,70,70,56,48,52,48,62],[60,47,115,105,122,101,62,60,47,98,62,60,47,99,111,108,111,114,62]],["C1",2194,"<color=#ffff40>","</color>",[60,99,111,108,111,114,61,35,102,102,102,102,52,48,62],[60,47,99,111,108,111,114,62],[60,99,111,108,111,114,61,35,102,102,102,102,52,48,62],[60,47,99,111,108,111,114,62]],["C2",2193,"<color=#ff40FF><size=125%>","</color></size>",[60,99,111,108,111,114,61,35,102,102,52,48,70,70,62,60,115,105,122,101,61,49,50,53,37,62],[60,47,99,111,108,111,114,62,60,47,115,105,122,101,62],[60,99,111,108,111,114,61,35,102,102,52,48,70,70,62,60,115,105,122,101,61,49,50,53,37,62],[60,47,99,111,108,111,114,62,60,47,115,105,122,101,62]],["C3",2192,"<color=#80A0FF><b>","</color></b>",[60,99,111,108,111,114,61,35,56,48,65,48,70,70,62,60,98,62],[60,47,99,111,108,111,114,62,60,47,98,62],[60,99,111,108,111,114,61,35,56,48,65,48,70,70,62,60,98,62],[60,47,99,111,108,111,114,62,60,47,98,62]],["Normal",-1183493901,"","",[],[],[],[]]]]},{"id":28436,"path":"Assets/Tiles/Grass.asset","name":"Grass","assetBundleId":-1,"class":10,"data":[15,24578]},{"id":8694,"path":"Assets/SVC_Luna.asset","name":"SVC_Luna","assetBundleId":-1,"class":61,"data":[2,[[0,50,0,0,0,1,[]],[0,28,0,0,0,1,[]],[0,28,0,0,0,1,["PIXELSNAP_ON"]],[0,66,4,0,0,1,["DIRECTIONAL"]],[0,66,4,0,0,1,["DIRECTIONAL","LIGHTPROBE_SH"]],[0,66,4,0,0,1,["DIRECTIONAL","SHADOWS_SCREEN"]],[0,66,4,0,0,1,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN"]],[0,66,4,0,0,1,["DIRECTIONAL","VERTEXLIGHT_ON"]],[0,66,4,0,0,1,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON"]],[0,66,4,0,0,1,["DIRECTIONAL","SHADOWS_SCREEN","VERTEXLIGHT_ON"]],[0,66,4,0,0,1,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN","VERTEXLIGHT_ON"]],[0,66,4,0,0,1,["DIRECTIONAL","_EMISSION"]],[0,66,4,0,0,1,["DIRECTIONAL","LIGHTPROBE_SH","_EMISSION"]],[0,66,4,0,0,1,["DIRECTIONAL","SHADOWS_SCREEN","_EMISSION"]],[0,66,4,0,0,1,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN","_EMISSION"]],[0,66,4,0,0,1,["DIRECTIONAL","VERTEXLIGHT_ON","_EMISSION"]],[0,66,4,0,0,1,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON","_EMISSION"]],[0,66,4,0,0,1,["DIRECTIONAL","SHADOWS_SCREEN","VERTEXLIGHT_ON","_EMISSION"]],[0,66,4,0,0,1,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN","VERTEXLIGHT_ON","_EMISSION"]],[0,66,5,1,0,1,["POINT"]],[0,66,5,1,0,1,["DIRECTIONAL"]],[0,66,5,1,0,1,["SPOT"]],[0,66,5,1,0,1,["POINT_COOKIE"]],[0,66,5,1,0,1,["DIRECTIONAL_COOKIE"]],[0,66,5,1,0,1,["SHADOWS_DEPTH","SPOT"]],[0,66,5,1,0,1,["DIRECTIONAL","SHADOWS_SCREEN"]],[0,66,5,1,0,1,["DIRECTIONAL_COOKIE","SHADOWS_SCREEN"]],[0,66,8,2,0,1,["SHADOWS_DEPTH"]],[0,66,4,0,1,1,["DIRECTIONAL"]],[0,66,4,0,1,1,["DIRECTIONAL","LIGHTPROBE_SH"]],[0,66,4,0,1,1,["DIRECTIONAL","SHADOWS_SCREEN"]],[0,66,4,0,1,1,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN"]],[0,66,4,0,1,1,["DIRECTIONAL","VERTEXLIGHT_ON"]],[0,66,4,0,1,1,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON"]],[0,66,4,0,1,1,["DIRECTIONAL","SHADOWS_SCREEN","VERTEXLIGHT_ON"]],[0,66,4,0,1,1,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN","VERTEXLIGHT_ON"]],[0,66,4,0,1,1,["DIRECTIONAL","_EMISSION"]],[0,66,4,0,1,1,["DIRECTIONAL","LIGHTPROBE_SH","_EMISSION"]],[0,66,4,0,1,1,["DIRECTIONAL","SHADOWS_SCREEN","_EMISSION"]],[0,66,4,0,1,1,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN","_EMISSION"]],[0,66,4,0,1,1,["DIRECTIONAL","VERTEXLIGHT_ON","_EMISSION"]],[0,66,4,0,1,1,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON","_EMISSION"]],[0,66,4,0,1,1,["DIRECTIONAL","SHADOWS_SCREEN","VERTEXLIGHT_ON","_EMISSION"]],[0,66,4,0,1,1,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN","VERTEXLIGHT_ON","_EMISSION"]],[0,66,5,1,1,1,["POINT"]],[0,66,5,1,1,1,["DIRECTIONAL"]],[0,66,5,1,1,1,["SPOT"]],[0,66,5,1,1,1,["POINT_COOKIE"]],[0,66,5,1,1,1,["DIRECTIONAL_COOKIE"]],[0,66,5,1,1,1,["SHADOWS_DEPTH","SPOT"]],[0,66,5,1,1,1,["DIRECTIONAL","SHADOWS_SCREEN"]],[0,66,5,1,1,1,["DIRECTIONAL_COOKIE","SHADOWS_SCREEN"]],[0,66,8,2,1,1,["SHADOWS_DEPTH"]],[0,70,1,0,0,1,[]],[0,70,1,0,0,1,["POINT"]],[0,70,1,0,0,1,["SPOT"]],[0,70,2,1,0,1,[]],[0,70,8,2,0,1,["SHADOWS_DEPTH"]],[0,176,8,1,0,1,["SHADOWS_DEPTH"]],[0,176,8,1,0,1,["SHADOWS_DEPTH","_ALPHABLEND_ON"]],[0,176,8,1,0,1,["SHADOWS_DEPTH","_ALPHABLEND_ON","_COLORCOLOR_ON"]],[0,176,0,2,0,1,[]],[0,176,0,2,0,1,["_ALPHABLEND_ON","_COLORCOLOR_ON"]],[0,408,0,0,0,1,[]],[0,408,0,0,0,1,["UNITY_UI_ALPHACLIP"]],[0,408,0,0,0,1,["UNITY_UI_CLIP_RECT"]],[0,408,0,0,0,1,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"]],[0,408,0,0,0,1,["OUTLINE_ON","UNDERLAY_ON"]],[0,408,0,0,0,1,["OUTLINE_ON"]],[0,408,0,0,0,1,["UNITY_UI_ALPHACLIP","OUTLINE_ON","UNDERLAY_ON"]],[0,408,0,0,0,1,["UNITY_UI_ALPHACLIP","OUTLINE_ON"]],[0,408,0,0,0,1,["UNITY_UI_CLIP_RECT","OUTLINE_ON","UNDERLAY_ON"]],[0,408,0,0,0,1,["UNITY_UI_CLIP_RECT","OUTLINE_ON"]],[0,408,0,0,0,1,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","OUTLINE_ON","UNDERLAY_ON"]],[0,408,0,0,0,1,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","OUTLINE_ON"]],[0,30,0,0,0,1,[]],[0,30,0,0,0,1,["UNITY_UI_ALPHACLIP"]],[0,30,0,0,0,1,["UNITY_UI_CLIP_RECT"]],[0,30,0,0,0,1,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"]],[0,410,0,0,0,1,[]],[0,410,0,0,0,1,["UNITY_UI_ALPHACLIP"]],[0,410,0,0,0,1,["UNITY_UI_CLIP_RECT"]],[0,410,0,0,0,1,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"]],[0,420,0,0,0,1,[]],[0,420,0,0,0,1,["UNITY_UI_ALPHACLIP"]],[0,420,0,0,0,1,["UNITY_UI_CLIP_RECT"]],[0,420,0,0,0,1,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"]],[0,426,0,0,0,1,[]],[0,426,0,0,0,1,["UNITY_UI_ALPHACLIP"]],[0,426,0,0,0,1,["UNITY_UI_CLIP_RECT"]],[0,426,0,0,0,1,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"]],[0,426,0,0,1,1,[]],[0,424,0,0,0,1,[]],[0,424,0,0,0,1,["UNITY_UI_ALPHACLIP"]],[0,424,0,0,0,1,["UNITY_UI_CLIP_RECT"]],[0,424,0,0,0,1,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"]],[0,412,0,0,0,1,[]],[0,412,0,0,0,1,["UNITY_UI_ALPHACLIP"]],[0,412,0,0,0,1,["UNITY_UI_CLIP_RECT"]],[0,412,0,0,0,1,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"]],[0,414,0,0,0,1,[]],[0,414,0,0,0,1,["UNITY_UI_ALPHACLIP"]],[0,414,0,0,0,1,["UNITY_UI_CLIP_RECT"]],[0,414,0,0,0,1,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"]],[0,418,0,0,0,1,[]],[0,418,0,0,0,1,["UNITY_UI_ALPHACLIP"]],[0,418,0,0,0,1,["UNITY_UI_CLIP_RECT"]],[0,418,0,0,0,1,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"]],[0,428,0,0,0,1,[]],[0,428,0,0,0,1,["UNITY_UI_ALPHACLIP"]],[0,428,0,0,0,1,["UNITY_UI_CLIP_RECT"]],[0,428,0,0,0,1,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"]],[0,430,0,0,0,1,[]],[0,430,0,0,0,1,["UNITY_UI_ALPHACLIP"]],[0,430,0,0,0,1,["UNITY_UI_CLIP_RECT"]],[0,430,0,0,0,1,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"]],[0,422,4,0,0,1,["DIRECTIONAL"]],[0,422,4,0,0,1,["DIRECTIONAL","LIGHTPROBE_SH"]],[0,422,4,0,0,1,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON"]],[0,422,8,1,0,1,["SHADOWS_DEPTH"]],[0,432,4,0,0,1,["DIRECTIONAL"]],[0,432,4,0,0,1,["DIRECTIONAL","LIGHTPROBE_SH"]],[0,432,4,0,0,1,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON"]],[0,432,5,1,0,1,["POINT"]],[0,432,5,1,0,1,["DIRECTIONAL"]],[0,432,5,1,0,1,["SPOT"]],[0,432,5,1,0,1,["POINT_COOKIE"]],[0,432,5,1,0,1,["DIRECTIONAL_COOKIE"]],[0,432,8,2,0,1,["SHADOWS_DEPTH"]],[0,416,0,0,0,1,[]],[0,416,0,0,0,1,["UNITY_UI_ALPHACLIP"]],[0,416,0,0,0,1,["UNITY_UI_CLIP_RECT"]],[0,416,0,0,0,1,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"]]],[[0,30,0,0,0,0,[]],[0,28,0,0,0,0,[]],[0,408,0,0,0,0,[]],[0,66,4,0,0,0,["DIRECTIONAL","LIGHTPROBE_SH","_EMISSION"]],[0,176,0,2,0,0,["_ALPHABLEND_ON","_COLORCOLOR_ON"]]],[],[],"688",[[[[0,[["Hidden/BlitCopy",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Color;\nUNITY_LOCATION(0) uniform highp sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0,0,0,0,0,[],[]]],["STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO"],[],0,0,9,0,0,0,0,[],null,"",33,-1]],[],0]],0,50,"Resources/unity_builtin_extra",["STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO"],null,null,[],9],[[[0,[["Hidden/InternalErrorShader",[],[],[],0,0,9,0,0,0,0,[],null,"",227,32]],[],0]],0,34,"Library/unity default resources",[],null,null,[],9],[[[0,[["Legacy Shaders/VertexLit",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tivec4 unity_VertexLightParams;\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec3 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_COLOR1;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat36;\nint u_xlati37;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n    u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)\n    {\n        u_xlat16_44 = dot(u_xlat1.xyz, unity_LightPosition[u_xlati_loop_1].xyz);\n        u_xlat16_44 = max(u_xlat16_44, 0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_44) * _Color.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n        u_xlatb2 = 0.0<u_xlat16_44;\n        if(u_xlatb2){\n            u_xlat16_11.xyz = (-u_xlat0.xyz) * vec3(u_xlat36) + unity_LightPosition[u_xlati_loop_1].xyz;\n            u_xlat16_44 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat16_11.xyz = vec3(u_xlat16_44) * u_xlat16_11.xyz;\n            u_xlat16_44 = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = max(u_xlat16_44, 0.0);\n            u_xlat16_44 = log2(u_xlat16_44);\n            u_xlat16_44 = u_xlat16_43 * u_xlat16_44;\n            u_xlat16_44 = exp2(u_xlat16_44);\n            u_xlat16_44 = min(u_xlat16_44, 1.0);\n            u_xlat16_44 = u_xlat16_44 * 0.5;\n            u_xlat16_9.xyz = vec3(u_xlat16_44) * unity_LightColor[u_xlati_loop_1].xyz + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(0.5, 0.5, 0.5);\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n    }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_COLOR1;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,0,0,0,[],[["LIGHTMODE","Vertex"],["RenderType","Opaque"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tmediump vec4 unity_LightAtten[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tivec4 unity_VertexLightParams;\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec3 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_COLOR1;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nbool u_xlatb5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat10;\nvec3 u_xlat11;\nvec3 u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_14;\nvec3 u_xlat15;\nvec3 u_xlat16;\nbool u_xlatb16;\nfloat u_xlat17;\nmediump vec3 u_xlat16_18;\nvec3 u_xlat19;\nvec3 u_xlat21;\nmediump vec3 u_xlat16_22;\nint u_xlati24;\nbool u_xlatb24;\nmediump vec3 u_xlat16_25;\nmediump vec3 u_xlat16_26;\nvec3 u_xlat28;\nvec3 u_xlat29;\nbool u_xlatb29;\nvec3 u_xlat31;\nvec3 u_xlat32;\nbool u_xlatb32;\nvec3 u_xlat35;\nvec3 u_xlat36;\nbool u_xlatb36;\nmediump float u_xlat16_41;\nbool u_xlatb43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nfloat u_xlat51;\nbool u_xlatb51;\nfloat u_xlat55;\nbool u_xlatb55;\nfloat u_xlat58;\nfloat u_xlat61;\nfloat u_xlat62;\nmediump float u_xlat16_63;\nmediump float u_xlat16_64;\nbool u_xlatb65;\nfloat u_xlat67;\nbool u_xlatb68;\nfloat u_xlat70;\nbool u_xlatb72;\nvoid main()\n{\n    u_xlatb0 = unity_LightPosition[1].w!=0.0;\n    u_xlat19.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat19.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat19.xyz;\n    u_xlat19.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat19.xyz;\n    u_xlat19.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat19.xyz;\n    u_xlat19.xyz = u_xlat19.xyz * in_POSITION0.yyy;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;\n    u_xlat19.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat19.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;\n    u_xlat19.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat19.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;\n    u_xlat19.xyz = u_xlat19.xyz + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat19.xyz) * unity_LightPosition[1].www + unity_LightPosition[1].xyz;\n    u_xlat58 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb2 = unity_LightAtten[1].w<u_xlat58;\n    u_xlatb0 = u_xlatb0 && u_xlatb2;\n    u_xlat2.x = unity_LightAtten[1].z * u_xlat58 + 1.0;\n    u_xlat58 = max(u_xlat58, 9.99999997e-07);\n    u_xlat58 = inversesqrt(u_xlat58);\n    u_xlat2.x = float(1.0) / u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * 0.5;\n    u_xlat16_3.x = (u_xlatb0) ? 0.0 : u_xlat2.x;\n    u_xlat2.xyz = vec3(u_xlat58) * u_xlat1.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat4.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat4.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat5.xyz;\n    u_xlat4.z = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;\n    u_xlat16_22.x = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat16_22.x = max(u_xlat16_22.x, 0.0);\n    u_xlat16_6.xyz = u_xlat16_22.xxx * _Color.xyz;\n    u_xlatb0 = 0.0<u_xlat16_22.x;\n    u_xlat16_22.xyz = u_xlat16_6.xyz * unity_LightColor[1].xyz;\n    u_xlat16_22.xyz = u_xlat16_3.xxx * u_xlat16_22.xyz;\n    u_xlat16_22.xyz = min(u_xlat16_22.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlatb2 = unity_LightPosition[0].w!=0.0;\n    u_xlat21.xyz = (-u_xlat19.xyz) * unity_LightPosition[0].www + unity_LightPosition[0].xyz;\n    u_xlat61 = dot(u_xlat21.xyz, u_xlat21.xyz);\n    u_xlatb5 = unity_LightAtten[0].w<u_xlat61;\n    u_xlatb2 = u_xlatb2 && u_xlatb5;\n    u_xlat5.x = unity_LightAtten[0].z * u_xlat61 + 1.0;\n    u_xlat61 = max(u_xlat61, 9.99999997e-07);\n    u_xlat61 = inversesqrt(u_xlat61);\n    u_xlat5.x = float(1.0) / u_xlat5.x;\n    u_xlat5.x = u_xlat5.x * 0.5;\n    u_xlat16_6.x = (u_xlatb2) ? 0.0 : u_xlat5.x;\n    u_xlat5.xyz = u_xlat21.xyz * vec3(u_xlat61);\n    u_xlat16_25.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat16_25.x = max(u_xlat16_25.x, 0.0);\n    u_xlat16_7.xyz = u_xlat16_25.xxx * _Color.xyz;\n    u_xlatb2 = 0.0<u_xlat16_25.x;\n    u_xlat16_25.xyz = u_xlat16_7.xyz * unity_LightColor[0].xyz;\n    u_xlat16_25.xyz = u_xlat16_6.xxx * u_xlat16_25.xyz;\n    u_xlat16_25.xyz = min(u_xlat16_25.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_25.xyz = u_xlat16_25.xyz + u_xlat16_7.xyz;\n    u_xlatb5 = 0<unity_VertexLightParams.x;\n    u_xlat16_25.xyz = (bool(u_xlatb5)) ? u_xlat16_25.xyz : u_xlat16_7.xyz;\n    u_xlat16_22.xyz = u_xlat16_22.xyz + u_xlat16_25.xyz;\n    u_xlati24 = u_xlatb5 ? 1 : int(0);\n    u_xlatb43 = u_xlati24<unity_VertexLightParams.x;\n    u_xlati24 = (u_xlatb43) ? 2 : u_xlati24;\n    u_xlat16_22.xyz = (bool(u_xlatb43)) ? u_xlat16_22.xyz : u_xlat16_25.xyz;\n    u_xlat8.xyz = (-u_xlat19.xyz) * unity_LightPosition[2].www + unity_LightPosition[2].xyz;\n    u_xlat62 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlatb65 = unity_LightAtten[2].w<u_xlat62;\n    u_xlatb9 = unity_LightPosition[2].w!=0.0;\n    u_xlatb65 = u_xlatb65 && u_xlatb9;\n    u_xlat9.x = unity_LightAtten[2].z * u_xlat62 + 1.0;\n    u_xlat62 = max(u_xlat62, 9.99999997e-07);\n    u_xlat62 = inversesqrt(u_xlat62);\n    u_xlat9.x = float(1.0) / u_xlat9.x;\n    u_xlat9.x = u_xlat9.x * 0.5;\n    u_xlat16_25.x = (u_xlatb65) ? 0.0 : u_xlat9.x;\n    u_xlat9.xyz = vec3(u_xlat62) * u_xlat8.xyz;\n    u_xlat16_44 = dot(u_xlat4.xyz, u_xlat9.xyz);\n    u_xlat16_44 = max(u_xlat16_44, 0.0);\n    u_xlat16_7.xyz = vec3(u_xlat16_44) * _Color.xyz;\n    u_xlatb65 = 0.0<u_xlat16_44;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * unity_LightColor[2].xyz;\n    u_xlat16_7.xyz = u_xlat16_25.xxx * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = min(u_xlat16_7.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_7.xyz = u_xlat16_22.xyz + u_xlat16_7.xyz;\n    u_xlatb9 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb9 = u_xlatb43 && u_xlatb9;\n    u_xlat16_22.xyz = (bool(u_xlatb9)) ? u_xlat16_7.xyz : u_xlat16_22.xyz;\n    u_xlat28.xyz = (-u_xlat19.xyz) * unity_LightPosition[3].www + unity_LightPosition[3].xyz;\n    u_xlat10 = dot(u_xlat28.xyz, u_xlat28.xyz);\n    u_xlatb29 = unity_LightAtten[3].w<u_xlat10;\n    u_xlatb48 = unity_LightPosition[3].w!=0.0;\n    u_xlatb29 = u_xlatb29 && u_xlatb48;\n    u_xlat48 = unity_LightAtten[3].z * u_xlat10 + 1.0;\n    u_xlat10 = max(u_xlat10, 9.99999997e-07);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat48 = float(1.0) / u_xlat48;\n    u_xlat48 = u_xlat48 * 0.5;\n    u_xlat16_44 = (u_xlatb29) ? 0.0 : u_xlat48;\n    u_xlat29.xyz = u_xlat28.xyz * vec3(u_xlat10);\n    u_xlat16_63 = dot(u_xlat4.xyz, u_xlat29.xyz);\n    u_xlat16_63 = max(u_xlat16_63, 0.0);\n    u_xlat16_7.xyz = vec3(u_xlat16_63) * _Color.xyz;\n    u_xlatb29 = 0.0<u_xlat16_63;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * unity_LightColor[3].xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_44) * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = min(u_xlat16_7.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_7.xyz = u_xlat16_22.xyz + u_xlat16_7.xyz;\n    u_xlati24 = (u_xlatb9) ? 3 : u_xlati24;\n    u_xlatb48 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb48 = u_xlatb9 && u_xlatb48;\n    u_xlat16_22.xyz = (bool(u_xlatb48)) ? u_xlat16_7.xyz : u_xlat16_22.xyz;\n    u_xlat11.xyz = (-u_xlat19.xyz) * unity_LightPosition[4].www + unity_LightPosition[4].xyz;\n    u_xlat67 = dot(u_xlat11.xyz, u_xlat11.xyz);\n    u_xlatb68 = unity_LightAtten[4].w<u_xlat67;\n    u_xlatb12 = unity_LightPosition[4].w!=0.0;\n    u_xlatb68 = u_xlatb68 && u_xlatb12;\n    u_xlat12.x = unity_LightAtten[4].z * u_xlat67 + 1.0;\n    u_xlat67 = max(u_xlat67, 9.99999997e-07);\n    u_xlat67 = inversesqrt(u_xlat67);\n    u_xlat12.x = float(1.0) / u_xlat12.x;\n    u_xlat12.x = u_xlat12.x * 0.5;\n    u_xlat16_63 = (u_xlatb68) ? 0.0 : u_xlat12.x;\n    u_xlat12.xyz = vec3(u_xlat67) * u_xlat11.xyz;\n    u_xlat16_7.x = dot(u_xlat4.xyz, u_xlat12.xyz);\n    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);\n    u_xlat16_26.xyz = u_xlat16_7.xxx * _Color.xyz;\n    u_xlatb68 = 0.0<u_xlat16_7.x;\n    u_xlat16_7.xyz = u_xlat16_26.xyz * unity_LightColor[4].xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_63) * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = min(u_xlat16_7.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_7.xyz = u_xlat16_22.xyz + u_xlat16_7.xyz;\n    u_xlati24 = (u_xlatb48) ? 4 : u_xlati24;\n    u_xlatb12 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb12 = u_xlatb48 && u_xlatb12;\n    u_xlat16_22.xyz = (bool(u_xlatb12)) ? u_xlat16_7.xyz : u_xlat16_22.xyz;\n    u_xlat31.xyz = (-u_xlat19.xyz) * unity_LightPosition[5].www + unity_LightPosition[5].xyz;\n    u_xlat13 = dot(u_xlat31.xyz, u_xlat31.xyz);\n    u_xlatb32 = unity_LightAtten[5].w<u_xlat13;\n    u_xlatb51 = unity_LightPosition[5].w!=0.0;\n    u_xlatb32 = u_xlatb32 && u_xlatb51;\n    u_xlat51 = unity_LightAtten[5].z * u_xlat13 + 1.0;\n    u_xlat13 = max(u_xlat13, 9.99999997e-07);\n    u_xlat13 = inversesqrt(u_xlat13);\n    u_xlat51 = float(1.0) / u_xlat51;\n    u_xlat51 = u_xlat51 * 0.5;\n    u_xlat16_7.x = (u_xlatb32) ? 0.0 : u_xlat51;\n    u_xlat32.xyz = u_xlat31.xyz * vec3(u_xlat13);\n    u_xlat16_26.x = dot(u_xlat4.xyz, u_xlat32.xyz);\n    u_xlat16_26.x = max(u_xlat16_26.x, 0.0);\n    u_xlat16_14.xyz = u_xlat16_26.xxx * _Color.xyz;\n    u_xlatb32 = 0.0<u_xlat16_26.x;\n    u_xlat16_26.xyz = u_xlat16_14.xyz * unity_LightColor[5].xyz;\n    u_xlat16_26.xyz = u_xlat16_7.xxx * u_xlat16_26.xyz;\n    u_xlat16_26.xyz = min(u_xlat16_26.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_26.xyz = u_xlat16_22.xyz + u_xlat16_26.xyz;\n    u_xlati24 = (u_xlatb12) ? 5 : u_xlati24;\n    u_xlatb51 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb51 = u_xlatb12 && u_xlatb51;\n    u_xlat16_22.xyz = (bool(u_xlatb51)) ? u_xlat16_26.xyz : u_xlat16_22.xyz;\n    u_xlat15.xyz = (-u_xlat19.xyz) * unity_LightPosition[6].www + unity_LightPosition[6].xyz;\n    u_xlat70 = dot(u_xlat15.xyz, u_xlat15.xyz);\n    u_xlatb72 = unity_LightAtten[6].w<u_xlat70;\n    u_xlatb16 = unity_LightPosition[6].w!=0.0;\n    u_xlatb72 = u_xlatb72 && u_xlatb16;\n    u_xlat16.x = unity_LightAtten[6].z * u_xlat70 + 1.0;\n    u_xlat70 = max(u_xlat70, 9.99999997e-07);\n    u_xlat70 = inversesqrt(u_xlat70);\n    u_xlat16.x = float(1.0) / u_xlat16.x;\n    u_xlat16.x = u_xlat16.x * 0.5;\n    u_xlat16_26.x = (u_xlatb72) ? 0.0 : u_xlat16.x;\n    u_xlat16.xyz = vec3(u_xlat70) * u_xlat15.xyz;\n    u_xlat16_45 = dot(u_xlat4.xyz, u_xlat16.xyz);\n    u_xlat16_45 = max(u_xlat16_45, 0.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_45) * _Color.xyz;\n    u_xlatb72 = 0.0<u_xlat16_45;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * unity_LightColor[6].xyz;\n    u_xlat16_14.xyz = u_xlat16_26.xxx * u_xlat16_14.xyz;\n    u_xlat16_14.xyz = min(u_xlat16_14.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_14.xyz = u_xlat16_22.xyz + u_xlat16_14.xyz;\n    u_xlati24 = (u_xlatb51) ? 6 : u_xlati24;\n    u_xlatb16 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb16 = u_xlatb51 && u_xlatb16;\n    u_xlat16_22.xyz = (bool(u_xlatb16)) ? u_xlat16_14.xyz : u_xlat16_22.xyz;\n    u_xlat35.xyz = (-u_xlat19.xyz) * unity_LightPosition[7].www + unity_LightPosition[7].xyz;\n    u_xlat17 = dot(u_xlat35.xyz, u_xlat35.xyz);\n    u_xlatb36 = unity_LightAtten[7].w<u_xlat17;\n    u_xlatb55 = unity_LightPosition[7].w!=0.0;\n    u_xlatb36 = u_xlatb36 && u_xlatb55;\n    u_xlat55 = unity_LightAtten[7].z * u_xlat17 + 1.0;\n    u_xlat17 = max(u_xlat17, 9.99999997e-07);\n    u_xlat17 = inversesqrt(u_xlat17);\n    u_xlat55 = float(1.0) / u_xlat55;\n    u_xlat55 = u_xlat55 * 0.5;\n    u_xlat16_45 = (u_xlatb36) ? 0.0 : u_xlat55;\n    u_xlat36.xyz = u_xlat35.xyz * vec3(u_xlat17);\n    u_xlat16_64 = dot(u_xlat4.xyz, u_xlat36.xyz);\n    u_xlat16_64 = max(u_xlat16_64, 0.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_64) * _Color.xyz;\n    u_xlatb36 = 0.0<u_xlat16_64;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * unity_LightColor[7].xyz;\n    u_xlat16_14.xyz = vec3(u_xlat16_45) * u_xlat16_14.xyz;\n    u_xlat16_14.xyz = min(u_xlat16_14.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_14.xyz = u_xlat16_22.xyz + u_xlat16_14.xyz;\n    u_xlati24 = (u_xlatb16) ? 7 : u_xlati24;\n    u_xlatb24 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb24 = u_xlatb24 && u_xlatb16;\n    vs_COLOR0.xyz = (bool(u_xlatb24)) ? u_xlat16_14.xyz : u_xlat16_22.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    u_xlat55 = dot(u_xlat19.xyz, u_xlat19.xyz);\n    u_xlat55 = inversesqrt(u_xlat55);\n    u_xlat19.xyz = u_xlat19.xyz * vec3(u_xlat55);\n    u_xlat16_22.xyz = u_xlat21.xyz * vec3(u_xlat61) + (-u_xlat19.xyz);\n    u_xlat16_64 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);\n    u_xlat16_64 = inversesqrt(u_xlat16_64);\n    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_64);\n    u_xlat16_22.x = dot(u_xlat4.xyz, u_xlat16_22.xyz);\n    u_xlat16_22.x = max(u_xlat16_22.x, 0.0);\n    u_xlat16_22.x = log2(u_xlat16_22.x);\n    u_xlat16_41 = _Shininess * 128.0;\n    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_41;\n    u_xlat16_22.x = exp2(u_xlat16_22.x);\n    u_xlat16_22.x = min(u_xlat16_22.x, 1.0);\n    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_6.x;\n    u_xlat16_14.xyz = u_xlat16_22.xxx * unity_LightColor[0].xyz;\n    u_xlat16_14.xyz = (bool(u_xlatb2)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n    u_xlat16_14.xyz = (bool(u_xlatb5)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n    u_xlat16_18.xyz = u_xlat1.xyz * vec3(u_xlat58) + (-u_xlat19.xyz);\n    u_xlat16_22.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);\n    u_xlat16_18.xyz = u_xlat16_22.xxx * u_xlat16_18.xyz;\n    u_xlat16_22.x = dot(u_xlat4.xyz, u_xlat16_18.xyz);\n    u_xlat16_22.x = max(u_xlat16_22.x, 0.0);\n    u_xlat16_22.x = log2(u_xlat16_22.x);\n    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_41;\n    u_xlat16_22.x = exp2(u_xlat16_22.x);\n    u_xlat16_22.x = min(u_xlat16_22.x, 1.0);\n    u_xlat16_3.x = u_xlat16_22.x * u_xlat16_3.x;\n    u_xlat16_3.xyw = u_xlat16_3.xxx * unity_LightColor[1].xyz + u_xlat16_14.xyz;\n    u_xlat16_3.xyw = (bool(u_xlatb0)) ? u_xlat16_3.xyw : u_xlat16_14.xyz;\n    u_xlat16_3.xyw = (bool(u_xlatb43)) ? u_xlat16_3.xyw : u_xlat16_14.xyz;\n    u_xlat16_14.xyz = u_xlat8.xyz * vec3(u_xlat62) + (-u_xlat19.xyz);\n    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n    u_xlat16_14.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz;\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_14.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_6.x = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_25.x;\n    u_xlat16_14.xyz = u_xlat16_6.xxx * unity_LightColor[2].xyz + u_xlat16_3.xyw;\n    u_xlat16_14.xyz = (bool(u_xlatb65)) ? u_xlat16_14.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyw = (bool(u_xlatb9)) ? u_xlat16_14.xyz : u_xlat16_3.xyw;\n    u_xlat16_14.xyz = u_xlat28.xyz * vec3(u_xlat10) + (-u_xlat19.xyz);\n    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n    u_xlat16_14.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz;\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_14.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_6.x = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_44;\n    u_xlat16_6.xyz = u_xlat16_6.xxx * unity_LightColor[3].xyz + u_xlat16_3.xyw;\n    u_xlat16_6.xyz = (bool(u_xlatb29)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyw = (bool(u_xlatb48)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_6.xyz = u_xlat11.xyz * vec3(u_xlat67) + (-u_xlat19.xyz);\n    u_xlat16_64 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlat16_64 = inversesqrt(u_xlat16_64);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_64);\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_6.x = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_63;\n    u_xlat16_6.xyz = u_xlat16_6.xxx * unity_LightColor[4].xyz + u_xlat16_3.xyw;\n    u_xlat16_6.xyz = (bool(u_xlatb68)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyw = (bool(u_xlatb12)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_6.xyz = u_xlat31.xyz * vec3(u_xlat13) + (-u_xlat19.xyz);\n    u_xlat16_63 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlat16_63 = inversesqrt(u_xlat16_63);\n    u_xlat16_6.xyz = vec3(u_xlat16_63) * u_xlat16_6.xyz;\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_6.x = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_7.x;\n    u_xlat16_6.xyz = u_xlat16_6.xxx * unity_LightColor[5].xyz + u_xlat16_3.xyw;\n    u_xlat16_6.xyz = (bool(u_xlatb32)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyw = (bool(u_xlatb51)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_6.xyz = u_xlat15.xyz * vec3(u_xlat70) + (-u_xlat19.xyz);\n    u_xlat16_14.xyz = u_xlat35.xyz * vec3(u_xlat17) + (-u_xlat19.xyz);\n    u_xlat16_63 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlat16_63 = inversesqrt(u_xlat16_63);\n    u_xlat16_6.xyz = vec3(u_xlat16_63) * u_xlat16_6.xyz;\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_6.x = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_26.x;\n    u_xlat16_6.xyz = u_xlat16_6.xxx * unity_LightColor[6].xyz + u_xlat16_3.xyw;\n    u_xlat16_6.xyz = (bool(u_xlatb72)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyw = (bool(u_xlatb16)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz;\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_41 = exp2(u_xlat16_41);\n    u_xlat16_41 = min(u_xlat16_41, 1.0);\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_45;\n    u_xlat16_6.xyz = vec3(u_xlat16_41) * unity_LightColor[7].xyz + u_xlat16_3.xyw;\n    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    vs_COLOR1.xyz = u_xlat16_3.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_COLOR1;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,1,0,0,["POINT"],[["LIGHTMODE","Vertex"],["RenderType","Opaque"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tmediump vec4 unity_LightAtten[8];\nuniform \tvec4 unity_SpotDirection[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tivec4 unity_VertexLightParams;\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec3 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_COLOR1;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nbool u_xlatb3;\nvec3 u_xlat4;\nbool u_xlatb4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nbool u_xlatb15;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_20;\nfloat u_xlat33;\nint u_xlati33;\nbool u_xlatb33;\nfloat u_xlat34;\nbool u_xlatb34;\nfloat u_xlat35;\nbool u_xlatb35;\nfloat u_xlat36;\nbool u_xlatb36;\nmediump float u_xlat16_40;\nmediump float u_xlat16_42;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;\n    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_40 = _Shininess * 128.0;\n    u_xlatb33 = 0<unity_VertexLightParams.x;\n    if(u_xlatb33){\n        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[0].www + unity_LightPosition[0].xyz;\n        u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat34 = unity_LightAtten[0].z * u_xlat33 + 1.0;\n        u_xlat34 = float(1.0) / u_xlat34;\n        u_xlatb35 = unity_LightPosition[0].w!=0.0;\n        u_xlatb36 = unity_LightAtten[0].w<u_xlat33;\n        u_xlatb35 = u_xlatb35 && u_xlatb36;\n        u_xlat16_8 = (u_xlatb35) ? 0.0 : u_xlat34;\n        u_xlat33 = max(u_xlat33, 9.99999997e-07);\n        u_xlat33 = inversesqrt(u_xlat33);\n        u_xlat4.xyz = vec3(u_xlat33) * u_xlat3.xyz;\n        u_xlat34 = dot(u_xlat4.xyz, unity_SpotDirection[0].xyz);\n        u_xlat34 = max(u_xlat34, 0.0);\n        u_xlat16_19.x = u_xlat34 + (-unity_LightAtten[0].x);\n        u_xlat16_19.x = u_xlat16_19.x * unity_LightAtten[0].y;\n        u_xlat16_19.x = clamp(u_xlat16_19.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_19.x * u_xlat16_8;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_19.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_19.x = max(u_xlat16_19.x, 0.0);\n        u_xlat16_9.xyz = u_xlat16_19.xxx * _Color.xyz;\n        u_xlat16_9.xyz = u_xlat16_9.xyz * unity_LightColor[0].xyz;\n        u_xlatb34 = 0.0<u_xlat16_19.x;\n        u_xlat16_19.xyz = u_xlat3.xyz * vec3(u_xlat33) + (-u_xlat2.xyz);\n        u_xlat16_42 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat16_19.xyz = u_xlat16_19.xyz * vec3(u_xlat16_42);\n        u_xlat16_19.x = dot(u_xlat1.xyz, u_xlat16_19.xyz);\n        u_xlat16_19.x = max(u_xlat16_19.x, 0.0);\n        u_xlat16_19.x = log2(u_xlat16_19.x);\n        u_xlat16_19.x = u_xlat16_40 * u_xlat16_19.x;\n        u_xlat16_19.x = exp2(u_xlat16_19.x);\n        u_xlat16_19.x = min(u_xlat16_19.x, 1.0);\n        u_xlat16_19.x = u_xlat16_19.x * u_xlat16_8;\n        u_xlat16_19.xyz = u_xlat16_19.xxx * unity_LightColor[0].xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb34)) ? u_xlat16_19.xyz : vec3(0.0, 0.0, 0.0);\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_9.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n        u_xlati33 = 1;\n    } else {\n        u_xlat16_19.x = float(0.0);\n        u_xlat16_19.y = float(0.0);\n        u_xlat16_19.z = float(0.0);\n        u_xlati33 = 0;\n    }\n    u_xlatb34 = u_xlati33<unity_VertexLightParams.x;\n    if(u_xlatb34){\n        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[1].www + unity_LightPosition[1].xyz;\n        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat36 = unity_LightAtten[1].z * u_xlat35 + 1.0;\n        u_xlat36 = float(1.0) / u_xlat36;\n        u_xlatb4 = unity_LightPosition[1].w!=0.0;\n        u_xlatb15 = unity_LightAtten[1].w<u_xlat35;\n        u_xlatb4 = u_xlatb15 && u_xlatb4;\n        u_xlat16_8 = (u_xlatb4) ? 0.0 : u_xlat36;\n        u_xlat35 = max(u_xlat35, 9.99999997e-07);\n        u_xlat35 = inversesqrt(u_xlat35);\n        u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;\n        u_xlat36 = dot(u_xlat4.xyz, unity_SpotDirection[1].xyz);\n        u_xlat36 = max(u_xlat36, 0.0);\n        u_xlat16_9.x = u_xlat36 + (-unity_LightAtten[1].x);\n        u_xlat16_9.x = u_xlat16_9.x * unity_LightAtten[1].y;\n        u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_20.xyz = u_xlat16_9.xxx * _Color.xyz;\n        u_xlat16_20.xyz = u_xlat16_20.xyz * unity_LightColor[1].xyz;\n        u_xlatb36 = 0.0<u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-u_xlat2.xyz);\n        u_xlat16_9.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = inversesqrt(u_xlat16_9.x);\n        u_xlat16_10.xyz = u_xlat16_9.xxx * u_xlat16_10.xyz;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_9.x = log2(u_xlat16_9.x);\n        u_xlat16_9.x = u_xlat16_40 * u_xlat16_9.x;\n        u_xlat16_9.x = exp2(u_xlat16_9.x);\n        u_xlat16_9.x = min(u_xlat16_9.x, 1.0);\n        u_xlat16_9.x = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat16_9.xxx * unity_LightColor[1].xyz + u_xlat16_19.xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb36)) ? u_xlat16_10.xyz : u_xlat16_19.xyz;\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_20.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n        u_xlati33 = 2;\n    }\n    u_xlatb35 = u_xlati33<unity_VertexLightParams.x;\n    u_xlatb34 = u_xlatb34 && u_xlatb35;\n    if(u_xlatb34){\n        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[2].www + unity_LightPosition[2].xyz;\n        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat36 = unity_LightAtten[2].z * u_xlat35 + 1.0;\n        u_xlat36 = float(1.0) / u_xlat36;\n        u_xlatb4 = unity_LightPosition[2].w!=0.0;\n        u_xlatb15 = unity_LightAtten[2].w<u_xlat35;\n        u_xlatb4 = u_xlatb15 && u_xlatb4;\n        u_xlat16_8 = (u_xlatb4) ? 0.0 : u_xlat36;\n        u_xlat35 = max(u_xlat35, 9.99999997e-07);\n        u_xlat35 = inversesqrt(u_xlat35);\n        u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;\n        u_xlat36 = dot(u_xlat4.xyz, unity_SpotDirection[2].xyz);\n        u_xlat36 = max(u_xlat36, 0.0);\n        u_xlat16_9.x = u_xlat36 + (-unity_LightAtten[2].x);\n        u_xlat16_9.x = u_xlat16_9.x * unity_LightAtten[2].y;\n        u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_20.xyz = u_xlat16_9.xxx * _Color.xyz;\n        u_xlat16_20.xyz = u_xlat16_20.xyz * unity_LightColor[2].xyz;\n        u_xlatb36 = 0.0<u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-u_xlat2.xyz);\n        u_xlat16_9.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = inversesqrt(u_xlat16_9.x);\n        u_xlat16_10.xyz = u_xlat16_9.xxx * u_xlat16_10.xyz;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_9.x = log2(u_xlat16_9.x);\n        u_xlat16_9.x = u_xlat16_40 * u_xlat16_9.x;\n        u_xlat16_9.x = exp2(u_xlat16_9.x);\n        u_xlat16_9.x = min(u_xlat16_9.x, 1.0);\n        u_xlat16_9.x = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat16_9.xxx * unity_LightColor[2].xyz + u_xlat16_19.xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb36)) ? u_xlat16_10.xyz : u_xlat16_19.xyz;\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_20.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n        u_xlati33 = 3;\n    }\n    u_xlatb35 = u_xlati33<unity_VertexLightParams.x;\n    u_xlatb34 = u_xlatb34 && u_xlatb35;\n    if(u_xlatb34){\n        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[3].www + unity_LightPosition[3].xyz;\n        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat36 = unity_LightAtten[3].z * u_xlat35 + 1.0;\n        u_xlat36 = float(1.0) / u_xlat36;\n        u_xlatb4 = unity_LightPosition[3].w!=0.0;\n        u_xlatb15 = unity_LightAtten[3].w<u_xlat35;\n        u_xlatb4 = u_xlatb15 && u_xlatb4;\n        u_xlat16_8 = (u_xlatb4) ? 0.0 : u_xlat36;\n        u_xlat35 = max(u_xlat35, 9.99999997e-07);\n        u_xlat35 = inversesqrt(u_xlat35);\n        u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;\n        u_xlat36 = dot(u_xlat4.xyz, unity_SpotDirection[3].xyz);\n        u_xlat36 = max(u_xlat36, 0.0);\n        u_xlat16_9.x = u_xlat36 + (-unity_LightAtten[3].x);\n        u_xlat16_9.x = u_xlat16_9.x * unity_LightAtten[3].y;\n        u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_20.xyz = u_xlat16_9.xxx * _Color.xyz;\n        u_xlat16_20.xyz = u_xlat16_20.xyz * unity_LightColor[3].xyz;\n        u_xlatb36 = 0.0<u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-u_xlat2.xyz);\n        u_xlat16_9.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = inversesqrt(u_xlat16_9.x);\n        u_xlat16_10.xyz = u_xlat16_9.xxx * u_xlat16_10.xyz;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_9.x = log2(u_xlat16_9.x);\n        u_xlat16_9.x = u_xlat16_40 * u_xlat16_9.x;\n        u_xlat16_9.x = exp2(u_xlat16_9.x);\n        u_xlat16_9.x = min(u_xlat16_9.x, 1.0);\n        u_xlat16_9.x = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat16_9.xxx * unity_LightColor[3].xyz + u_xlat16_19.xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb36)) ? u_xlat16_10.xyz : u_xlat16_19.xyz;\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_20.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n        u_xlati33 = 4;\n    }\n    u_xlatb35 = u_xlati33<unity_VertexLightParams.x;\n    u_xlatb34 = u_xlatb34 && u_xlatb35;\n    if(u_xlatb34){\n        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[4].www + unity_LightPosition[4].xyz;\n        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat36 = unity_LightAtten[4].z * u_xlat35 + 1.0;\n        u_xlat36 = float(1.0) / u_xlat36;\n        u_xlatb4 = unity_LightPosition[4].w!=0.0;\n        u_xlatb15 = unity_LightAtten[4].w<u_xlat35;\n        u_xlatb4 = u_xlatb15 && u_xlatb4;\n        u_xlat16_8 = (u_xlatb4) ? 0.0 : u_xlat36;\n        u_xlat35 = max(u_xlat35, 9.99999997e-07);\n        u_xlat35 = inversesqrt(u_xlat35);\n        u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;\n        u_xlat36 = dot(u_xlat4.xyz, unity_SpotDirection[4].xyz);\n        u_xlat36 = max(u_xlat36, 0.0);\n        u_xlat16_9.x = u_xlat36 + (-unity_LightAtten[4].x);\n        u_xlat16_9.x = u_xlat16_9.x * unity_LightAtten[4].y;\n        u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_20.xyz = u_xlat16_9.xxx * _Color.xyz;\n        u_xlat16_20.xyz = u_xlat16_20.xyz * unity_LightColor[4].xyz;\n        u_xlatb36 = 0.0<u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-u_xlat2.xyz);\n        u_xlat16_9.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = inversesqrt(u_xlat16_9.x);\n        u_xlat16_10.xyz = u_xlat16_9.xxx * u_xlat16_10.xyz;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_9.x = log2(u_xlat16_9.x);\n        u_xlat16_9.x = u_xlat16_40 * u_xlat16_9.x;\n        u_xlat16_9.x = exp2(u_xlat16_9.x);\n        u_xlat16_9.x = min(u_xlat16_9.x, 1.0);\n        u_xlat16_9.x = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat16_9.xxx * unity_LightColor[4].xyz + u_xlat16_19.xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb36)) ? u_xlat16_10.xyz : u_xlat16_19.xyz;\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_20.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n        u_xlati33 = 5;\n    }\n    u_xlatb35 = u_xlati33<unity_VertexLightParams.x;\n    u_xlatb34 = u_xlatb34 && u_xlatb35;\n    if(u_xlatb34){\n        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[5].www + unity_LightPosition[5].xyz;\n        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat36 = unity_LightAtten[5].z * u_xlat35 + 1.0;\n        u_xlat36 = float(1.0) / u_xlat36;\n        u_xlatb4 = unity_LightPosition[5].w!=0.0;\n        u_xlatb15 = unity_LightAtten[5].w<u_xlat35;\n        u_xlatb4 = u_xlatb15 && u_xlatb4;\n        u_xlat16_8 = (u_xlatb4) ? 0.0 : u_xlat36;\n        u_xlat35 = max(u_xlat35, 9.99999997e-07);\n        u_xlat35 = inversesqrt(u_xlat35);\n        u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;\n        u_xlat36 = dot(u_xlat4.xyz, unity_SpotDirection[5].xyz);\n        u_xlat36 = max(u_xlat36, 0.0);\n        u_xlat16_9.x = u_xlat36 + (-unity_LightAtten[5].x);\n        u_xlat16_9.x = u_xlat16_9.x * unity_LightAtten[5].y;\n        u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_20.xyz = u_xlat16_9.xxx * _Color.xyz;\n        u_xlat16_20.xyz = u_xlat16_20.xyz * unity_LightColor[5].xyz;\n        u_xlatb36 = 0.0<u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-u_xlat2.xyz);\n        u_xlat16_9.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = inversesqrt(u_xlat16_9.x);\n        u_xlat16_10.xyz = u_xlat16_9.xxx * u_xlat16_10.xyz;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_9.x = log2(u_xlat16_9.x);\n        u_xlat16_9.x = u_xlat16_40 * u_xlat16_9.x;\n        u_xlat16_9.x = exp2(u_xlat16_9.x);\n        u_xlat16_9.x = min(u_xlat16_9.x, 1.0);\n        u_xlat16_9.x = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat16_9.xxx * unity_LightColor[5].xyz + u_xlat16_19.xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb36)) ? u_xlat16_10.xyz : u_xlat16_19.xyz;\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_20.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n        u_xlati33 = 6;\n    }\n    u_xlatb35 = u_xlati33<unity_VertexLightParams.x;\n    u_xlatb34 = u_xlatb34 && u_xlatb35;\n    if(u_xlatb34){\n        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[6].www + unity_LightPosition[6].xyz;\n        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat36 = unity_LightAtten[6].z * u_xlat35 + 1.0;\n        u_xlat36 = float(1.0) / u_xlat36;\n        u_xlatb4 = unity_LightPosition[6].w!=0.0;\n        u_xlatb15 = unity_LightAtten[6].w<u_xlat35;\n        u_xlatb4 = u_xlatb15 && u_xlatb4;\n        u_xlat16_8 = (u_xlatb4) ? 0.0 : u_xlat36;\n        u_xlat35 = max(u_xlat35, 9.99999997e-07);\n        u_xlat35 = inversesqrt(u_xlat35);\n        u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;\n        u_xlat36 = dot(u_xlat4.xyz, unity_SpotDirection[6].xyz);\n        u_xlat36 = max(u_xlat36, 0.0);\n        u_xlat16_9.x = u_xlat36 + (-unity_LightAtten[6].x);\n        u_xlat16_9.x = u_xlat16_9.x * unity_LightAtten[6].y;\n        u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_20.xyz = u_xlat16_9.xxx * _Color.xyz;\n        u_xlat16_20.xyz = u_xlat16_20.xyz * unity_LightColor[6].xyz;\n        u_xlatb36 = 0.0<u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-u_xlat2.xyz);\n        u_xlat16_9.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = inversesqrt(u_xlat16_9.x);\n        u_xlat16_10.xyz = u_xlat16_9.xxx * u_xlat16_10.xyz;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_9.x = log2(u_xlat16_9.x);\n        u_xlat16_9.x = u_xlat16_40 * u_xlat16_9.x;\n        u_xlat16_9.x = exp2(u_xlat16_9.x);\n        u_xlat16_9.x = min(u_xlat16_9.x, 1.0);\n        u_xlat16_9.x = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat16_9.xxx * unity_LightColor[6].xyz + u_xlat16_19.xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb36)) ? u_xlat16_10.xyz : u_xlat16_19.xyz;\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_20.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n        u_xlati33 = 7;\n    }\n    u_xlatb33 = u_xlati33<unity_VertexLightParams.x;\n    u_xlatb33 = u_xlatb33 && u_xlatb34;\n    if(u_xlatb33){\n        u_xlat0.xyz = (-u_xlat0.xyz) * unity_LightPosition[7].www + unity_LightPosition[7].xyz;\n        u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);\n        u_xlat34 = unity_LightAtten[7].z * u_xlat33 + 1.0;\n        u_xlat34 = float(1.0) / u_xlat34;\n        u_xlatb35 = unity_LightPosition[7].w!=0.0;\n        u_xlatb3 = unity_LightAtten[7].w<u_xlat33;\n        u_xlatb35 = u_xlatb35 && u_xlatb3;\n        u_xlat16_8 = (u_xlatb35) ? 0.0 : u_xlat34;\n        u_xlat33 = max(u_xlat33, 9.99999997e-07);\n        u_xlat33 = inversesqrt(u_xlat33);\n        u_xlat3.xyz = vec3(u_xlat33) * u_xlat0.xyz;\n        u_xlat34 = dot(u_xlat3.xyz, unity_SpotDirection[7].xyz);\n        u_xlat34 = max(u_xlat34, 0.0);\n        u_xlat16_9.x = u_xlat34 + (-unity_LightAtten[7].x);\n        u_xlat16_9.x = u_xlat16_9.x * unity_LightAtten[7].y;\n        u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_20.xyz = u_xlat16_9.xxx * _Color.xyz;\n        u_xlat16_20.xyz = u_xlat16_20.xyz * unity_LightColor[7].xyz;\n        u_xlatb34 = 0.0<u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat0.xyz * vec3(u_xlat33) + (-u_xlat2.xyz);\n        u_xlat16_9.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = inversesqrt(u_xlat16_9.x);\n        u_xlat16_10.xyz = u_xlat16_9.xxx * u_xlat16_10.xyz;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_9.x = log2(u_xlat16_9.x);\n        u_xlat16_40 = u_xlat16_40 * u_xlat16_9.x;\n        u_xlat16_40 = exp2(u_xlat16_40);\n        u_xlat16_40 = min(u_xlat16_40, 1.0);\n        u_xlat16_40 = u_xlat16_40 * u_xlat16_8;\n        u_xlat16_10.xyz = vec3(u_xlat16_40) * unity_LightColor[7].xyz + u_xlat16_19.xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb34)) ? u_xlat16_10.xyz : u_xlat16_19.xyz;\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_20.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n    }\n    vs_COLOR1.xyz = u_xlat16_19.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_7.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_COLOR1;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,2,0,0,["SPOT"],[["LIGHTMODE","Vertex"],["RenderType","Opaque"]]]],["FOG_EXP","FOG_EXP2","FOG_LINEAR","POINT","SPOT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_"],[[["_","FOG_LINEAR","FOG_EXP","FOG_EXP2"]],[["_","POINT","SPOT"]]],0,0,9,0,0,0,0,[["LIGHTMODE","Vertex"],["RenderType","Opaque"]],null,"",1,-1],["Legacy Shaders/VertexLit",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_LightmapST;\nuniform \tvec4 unity_Lightmap_ST;\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_TEXCOORD1;\nin highp vec3 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_Lightmap_ST.xy + unity_Lightmap_ST.zw;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_Lightmap_HDR;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(unity_Lightmap, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * unity_Lightmap_HDR.x;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,0,1,0,[],[["LIGHTMODE","VertexLM"],["RenderType","Opaque"]]]],["FOG_EXP","FOG_EXP2","FOG_LINEAR","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"]]],0,0,9,0,1,0,1,[["LIGHTMODE","VertexLM"],["RenderType","Opaque"]],null,"",1,-1],["Legacy Shaders/VertexLit",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n",0,0,0,2,0,["SHADOWS_DEPTH"],[["LIGHTMODE","SHADOWCASTER"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]]],["INSTANCING_ON","SHADOWS_CUBE","SHADOWS_DEPTH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[["__","INSTANCING_ON"]],[["SHADOWS_DEPTH"]],[["SHADOWS_CUBE"]]],2,0,9,0,2,0,2,[["LIGHTMODE","SHADOWCASTER"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],null,"",1,-1]],[["RenderType","Opaque"]],0]],0,70,"Resources/unity_builtin_extra",["FOG_EXP","FOG_EXP2","FOG_LINEAR","POINT","SPOT","SHADOWS_DEPTH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_","__","INSTANCING_ON","SHADOWS_CUBE"],null,null,[],9],[[[0,[["Particles/Standard Unlit",[],[],[],0,0,9,0,0,0,0,[["LIGHTMODE","GRABPASS"]],null,"_GrabTexture",227,32],["Particles/Standard Unlit",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n",0,0,0,1,0,["SHADOWS_DEPTH"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","SHADOWCASTER"],["PerformanceChecks","False"],["PreviewType","Plane"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3 = in_COLOR0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;\n    u_xlat16_1 = u_xlat16_0 * vs_TEXCOORD3.w + -0.5;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n",0,0,3,1,0,["SHADOWS_DEPTH","_ALPHABLEND_ON"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","SHADOWCASTER"],["PerformanceChecks","False"],["PreviewType","Plane"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3 = in_COLOR0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;\n    u_xlat16_1 = u_xlat16_0 * vs_TEXCOORD3.w + -0.5;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n",0,0,0,1,0,["SHADOWS_DEPTH","_ALPHABLEND_ON","_COLORCOLOR_ON"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","SHADOWCASTER"],["PerformanceChecks","False"],["PreviewType","Plane"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]]],["INSTANCING_ON","PROCEDURAL_INSTANCING_ON","SHADOWS_CUBE","SHADOWS_DEPTH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_ALPHABLEND_ON","_ALPHAMODULATE_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_COLORADDSUBDIFF_ON","_COLORCOLOR_ON","_COLOROVERLAY_ON","_REQUIRE_UV2","__","_"],[[["__","INSTANCING_ON","PROCEDURAL_INSTANCING_ON"]],[["_","_ALPHATEST_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHAMODULATE_ON"]],[["_","_REQUIRE_UV2"]],[["SHADOWS_DEPTH"]],[["SHADOWS_CUBE"]]],2,0,9,0,1,0,1,[["IGNOREPROJECTOR","true"],["LIGHTMODE","SHADOWCASTER"],["PerformanceChecks","False"],["PreviewType","Plane"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],null,"",33,-1],["Particles/Standard Unlit",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout highp vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,0,2,0,[],[["IGNOREPROJECTOR","true"],["PerformanceChecks","False"],["PreviewType","Plane"],["RenderType","Opaque"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout highp vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nbool u_xlatb3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_6;\nfloat u_xlat7;\nmediump float u_xlat16_12;\nvoid main()\n{\n    u_xlat16_0.w = (-vs_COLOR0.x);\n    u_xlatb1 = vs_COLOR0.y>=vs_COLOR0.z;\n    u_xlat16_2.xy = (-vs_COLOR0.zy) + vs_COLOR0.yz;\n    u_xlat16_2.z = float(1.0);\n    u_xlat16_2.w = float(-1.0);\n    u_xlat16_1 = (bool(u_xlatb1)) ? u_xlat16_2 : vec4(0.0, 0.0, 0.0, -0.0);\n    u_xlat16_2.zw = u_xlat16_1.zw + vec2(-1.0, 0.666666687);\n    u_xlat16_2.xy = u_xlat16_1.xy + vs_COLOR0.zy;\n    u_xlat16_0.xyz = (-u_xlat16_2.xyw);\n    u_xlat16_1.yzw = u_xlat16_0.yzw + u_xlat16_2.yzx;\n    u_xlat16_1.x = u_xlat16_0.x + vs_COLOR0.x;\n    u_xlatb3 = vs_COLOR0.x>=u_xlat16_2.x;\n    u_xlat16_0 = (bool(u_xlatb3)) ? u_xlat16_1 : vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat16_12 = u_xlat16_0.w + vs_COLOR0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.x = min(u_xlat16_0.y, u_xlat16_12);\n    u_xlat16_4.x = (-u_xlat16_0.y) + u_xlat16_12;\n    u_xlat16_12 = u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_2.x = u_xlat16_12 * 6.0 + 9.99999975e-05;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_2.x;\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_0.z;\n    u_xlat16_0.x = u_xlat16_0.x + 9.99999975e-05;\n    u_xlat16_0.x = u_xlat16_12 / u_xlat16_0.x;\n    u_xlat16_4.xyz = abs(u_xlat16_4.xxx) + vec3(1.0, 0.666666687, 0.333333343);\n    u_xlat16_4.xyz = fract(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(6.0, 6.0, 6.0) + vec3(-3.0, -3.0, -3.0);\n    u_xlat16_4.xyz = abs(u_xlat16_4.xyz) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD1.xy);\n    u_xlat16_2 = u_xlat16_1 * _Color;\n    u_xlatb3 = u_xlat16_2.y>=u_xlat16_2.z;\n    u_xlat16_12 = (u_xlatb3) ? 1.0 : 0.0;\n    u_xlat16_6 = u_xlat16_1.y * _Color.y + (-u_xlat16_2.z);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_6 + u_xlat16_2.z;\n    u_xlatb3 = u_xlat16_2.x>=u_xlat16_12;\n    u_xlat7 = u_xlat16_2.w * vs_COLOR0.w;\n    SV_Target0.w = u_xlat7;\n    u_xlat16_2.x = (u_xlatb3) ? 1.0 : 0.0;\n    u_xlat16_6 = u_xlat16_1.x * _Color.x + (-u_xlat16_12);\n    u_xlat16_12 = u_xlat16_2.x * u_xlat16_6 + u_xlat16_12;\n    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_12);\n    return;\n}\n\n",0,0,0,2,0,["_ALPHABLEND_ON","_COLORCOLOR_ON"],[["IGNOREPROJECTOR","true"],["PerformanceChecks","False"],["PreviewType","Plane"],["RenderType","Opaque"]]]],["EFFECT_BUMP","FOG_EXP","FOG_EXP2","FOG_LINEAR","INSTANCING_ON","PROCEDURAL_INSTANCING_ON","SOFTPARTICLES_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_ALPHABLEND_ON","_ALPHAMODULATE_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_COLORADDSUBDIFF_ON","_COLORCOLOR_ON","_COLOROVERLAY_ON","_EMISSION","_FADING_ON","_NORMALMAP","_REQUIRE_UV2","__","_"],[[["__","INSTANCING_ON","PROCEDURAL_INSTANCING_ON"]],[["_","_REQUIRE_UV2"]]],0,0,9,0,2,0,4,[["IGNOREPROJECTOR","true"],["PerformanceChecks","False"],["PreviewType","Plane"],["RenderType","Opaque"]],null,"",33,-1]],[["IGNOREPROJECTOR","true"],["PerformanceChecks","False"],["PreviewType","Plane"],["RenderType","Opaque"]],0]],0,176,"Resources/unity_builtin_extra",["SHADOWS_DEPTH","_ALPHABLEND_ON","_ALPHAMODULATE_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_COLORADDSUBDIFF_ON","_COLORCOLOR_ON","_COLOROVERLAY_ON","_REQUIRE_UV2","FOG_EXP","FOG_EXP2","FOG_LINEAR","_EMISSION","_FADING_ON","_NORMALMAP","INSTANCING_ON","PROCEDURAL_INSTANCING_ON","SHADOWS_CUBE","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__","_","EFFECT_BUMP","SOFTPARTICLES_ON"],0,70,[],9],[[[0,[["Sprites/Default",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_0.xyz;\n    SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n",0,0,0,0,0,[],[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat0.xy = u_xlat0.xy * u_xlat1.xy;\n    u_xlat0.xy = roundEven(u_xlat0.xy);\n    u_xlat0.xy = u_xlat0.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat0.ww * u_xlat0.xy;\n    gl_Position.zw = u_xlat0.zw;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_0.xyz;\n    SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n",0,0,1,0,0,["PIXELSNAP_ON"],[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]]]],["ETC1_EXTERNAL_ALPHA","INSTANCING_ON","PIXELSNAP_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_","__"],[[["_","ETC1_EXTERNAL_ALPHA"]],[["__","INSTANCING_ON"]],[["_","PIXELSNAP_ON"]]],0,0,9,0,0,0,0,[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]],null,"",1,-1]],[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]],0]],0,28,"Resources/unity_builtin_extra",["PIXELSNAP_ON","ETC1_EXTERNAL_ALPHA","INSTANCING_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_","__"],null,null,[],9],[[[0,[["Standard",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat16_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat16_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,0,0,0,["DIRECTIONAL"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat16_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,1,0,0,["DIRECTIONAL","LIGHTPROBE_SH"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nmediump float u_xlat16_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat16_4.x;\n    u_xlat16_37 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat4.x = inversesqrt(u_xlat4.x);\n        u_xlat4.xyz = u_xlat4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat16_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat5.xyz = vec3(u_xlat40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat16_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat16_5.xyz * vec3(u_xlat16_39);\n        u_xlat4.xyz = vec3(u_xlat16_43) * u_xlat16_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,2,0,0,["DIRECTIONAL","SHADOWS_SCREEN"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2 = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat4.zz + u_xlat4.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump float u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec4 u_xlat16_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump float u_xlat16_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_17 = texture(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat16_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat16_17;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat17.xyz = exp2(u_xlat17.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat17.xyz = max(u_xlat17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat39 = inversesqrt(u_xlat39);\n        u_xlat5.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat16_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat39 = inversesqrt(u_xlat39);\n            u_xlat9.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat16_9 = textureLod(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat16_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat16_9.xyz * vec3(u_xlat16_42);\n        u_xlat5.xyz = vec3(u_xlat16_46) * u_xlat16_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,3,0,0,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat16_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat16_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,4,0,0,["DIRECTIONAL","VERTEXLIGHT_ON"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n    u_xlat3 = u_xlat1.yyyy * u_xlat2;\n    u_xlat2 = u_xlat2 * u_xlat2;\n    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;\n    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;\n    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;\n    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;\n    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;\n    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat2);\n    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;\n    u_xlat0 = u_xlat0 * u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat2 * u_xlat0;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat16_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,5,0,0,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nmediump float u_xlat16_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat16_4.x;\n    u_xlat16_37 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat4.x = inversesqrt(u_xlat4.x);\n        u_xlat4.xyz = u_xlat4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat16_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat5.xyz = vec3(u_xlat40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat16_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat16_5.xyz * vec3(u_xlat16_39);\n        u_xlat4.xyz = vec3(u_xlat16_43) * u_xlat16_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,6,0,0,["DIRECTIONAL","SHADOWS_SCREEN","VERTEXLIGHT_ON"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat25;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat4 = u_xlat2.yyyy * u_xlat3;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;\n    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;\n    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;\n    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;\n    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;\n    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat3);\n    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;\n    u_xlat1 = u_xlat1 * u_xlat4;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat1 = u_xlat3 * u_xlat1;\n    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;\n    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;\n    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;\n    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);\n    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;\n    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump float u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec4 u_xlat16_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump float u_xlat16_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_17 = texture(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat16_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat16_17;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat17.xyz = exp2(u_xlat17.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat17.xyz = max(u_xlat17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat39 = inversesqrt(u_xlat39);\n        u_xlat5.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat16_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat39 = inversesqrt(u_xlat39);\n            u_xlat9.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat16_9 = textureLod(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat16_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat16_9.xyz * vec3(u_xlat16_42);\n        u_xlat5.xyz = vec3(u_xlat16_46) * u_xlat16_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,7,0,0,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN","VERTEXLIGHT_ON"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat16_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat16_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,0,0,0,["DIRECTIONAL","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat16_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,1,0,0,["DIRECTIONAL","LIGHTPROBE_SH","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(5) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nmediump float u_xlat16_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat16_4.x;\n    u_xlat16_37 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat4.x = inversesqrt(u_xlat4.x);\n        u_xlat4.xyz = u_xlat4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat16_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat5.xyz = vec3(u_xlat40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat16_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat16_5.xyz * vec3(u_xlat16_39);\n        u_xlat4.xyz = vec3(u_xlat16_43) * u_xlat16_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,2,0,0,["DIRECTIONAL","SHADOWS_SCREEN","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2 = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat4.zz + u_xlat4.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(5) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump float u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec4 u_xlat16_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump float u_xlat16_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_17 = texture(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat16_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat16_17;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat17.xyz = exp2(u_xlat17.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat17.xyz = max(u_xlat17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat39 = inversesqrt(u_xlat39);\n        u_xlat5.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat16_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat39 = inversesqrt(u_xlat39);\n            u_xlat9.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat16_9 = textureLod(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat16_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat16_9.xyz * vec3(u_xlat16_42);\n        u_xlat5.xyz = vec3(u_xlat16_46) * u_xlat16_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,3,0,0,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat16_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat16_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,4,0,0,["DIRECTIONAL","VERTEXLIGHT_ON","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n    u_xlat3 = u_xlat1.yyyy * u_xlat2;\n    u_xlat2 = u_xlat2 * u_xlat2;\n    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;\n    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;\n    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;\n    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;\n    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;\n    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat2);\n    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;\n    u_xlat0 = u_xlat0 * u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat2 * u_xlat0;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat16_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,5,0,0,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(5) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nmediump float u_xlat16_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat16_4.x;\n    u_xlat16_37 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat4.x = inversesqrt(u_xlat4.x);\n        u_xlat4.xyz = u_xlat4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat16_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat5.xyz = vec3(u_xlat40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat16_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat16_5.xyz * vec3(u_xlat16_39);\n        u_xlat4.xyz = vec3(u_xlat16_43) * u_xlat16_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,6,0,0,["DIRECTIONAL","SHADOWS_SCREEN","VERTEXLIGHT_ON","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat25;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat4 = u_xlat2.yyyy * u_xlat3;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;\n    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;\n    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;\n    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;\n    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;\n    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat3);\n    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;\n    u_xlat1 = u_xlat1 * u_xlat4;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat1 = u_xlat3 * u_xlat1;\n    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;\n    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;\n    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;\n    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);\n    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;\n    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(5) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump float u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec4 u_xlat16_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump float u_xlat16_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_17 = texture(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat16_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat16_17;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat17.xyz = exp2(u_xlat17.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat17.xyz = max(u_xlat17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat39 = inversesqrt(u_xlat39);\n        u_xlat5.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat16_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat39 = inversesqrt(u_xlat39);\n            u_xlat9.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat16_9 = textureLod(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat16_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat16_9.xyz * vec3(u_xlat16_42);\n        u_xlat5.xyz = vec3(u_xlat16_46) * u_xlat16_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,7,0,0,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN","VERTEXLIGHT_ON","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]]],["DIRECTIONAL","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","FOG_EXP","FOG_EXP2","FOG_LINEAR","INSTANCING_ON","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","VERTEXLIGHT_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_DETAIL_MULX2","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_NORMALMAP","_PARALLAXMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A","_SPECULARHIGHLIGHTS_OFF","__","_"],[[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"]],[["__","INSTANCING_ON"]],[["_","_NORMALMAP"]],[["_","_ALPHATEST_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON"]],[["_","_METALLICGLOSSMAP"]],[["_","_PARALLAXMAP"]],[["DIRECTIONAL"]],[["DIRECTIONAL","LIGHTPROBE_SH"]],[["DIRECTIONAL","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"]],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON"]],[["DIRECTIONAL","LIGHTMAP_ON"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON"]],[["DIRECTIONAL","LIGHTMAP_ON","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","SHADOWS_SCREEN"]],[["DIRECTIONAL","SHADOWS_SCREEN","LIGHTPROBE_SH"]],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"]],[["DIRECTIONAL","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"]],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","VERTEXLIGHT_ON"]],[["DIRECTIONAL","VERTEXLIGHT_ON","LIGHTPROBE_SH"]],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON"]],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","LIGHTPROBE_SH"]],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"]],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"]],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]]],83,0,9,0,0,0,0,[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],null,"",227,-1],["Standard",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec3 vs_TEXCOORD6;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7 * u_xlat7;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_11.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb14 = u_xlat16_5.x!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat3.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat14 = texture(_LightTexture0, vec2(u_xlat14)).x;\n    u_xlat16_5.xyz = vec3(u_xlat14) * _LightColor0.xyz;\n    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_11.xyz;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat22 + u_xlat22;\n    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat7 + -0.5;\n    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x + 1.0;\n    u_xlat16_18 = (-u_xlat1.x) + 1.0;\n    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_18 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat7 = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = vec3(u_xlat7) * u_xlat16_5.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,0,1,0,["POINT"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nfloat u_xlat19;\nbool u_xlatb19;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;\n    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat19 = max(u_xlat19, 0.00100000005);\n    u_xlat19 = inversesqrt(u_xlat19);\n    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;\n    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat12 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat12 * u_xlat12;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat7 = u_xlat1.x * u_xlat1.x;\n    u_xlat13 = u_xlat19 * u_xlat7 + (-u_xlat19);\n    u_xlat13 = u_xlat13 * u_xlat19 + 1.0;\n    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;\n    u_xlat7 = u_xlat7 * 0.318309873;\n    u_xlat7 = u_xlat7 / u_xlat13;\n    u_xlat13 = (-u_xlat1.x) + 1.0;\n    u_xlat19 = abs(u_xlat18) * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat18) * u_xlat1.x;\n    u_xlat16_4.x = -abs(u_xlat18) + 1.0;\n    u_xlat18 = u_xlat0.x * u_xlat19 + u_xlat1.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat18 = u_xlat7 * u_xlat18;\n    u_xlat18 = u_xlat18 * 3.14159274;\n    u_xlat18 = max(u_xlat18, 9.99999975e-05);\n    u_xlat18 = sqrt(u_xlat18);\n    u_xlat18 = u_xlat0.x * u_xlat18;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_10.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_10.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n    u_xlatb19 = u_xlat16_5.x!=0.0;\n    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);\n    u_xlat18 = u_xlat18 * u_xlat19;\n    u_xlat2.xyz = vec3(u_xlat18) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat6) + 1.0;\n    u_xlat16_11.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = (-u_xlat16_10.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_11.xyz * u_xlat16_5.xxx + u_xlat16_10.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_10.xyz;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat16_10.x = u_xlat6 + u_xlat6;\n    u_xlat16_10.x = u_xlat6 * u_xlat16_10.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat12 + -0.5;\n    u_xlat16_4.x = u_xlat16_10.x * u_xlat16_4.x + 1.0;\n    u_xlat16_16 = (-u_xlat0.x) + 1.0;\n    u_xlat16_22 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_22;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_16 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,1,1,0,["DIRECTIONAL"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD6;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;\nUNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7 * u_xlat7;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_23 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat3.xyz = u_xlat16_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7 + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat7 = u_xlat1.x * u_xlat16_23;\n    u_xlat16_2.xyz = vec3(u_xlat7) * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat3.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,2,1,0,["SPOT"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec3 vs_TEXCOORD6;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;\nUNITY_LOCATION(2) uniform highp samplerCube _LightTexture0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat9;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat16;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nfloat u_xlat23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat21)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat7;\n    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat23 = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7 * u_xlat7;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat9 = u_xlat14 * u_xlat14;\n    u_xlat16 = u_xlat21 * u_xlat9 + (-u_xlat21);\n    u_xlat21 = u_xlat16 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat21 = u_xlat9 / u_xlat21;\n    u_xlat9 = (-u_xlat14) + 1.0;\n    u_xlat16 = abs(u_xlat0.x) * u_xlat9 + u_xlat14;\n    u_xlat14 = u_xlat2.x * u_xlat9 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_22 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat2.x * u_xlat16 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat2.x * u_xlat0.x;\n    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat3.xyz = u_xlat16_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat23) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat23 + u_xlat23;\n    u_xlat16_5.x = u_xlat23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7 + -0.5;\n    u_xlat16_22 = u_xlat16_5.x * u_xlat16_22 + 1.0;\n    u_xlat16_12 = (-u_xlat2.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;\n    u_xlat7 = u_xlat2.x * u_xlat16_22;\n    u_xlat16_1.xyz = vec3(u_xlat7) * u_xlat16_1.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat3.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,3,1,0,["POINT_COOKIE"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec2 vs_TEXCOORD6;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_4.x = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_11.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb22 = u_xlat16_5.x!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat2.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat2.xy;\n    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat22 = texture(_LightTexture0, u_xlat2.xy).w;\n    u_xlat16_5.xyz = vec3(u_xlat22) * _LightColor0.xyz;\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat16_5.xyz;\n    u_xlat16_26 = (-u_xlat7) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_11.xyz;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat7 + u_xlat7;\n    u_xlat16_11.x = u_xlat7 * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat14 + -0.5;\n    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x + 1.0;\n    u_xlat16_18 = (-u_xlat0.x) + 1.0;\n    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_18 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,4,1,0,["DIRECTIONAL_COOKIE"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD6;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;\nUNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;\nUNITY_LOCATION(3) uniform highp sampler2D _ShadowMapTexture;\nUNITY_LOCATION(4) uniform highp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nfloat u_xlat8;\nmediump float u_xlat16_9;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat7.xyz = u_xlat1.xyz / u_xlat1.www;\n    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);\n    u_xlat7.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);\n    u_xlat14 = (-_LightShadowData.x) + 1.0;\n    u_xlat7.x = u_xlat7.x * u_xlat14 + _LightShadowData.x;\n    u_xlat16_2.x = (-u_xlat7.x) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat7.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_9 = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_9 = u_xlat21 * u_xlat16_9;\n    u_xlat16_9 = u_xlat0.x * u_xlat16_9;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_23 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat3.xyz = u_xlat16_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat7.x = u_xlat1.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat7.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat3.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,5,1,0,["SHADOWS_DEPTH","SPOT"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD7;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump float u_xlat16_7;\nfloat u_xlat8;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_7 = texture(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_2.x = (-u_xlat16_7) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat16_7;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_23 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_26!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_26 = (-u_xlat7.x) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,7,1,0,["DIRECTIONAL","SHADOWS_SCREEN"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec2 vs_TEXCOORD6;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nbool u_xlatb2;\nvec4 u_xlat3;\nfloat u_xlat14;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    u_xlatb2 = _UVSec==0.0;\n    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;\n    vs_TEXCOORD1.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat3.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xyz;\n    u_xlat3.w = 0.0;\n    vs_TEXCOORD2 = u_xlat3.wwwx;\n    vs_TEXCOORD3 = u_xlat3.wwwy;\n    vs_TEXCOORD4.w = u_xlat3.z;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat14 = inversesqrt(u_xlat14);\n    vs_TEXCOORD4.xyz = vec3(u_xlat14) * u_xlat2.xyz;\n    u_xlat2.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat1.zw;\n    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD7;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump float u_xlat16_7;\nfloat u_xlat8;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_7 = texture(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_2.x = (-u_xlat16_7) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat16_7;\n    u_xlat0.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;\n    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;\n    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_23 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_26!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_26 = (-u_xlat7.x) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,8,1,0,["DIRECTIONAL_COOKIE","SHADOWS_SCREEN"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]]],["DIRECTIONAL","DIRECTIONAL_COOKIE","FOG_EXP","FOG_EXP2","FOG_LINEAR","LIGHTMAP_SHADOW_MIXING","POINT","POINT_COOKIE","SHADOWS_CUBE","SHADOWS_DEPTH","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","SHADOWS_SOFT","SPOT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_DETAIL_MULX2","_METALLICGLOSSMAP","_NORMALMAP","_PARALLAXMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A","_SPECULARHIGHLIGHTS_OFF","__","_"],[[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"]],[["_","_NORMALMAP"]],[["_","_ALPHATEST_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON"]],[["_","_METALLICGLOSSMAP"]],[["_","_PARALLAXMAP"]],[["POINT"]],[["DIRECTIONAL"]],[["SPOT"]],[["POINT_COOKIE"]],[["DIRECTIONAL_COOKIE"]],[["POINT","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","SHADOWS_SHADOWMASK"]],[["SPOT","SHADOWS_SHADOWMASK"]],[["POINT_COOKIE","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL_COOKIE","SHADOWS_SHADOWMASK"]],[["POINT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["SPOT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["POINT_COOKIE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL_COOKIE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["SPOT","SHADOWS_DEPTH"]],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT"]],[["SPOT","SHADOWS_DEPTH","LIGHTMAP_SHADOW_MIXING"]],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT","LIGHTMAP_SHADOW_MIXING"]],[["SPOT","SHADOWS_DEPTH","SHADOWS_SHADOWMASK"]],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT","SHADOWS_SHADOWMASK"]],[["SPOT","SHADOWS_DEPTH","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","SHADOWS_SCREEN"]],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN"]],[["DIRECTIONAL","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["POINT","SHADOWS_CUBE"]],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT"]],[["POINT","SHADOWS_CUBE","LIGHTMAP_SHADOW_MIXING"]],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT","LIGHTMAP_SHADOW_MIXING"]],[["POINT","SHADOWS_CUBE","SHADOWS_SHADOWMASK"]],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK"]],[["POINT","SHADOWS_CUBE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["POINT_COOKIE","SHADOWS_CUBE"]],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT"]],[["POINT_COOKIE","SHADOWS_CUBE","LIGHTMAP_SHADOW_MIXING"]],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT","LIGHTMAP_SHADOW_MIXING"]],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SHADOWMASK"]],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK"]],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]]],47,0,9,0,1,0,1,[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],null,"",227,-1],["Standard",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n",0,0,0,2,0,["SHADOWS_DEPTH"],[["LIGHTMODE","SHADOWCASTER"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]]],["INSTANCING_ON","SHADOWS_CUBE","SHADOWS_DEPTH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_METALLICGLOSSMAP","_PARALLAXMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A","__","_"],[[["__","INSTANCING_ON"]],[["_","_ALPHATEST_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON"]],[["_","_METALLICGLOSSMAP"]],[["_","_PARALLAXMAP"]],[["SHADOWS_DEPTH"]],[["SHADOWS_CUBE"]]],2,0,9,0,2,0,2,[["LIGHTMODE","SHADOWCASTER"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],null,"",227,-1]],[["PerformanceChecks","False"],["RenderType","Opaque"]],0],[1,[["Standard",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump float u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat16;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n    u_xlat16_1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * 6.0;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;\n    u_xlat16_9.xyz = u_xlat2.xyz * (-u_xlat16_9.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_1.x);\n    u_xlat16_3.x = u_xlat16_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;\n    u_xlat16_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n    u_xlat16 = u_xlat0.x;\n    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x = u_xlat0.x * 16.0;\n    u_xlat16_27 = (-u_xlat16) + 1.0;\n    u_xlat8 = u_xlat16_27 * u_xlat16_27;\n    u_xlat8 = u_xlat16_27 * u_xlat8;\n    u_xlat8 = u_xlat16_27 * u_xlat8;\n    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    u_xlat16_29 = u_xlat16_29 + _Glossiness;\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-u_xlat16_6.xyz);\n    u_xlat16_7.xyz = vec3(u_xlat8) * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,0,0,1,["DIRECTIONAL"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump float u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat20;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n    u_xlat16_1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * 6.0;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat2.xyz * (-u_xlat16_11.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_1.x);\n    u_xlat16_3.x = u_xlat16_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;\n    u_xlat16_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_0) * vs_TEXCOORD5.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n    u_xlat20 = u_xlat0.x;\n    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x = u_xlat0.x * 16.0;\n    u_xlat16_33 = (-u_xlat20) + 1.0;\n    u_xlat10 = u_xlat16_33 * u_xlat16_33;\n    u_xlat10 = u_xlat16_33 * u_xlat10;\n    u_xlat10 = u_xlat16_33 * u_xlat10;\n    u_xlat16_33 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_34 = (-u_xlat16_33) + 1.0;\n    u_xlat16_34 = u_xlat16_34 + _Glossiness;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_7.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_33) * u_xlat2.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_9.xyz = vec3(u_xlat16_34) + (-u_xlat16_7.xyz);\n    u_xlat16_9.xyz = vec3(u_xlat10) * u_xlat16_9.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;\n    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,1,0,1,["DIRECTIONAL","LIGHTPROBE_SH"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nmediump float u_xlat16_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat16_4.x;\n    u_xlat16_37 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat4.x = inversesqrt(u_xlat4.x);\n        u_xlat4.xyz = u_xlat4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat16_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat5.xyz = vec3(u_xlat40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat16_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat16_5.xyz * vec3(u_xlat16_39);\n        u_xlat4.xyz = vec3(u_xlat16_43) * u_xlat16_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,2,0,1,["DIRECTIONAL","SHADOWS_SCREEN"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2 = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat4.zz + u_xlat4.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump float u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec4 u_xlat16_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump float u_xlat16_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_17 = texture(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat16_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat16_17;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat17.xyz = exp2(u_xlat17.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat17.xyz = max(u_xlat17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat39 = inversesqrt(u_xlat39);\n        u_xlat5.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat16_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat39 = inversesqrt(u_xlat39);\n            u_xlat9.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat16_9 = textureLod(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat16_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat16_9.xyz * vec3(u_xlat16_42);\n        u_xlat5.xyz = vec3(u_xlat16_46) * u_xlat16_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,3,0,1,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump float u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat16;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n    u_xlat16_1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * 6.0;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;\n    u_xlat16_9.xyz = u_xlat2.xyz * (-u_xlat16_9.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_1.x);\n    u_xlat16_3.x = u_xlat16_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;\n    u_xlat16_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n    u_xlat16 = u_xlat0.x;\n    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x = u_xlat0.x * 16.0;\n    u_xlat16_27 = (-u_xlat16) + 1.0;\n    u_xlat8 = u_xlat16_27 * u_xlat16_27;\n    u_xlat8 = u_xlat16_27 * u_xlat8;\n    u_xlat8 = u_xlat16_27 * u_xlat8;\n    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    u_xlat16_29 = u_xlat16_29 + _Glossiness;\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-u_xlat16_6.xyz);\n    u_xlat16_7.xyz = vec3(u_xlat8) * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,4,0,1,["DIRECTIONAL","VERTEXLIGHT_ON"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    vs_TEXCOORD1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;\n    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n    u_xlat4 = u_xlat1.yyyy * u_xlat3;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;\n    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;\n    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat2;\n    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat3;\n    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat2);\n    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;\n    u_xlat0 = u_xlat0 * u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat2 * u_xlat0;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_5.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump float u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat20;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n    u_xlat16_1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * 6.0;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat2.xyz * (-u_xlat16_11.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_1.x);\n    u_xlat16_3.x = u_xlat16_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;\n    u_xlat16_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_0) * vs_TEXCOORD5.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n    u_xlat20 = u_xlat0.x;\n    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x = u_xlat0.x * 16.0;\n    u_xlat16_33 = (-u_xlat20) + 1.0;\n    u_xlat10 = u_xlat16_33 * u_xlat16_33;\n    u_xlat10 = u_xlat16_33 * u_xlat10;\n    u_xlat10 = u_xlat16_33 * u_xlat10;\n    u_xlat16_33 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_34 = (-u_xlat16_33) + 1.0;\n    u_xlat16_34 = u_xlat16_34 + _Glossiness;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_7.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_33) * u_xlat2.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_9.xyz = vec3(u_xlat16_34) + (-u_xlat16_7.xyz);\n    u_xlat16_9.xyz = vec3(u_xlat10) * u_xlat16_9.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;\n    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,5,0,1,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nmediump float u_xlat16_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat16_4.x;\n    u_xlat16_37 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat4.x = inversesqrt(u_xlat4.x);\n        u_xlat4.xyz = u_xlat4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat16_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat5.xyz = vec3(u_xlat40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat16_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat16_5.xyz * vec3(u_xlat16_39);\n        u_xlat4.xyz = vec3(u_xlat16_43) * u_xlat16_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,6,0,1,["DIRECTIONAL","SHADOWS_SCREEN","VERTEXLIGHT_ON"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat25;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat4 = u_xlat2.yyyy * u_xlat3;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;\n    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;\n    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;\n    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;\n    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;\n    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat3);\n    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;\n    u_xlat1 = u_xlat1 * u_xlat4;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat1 = u_xlat3 * u_xlat1;\n    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;\n    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;\n    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;\n    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);\n    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;\n    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump float u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec4 u_xlat16_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump float u_xlat16_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_17 = texture(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat16_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat16_17;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat17.xyz = exp2(u_xlat17.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat17.xyz = max(u_xlat17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat39 = inversesqrt(u_xlat39);\n        u_xlat5.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat16_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat39 = inversesqrt(u_xlat39);\n            u_xlat9.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat16_9 = textureLod(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat16_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat16_9.xyz * vec3(u_xlat16_42);\n        u_xlat5.xyz = vec3(u_xlat16_46) * u_xlat16_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,7,0,1,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN","VERTEXLIGHT_ON"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat16;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n    u_xlat16_1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * 6.0;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;\n    u_xlat16_9.xyz = u_xlat2.xyz * (-u_xlat16_9.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_1.x);\n    u_xlat16_3.x = u_xlat16_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;\n    u_xlat16_0.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n    u_xlat16 = u_xlat0.x;\n    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x = u_xlat0.x * 16.0;\n    u_xlat16_27 = (-u_xlat16) + 1.0;\n    u_xlat8 = u_xlat16_27 * u_xlat16_27;\n    u_xlat8 = u_xlat16_27 * u_xlat8;\n    u_xlat8 = u_xlat16_27 * u_xlat8;\n    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    u_xlat16_29 = u_xlat16_29 + _Glossiness;\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-u_xlat16_6.xyz);\n    u_xlat16_7.xyz = vec3(u_xlat8) * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,0,0,1,["DIRECTIONAL","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat20;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n    u_xlat16_1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * 6.0;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat2.xyz * (-u_xlat16_11.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_1.x);\n    u_xlat16_3.x = u_xlat16_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;\n    u_xlat16_0.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xxx * vs_TEXCOORD5.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n    u_xlat20 = u_xlat0.x;\n    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x = u_xlat0.x * 16.0;\n    u_xlat16_33 = (-u_xlat20) + 1.0;\n    u_xlat10 = u_xlat16_33 * u_xlat16_33;\n    u_xlat10 = u_xlat16_33 * u_xlat10;\n    u_xlat10 = u_xlat16_33 * u_xlat10;\n    u_xlat16_33 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_34 = (-u_xlat16_33) + 1.0;\n    u_xlat16_34 = u_xlat16_34 + _Glossiness;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_7.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_33) * u_xlat2.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_9.xyz = vec3(u_xlat16_34) + (-u_xlat16_7.xyz);\n    u_xlat16_9.xyz = vec3(u_xlat10) * u_xlat16_9.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;\n    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,1,0,1,["DIRECTIONAL","LIGHTPROBE_SH","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(5) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nmediump float u_xlat16_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat16_4.x;\n    u_xlat16_37 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat4.x = inversesqrt(u_xlat4.x);\n        u_xlat4.xyz = u_xlat4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat16_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat5.xyz = vec3(u_xlat40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat16_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat16_5.xyz * vec3(u_xlat16_39);\n        u_xlat4.xyz = vec3(u_xlat16_43) * u_xlat16_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,2,0,1,["DIRECTIONAL","SHADOWS_SCREEN","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2 = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat4.zz + u_xlat4.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(5) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump float u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec4 u_xlat16_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump float u_xlat16_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_17 = texture(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat16_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat16_17;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat17.xyz = exp2(u_xlat17.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat17.xyz = max(u_xlat17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat39 = inversesqrt(u_xlat39);\n        u_xlat5.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat16_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat39 = inversesqrt(u_xlat39);\n            u_xlat9.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat16_9 = textureLod(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat16_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat16_9.xyz * vec3(u_xlat16_42);\n        u_xlat5.xyz = vec3(u_xlat16_46) * u_xlat16_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,3,0,1,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat16;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n    u_xlat16_1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * 6.0;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;\n    u_xlat16_9.xyz = u_xlat2.xyz * (-u_xlat16_9.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_1.x);\n    u_xlat16_3.x = u_xlat16_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;\n    u_xlat16_0.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n    u_xlat16 = u_xlat0.x;\n    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x = u_xlat0.x * 16.0;\n    u_xlat16_27 = (-u_xlat16) + 1.0;\n    u_xlat8 = u_xlat16_27 * u_xlat16_27;\n    u_xlat8 = u_xlat16_27 * u_xlat8;\n    u_xlat8 = u_xlat16_27 * u_xlat8;\n    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    u_xlat16_29 = u_xlat16_29 + _Glossiness;\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-u_xlat16_6.xyz);\n    u_xlat16_7.xyz = vec3(u_xlat8) * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,4,0,1,["DIRECTIONAL","VERTEXLIGHT_ON","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    vs_TEXCOORD1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;\n    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n    u_xlat4 = u_xlat1.yyyy * u_xlat3;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;\n    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;\n    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat2;\n    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat3;\n    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat2);\n    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;\n    u_xlat0 = u_xlat0 * u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat2 * u_xlat0;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_5.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat20;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n    u_xlat16_1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * 6.0;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat2.xyz * (-u_xlat16_11.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_1.x);\n    u_xlat16_3.x = u_xlat16_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;\n    u_xlat16_0.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xxx * vs_TEXCOORD5.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n    u_xlat20 = u_xlat0.x;\n    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x = u_xlat0.x * 16.0;\n    u_xlat16_33 = (-u_xlat20) + 1.0;\n    u_xlat10 = u_xlat16_33 * u_xlat16_33;\n    u_xlat10 = u_xlat16_33 * u_xlat10;\n    u_xlat10 = u_xlat16_33 * u_xlat10;\n    u_xlat16_33 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_34 = (-u_xlat16_33) + 1.0;\n    u_xlat16_34 = u_xlat16_34 + _Glossiness;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_7.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_33) * u_xlat2.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_9.xyz = vec3(u_xlat16_34) + (-u_xlat16_7.xyz);\n    u_xlat16_9.xyz = vec3(u_xlat10) * u_xlat16_9.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;\n    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,5,0,1,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(5) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nmediump float u_xlat16_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_4.x = texture(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat16_4.x;\n    u_xlat16_37 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat4.x = inversesqrt(u_xlat4.x);\n        u_xlat4.xyz = u_xlat4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat16_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat5.xyz = vec3(u_xlat40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat16_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat16_5.xyz * vec3(u_xlat16_39);\n        u_xlat4.xyz = vec3(u_xlat16_43) * u_xlat16_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,6,0,1,["DIRECTIONAL","SHADOWS_SCREEN","VERTEXLIGHT_ON","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat25;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat4 = u_xlat2.yyyy * u_xlat3;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;\n    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;\n    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;\n    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;\n    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;\n    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat3);\n    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;\n    u_xlat1 = u_xlat1 * u_xlat4;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat1 = u_xlat3 * u_xlat1;\n    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;\n    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;\n    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;\n    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);\n    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;\n    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(5) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD7;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump float u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec4 u_xlat16_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump float u_xlat16_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_17 = texture(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat16_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat16_17;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat16_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat17.xyz = exp2(u_xlat17.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat17.xyz = max(u_xlat17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat39 = inversesqrt(u_xlat39);\n        u_xlat5.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat16_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat39 = inversesqrt(u_xlat39);\n            u_xlat9.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat16_9 = textureLod(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat16_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat16_9.xyz * vec3(u_xlat16_42);\n        u_xlat5.xyz = vec3(u_xlat16_46) * u_xlat16_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,7,0,1,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN","VERTEXLIGHT_ON","_EMISSION"],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]]],["DIRECTIONAL","DYNAMICLIGHTMAP_ON","FOG_EXP","FOG_EXP2","FOG_LINEAR","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","VERTEXLIGHT_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_NORMALMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A","_SPECULARHIGHLIGHTS_OFF","__","_"],[[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"]],[["_","_NORMALMAP"]],[["_","_ALPHATEST_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON"]],[["_","_METALLICGLOSSMAP"]],[["DIRECTIONAL"]],[["DIRECTIONAL","LIGHTPROBE_SH"]],[["DIRECTIONAL","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"]],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON"]],[["DIRECTIONAL","LIGHTMAP_ON"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON"]],[["DIRECTIONAL","LIGHTMAP_ON","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","SHADOWS_SCREEN"]],[["DIRECTIONAL","SHADOWS_SCREEN","LIGHTPROBE_SH"]],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"]],[["DIRECTIONAL","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"]],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","VERTEXLIGHT_ON"]],[["DIRECTIONAL","VERTEXLIGHT_ON","LIGHTPROBE_SH"]],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","LIGHTPROBE_SH"]],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"]],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"]],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]]],52,0,9,0,0,1,0,[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],null,"",1,-1],["Standard",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec3 vs_TEXCOORD6;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;\nUNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);\n    u_xlat15 = u_xlat15 + u_xlat15;\n    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat5.x = u_xlat15 * u_xlat15;\n    u_xlat1.x = u_xlat5.x * u_xlat5.x;\n    u_xlat1.y = (-_Glossiness) + 1.0;\n    u_xlat5.x = texture(unity_NHxRoughness, u_xlat1.xy).x;\n    u_xlat5.x = u_xlat5.x * 16.0;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;\n    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = texture(_LightTexture0, u_xlat5.xx).x;\n    u_xlat16_4.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,0,1,1,["POINT"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);\n    u_xlat15 = u_xlat15 + u_xlat15;\n    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = u_xlat15 * u_xlat15;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = (-_Glossiness) + 1.0;\n    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;\n    u_xlat0.x = u_xlat0.x * 16.0;\n    u_xlat16_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = _Color.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat5.xyz = u_xlat16_5.xyz * _Color.xyz;\n    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat16_18) + u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,1,1,1,["DIRECTIONAL"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD6;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;\nUNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;\nUNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec2 u_xlat5;\nbool u_xlatb10;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);\n    u_xlat15 = u_xlat15 + u_xlat15;\n    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat5.x = u_xlat15 * u_xlat15;\n    u_xlat1.x = u_xlat5.x * u_xlat5.x;\n    u_xlat1.y = (-_Glossiness) + 1.0;\n    u_xlat5.x = texture(unity_NHxRoughness, u_xlat1.xy).x;\n    u_xlat5.x = u_xlat5.x * 16.0;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat5.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);\n    u_xlat5.x = texture(_LightTexture0, u_xlat5.xy).w;\n    u_xlatb10 = 0.0<u_xlat1.z;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).x;\n    u_xlat16_18 = (u_xlatb10) ? 1.0 : 0.0;\n    u_xlat16_18 = u_xlat5.x * u_xlat16_18;\n    u_xlat16_18 = u_xlat15 * u_xlat16_18;\n    u_xlat16_4.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,2,1,1,["SPOT"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec3 vs_TEXCOORD6;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;\nUNITY_LOCATION(2) uniform highp samplerCube _LightTexture0;\nUNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nfloat u_xlat10;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);\n    u_xlat15 = u_xlat15 + u_xlat15;\n    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat5.x = u_xlat15 * u_xlat15;\n    u_xlat1.x = u_xlat5.x * u_xlat5.x;\n    u_xlat1.y = (-_Glossiness) + 1.0;\n    u_xlat5.x = texture(unity_NHxRoughness, u_xlat1.xy).x;\n    u_xlat5.x = u_xlat5.x * 16.0;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;\n    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = texture(_LightTexture0, u_xlat5.xyz).w;\n    u_xlat10 = texture(_LightTextureB0, u_xlat1.xx).x;\n    u_xlat5.x = u_xlat5.x * u_xlat10;\n    u_xlat16_4.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,3,1,1,["POINT_COOKIE"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec2 vs_TEXCOORD6;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;\nUNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec2 u_xlat5;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);\n    u_xlat15 = u_xlat15 + u_xlat15;\n    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat5.x = u_xlat15 * u_xlat15;\n    u_xlat1.x = u_xlat5.x * u_xlat5.x;\n    u_xlat1.y = (-_Glossiness) + 1.0;\n    u_xlat5.x = texture(unity_NHxRoughness, u_xlat1.xy).x;\n    u_xlat5.x = u_xlat5.x * 16.0;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;\n    u_xlat5.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat5.xy;\n    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat5.xy;\n    u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat5.x = texture(_LightTexture0, u_xlat5.xy).w;\n    u_xlat16_4.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,4,1,1,["DIRECTIONAL_COOKIE"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD6;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tvec4 _LightShadowData;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;\nUNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;\nUNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;\nUNITY_LOCATION(4) uniform highp sampler2D _ShadowMapTexture;\nUNITY_LOCATION(5) uniform highp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);\n    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);\n    u_xlat4.x = (-_LightShadowData.x) + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat4.x + _LightShadowData.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_2.xyz = vec3(u_xlat12) * u_xlat16_2.xyz;\n    u_xlat12 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);\n    u_xlat12 = u_xlat12 + u_xlat12;\n    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = (-_Glossiness) + 1.0;\n    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;\n    u_xlat0.x = u_xlat0.x * 16.0;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat16_14 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat16_14) + u_xlat16_3.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,5,1,1,["SHADOWS_DEPTH","SPOT"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD7;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump float u_xlat16_7;\nfloat u_xlat8;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_7 = texture(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_2.x = (-u_xlat16_7) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat16_7;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_23 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_26!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_26 = (-u_xlat7.x) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,6,1,1,["DIRECTIONAL","SHADOWS_SCREEN"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec2 vs_TEXCOORD6;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nbool u_xlatb2;\nvec4 u_xlat3;\nfloat u_xlat14;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    u_xlatb2 = _UVSec==0.0;\n    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;\n    vs_TEXCOORD1.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat3.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xyz;\n    u_xlat3.w = 0.0;\n    vs_TEXCOORD2 = u_xlat3.wwwx;\n    vs_TEXCOORD3 = u_xlat3.wwwy;\n    vs_TEXCOORD4.w = u_xlat3.z;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat14 = inversesqrt(u_xlat14);\n    vs_TEXCOORD4.xyz = vec3(u_xlat14) * u_xlat2.xyz;\n    u_xlat2.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat1.zw;\n    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD7;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump float u_xlat16_7;\nfloat u_xlat8;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat16_7 = texture(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_2.x = (-u_xlat16_7) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat16_7;\n    u_xlat0.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;\n    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;\n    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_23 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_26!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_26 = (-u_xlat7.x) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0,7,1,1,["DIRECTIONAL_COOKIE","SHADOWS_SCREEN"],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]]],["DIRECTIONAL","DIRECTIONAL_COOKIE","FOG_EXP","FOG_EXP2","FOG_LINEAR","LIGHTMAP_SHADOW_MIXING","POINT","POINT_COOKIE","SHADOWS_CUBE","SHADOWS_DEPTH","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","SPOT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_DETAIL_MULX2","_METALLICGLOSSMAP","_NORMALMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A","_SPECULARHIGHLIGHTS_OFF","__","_"],[[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"]],[["_","_NORMALMAP"]],[["_","_ALPHATEST_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON"]],[["_","_METALLICGLOSSMAP"]],[["POINT"]],[["DIRECTIONAL"]],[["SPOT"]],[["POINT_COOKIE"]],[["DIRECTIONAL_COOKIE"]],[["POINT","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","SHADOWS_SHADOWMASK"]],[["SPOT","SHADOWS_SHADOWMASK"]],[["POINT_COOKIE","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL_COOKIE","SHADOWS_SHADOWMASK"]],[["POINT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["SPOT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["POINT_COOKIE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL_COOKIE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["SPOT","SHADOWS_DEPTH"]],[["SPOT","SHADOWS_DEPTH","LIGHTMAP_SHADOW_MIXING"]],[["SPOT","SHADOWS_DEPTH","SHADOWS_SHADOWMASK"]],[["SPOT","SHADOWS_DEPTH","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","SHADOWS_SCREEN"]],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN"]],[["DIRECTIONAL","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"]],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["POINT","SHADOWS_CUBE"]],[["POINT","SHADOWS_CUBE","LIGHTMAP_SHADOW_MIXING"]],[["POINT","SHADOWS_CUBE","SHADOWS_SHADOWMASK"]],[["POINT","SHADOWS_CUBE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]],[["POINT_COOKIE","SHADOWS_CUBE"]],[["POINT_COOKIE","SHADOWS_CUBE","LIGHTMAP_SHADOW_MIXING"]],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SHADOWMASK"]],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"]]],35,0,9,0,1,1,1,[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],null,"",1,-1],["Standard",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n",0,0,0,2,1,["SHADOWS_DEPTH"],[["LIGHTMODE","SHADOWCASTER"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]]]],["SHADOWS_CUBE","SHADOWS_DEPTH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A","_"],[[["_","_ALPHATEST_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON"]],[["_","_METALLICGLOSSMAP"]],[["SHADOWS_DEPTH"]],[["SHADOWS_CUBE"]]],2,0,9,0,2,1,2,[["LIGHTMODE","SHADOWCASTER"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],null,"",1,-1]],[["PerformanceChecks","False"],["RenderType","Opaque"]],0]],0,66,"Resources/unity_builtin_extra",["DIRECTIONAL","DIRLIGHTMAP_COMBINED","FOG_EXP","FOG_EXP2","FOG_LINEAR","LIGHTMAP_ON","LIGHTPROBE_SH","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","VERTEXLIGHT_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_NORMALMAP","_PARALLAXMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A","_SPECULARHIGHLIGHTS_OFF","DIRECTIONAL_COOKIE","POINT","POINT_COOKIE","SHADOWS_DEPTH","SPOT","DYNAMICLIGHTMAP_ON","INSTANCING_ON","LIGHTMAP_SHADOW_MIXING","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_DETAIL_MULX2","__","_","SHADOWS_CUBE","SHADOWS_SOFT"],0,70,[],9],[[[0,[["TextMeshPro/Bitmap",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_FaceTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat0.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    SV_Target0.w = u_xlat16_0.x * vs_COLOR0.w;\n    return;\n}\n\n",0,0,0,0,0,[],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = vs_COLOR0.w * u_xlat16_0.x + -0.00100000005;\n    u_xlat16_3 = u_xlat16_0.x * vs_COLOR0.w;\n    SV_Target0.w = u_xlat16_3;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    u_xlat16_0.xyz = texture(_FaceTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat0.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n",0,0,1,0,0,["UNITY_UI_ALPHACLIP"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec2 u_xlat1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_FaceTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat0.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_2);\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_5 = u_xlat16_0.x * vs_COLOR0.w;\n    SV_Target0.w = u_xlat16_2 * u_xlat16_5;\n    return;\n}\n\n",0,0,2,0,0,["UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3 = u_xlat16_0.x * vs_COLOR0.w;\n    u_xlat16_5 = u_xlat16_3 * u_xlat16_1 + -0.00100000005;\n    u_xlat16_3 = u_xlat16_1 * u_xlat16_3;\n    SV_Target0.w = u_xlat16_3;\n    u_xlatb0 = u_xlat16_5<0.0;\n    if(u_xlatb0){discard;}\n    u_xlat16_0.xyz = texture(_FaceTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat0.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat0.xyz;\n    return;\n}\n\n",0,0,3,0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]]],["STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","UNITY_UI_CLIP_RECT"]],[["__","UNITY_UI_ALPHACLIP"]]],0,0,9,0,0,0,0,[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],null,"",33,-1]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],0]],0,424,"Assets/TextMesh Pro/Shaders/TMP_Bitmap.shader",["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],null,null,[],9],[[[0,[["TextMeshPro/Bitmap Custom Atlas",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = texture(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat16_0 * u_xlat16_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0,0,0,0,0,[],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = texture(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat16_0 * u_xlat16_1;\n    u_xlat16_2 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    u_xlatb0 = u_xlat16_2<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n",0,0,1,0,0,["UNITY_UI_ALPHACLIP"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec2 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = texture(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat16_0 * u_xlat16_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    SV_Target0 = u_xlat0 * vec4(u_xlat16_2);\n    return;\n}\n\n",0,0,2,0,0,["UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec2 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = texture(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat16_0 * u_xlat16_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_0 = u_xlat0 * vec4(u_xlat16_2);\n    SV_Target0 = u_xlat16_0;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n",0,0,3,0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]]],["STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","UNITY_UI_CLIP_RECT"]],[["__","UNITY_UI_ALPHACLIP"]]],0,0,9,0,0,0,0,[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],null,"",33,-1]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],0]],0,420,"Assets/TextMesh Pro/Shaders/TMP_Bitmap-Custom-Atlas.shader",["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],null,null,[],9],[[[0,[["TextMeshPro/Distance Field",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump vec4 u_xlat16_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4 = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n",0,0,0,0,0,[],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4 = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_3.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat5 = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n",0,0,1,0,0,["UNITY_UI_ALPHACLIP"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n",0,0,2,0,0,["UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n",0,0,3,0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]]],["BEVEL_ON","GLOW_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","BEVEL_ON"]],[["__","UNDERLAY_ON","UNDERLAY_INNER"]],[["__","GLOW_ON"]],[["__","UNITY_UI_CLIP_RECT"]],[["__","UNITY_UI_ALPHACLIP"]]],0,0,9,0,0,0,0,[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],null,"",227,-1]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],0]],0,416,"Assets/TextMesh Pro/Shaders/TMP_SDF.shader",["BEVEL_ON","GLOW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],0,408,[],9],[[[0,[["TextMeshPro/Distance Field (Surface)",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nin mediump vec4 in_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR0;\nout highp vec3 vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD7;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nmediump float u_xlat16_5;\nmediump vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal) + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 * _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.w = u_xlat1.y;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD4.z = u_xlat3.w;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat16_5 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);\n    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform \tmediump vec4 _ReflectOutlineColor;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nUNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(4) uniform mediump samplerCube _Cube;\nin highp vec4 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_COLOR0;\nin highp vec3 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD7;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump float u_xlat16_5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_11;\nvec3 u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nfloat u_xlat16;\nmediump vec2 u_xlat16_16;\nbool u_xlatb22;\nfloat u_xlat30;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nfloat u_xlat36;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD2.w;\n    u_xlat0.y = vs_TEXCOORD3.w;\n    u_xlat0.z = vs_TEXCOORD4.w;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = inversesqrt(u_xlat16_31);\n    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;\n    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;\n    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat2.z = 0.0;\n    u_xlat3 = (-u_xlat2.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat16_4.x = texture(_MainTex, u_xlat3.xy).w;\n    u_xlat16_4.z = texture(_MainTex, u_xlat3.zw).w;\n    u_xlat16_4.y = texture(_MainTex, u_xlat2.xy).w;\n    u_xlat16_4.w = texture(_MainTex, u_xlat2.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat16_4;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat2.x = _BevelWidth + _OutlineWidth;\n    u_xlat2.x = max(u_xlat2.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat2.xxxx;\n    u_xlat2.x = u_xlat2.x * _Bevel;\n    u_xlat2.x = u_xlat2.x * _GradientScale;\n    u_xlat2.x = u_xlat2.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat3 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat3 = -abs(u_xlat3) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat12.x = _ShaderFlags * 0.5;\n    u_xlatb22 = u_xlat12.x>=(-u_xlat12.x);\n    u_xlat12.x = fract(abs(u_xlat12.x));\n    u_xlat12.x = (u_xlatb22) ? u_xlat12.x : (-u_xlat12.x);\n    u_xlatb12 = u_xlat12.x>=0.5;\n    u_xlat0 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat0;\n    u_xlat3 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat3 = sin(u_xlat3);\n    u_xlat3 = (-u_xlat0) + u_xlat3;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat3 + u_xlat0;\n    u_xlat12.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat12.xxxx);\n    u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat2.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat30 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat3.x = u_xlat30 * u_xlat0.z;\n    u_xlat3.yz = vec2(u_xlat30) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz * u_xlat3.xyz;\n    u_xlat0.xyz = u_xlat3.zxy * u_xlat0.yzx + (-u_xlat2.xyz);\n    u_xlat16_30 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat30 = (-u_xlat16_30) + 0.5;\n    u_xlat30 = u_xlat30 + (-vs_TEXCOORD5.x);\n    u_xlat30 = u_xlat30 * vs_TEXCOORD5.y + 0.5;\n    u_xlat2.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_31 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_5 = min(u_xlat2.x, 1.0);\n    u_xlat16_5 = sqrt(u_xlat16_5);\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5;\n    u_xlat12.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat16_3 = texture(_OutlineTex, u_xlat12.xy);\n    u_xlat12.xyz = u_xlat16_3.xyz * _OutlineColor.xyz;\n    u_xlat3.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat13 = u_xlat16_3.w * u_xlat3.x;\n    u_xlat4.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat16_4 = texture(_FaceTex, u_xlat4.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat16_4 * u_xlat5;\n    u_xlat16_7.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat12.xyz * vec3(u_xlat13) + (-u_xlat16_7.xyz);\n    u_xlat16_7.w = u_xlat3.x * u_xlat16_3.w + (-u_xlat6.w);\n    u_xlat16_3 = vec4(u_xlat16_31) * u_xlat16_7;\n    u_xlat16_4.w = u_xlat5.w * u_xlat16_4.w + u_xlat16_3.w;\n    u_xlat16_4.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_3.xyz;\n    u_xlat16_31 = (-u_xlat2.x) * 0.5 + u_xlat30;\n    u_xlat30 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);\n    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat12.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_7.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_31 = u_xlat12.x * 0.5 + u_xlat16_31;\n    u_xlat16_31 = u_xlat16_31 / u_xlat16_7.x;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_2 = vec4(u_xlat16_31) * u_xlat16_4;\n    u_xlat6.x = (-_BumpFace) + _BumpOutline;\n    u_xlat6.x = u_xlat30 * u_xlat6.x + _BumpFace;\n    u_xlat16_16.xy = texture(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_7.xy = u_xlat16_16.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_31 = dot(u_xlat16_7.xy, u_xlat16_7.xy);\n    u_xlat16_31 = min(u_xlat16_31, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_7.z = sqrt(u_xlat16_31);\n    u_xlat6.xyz = u_xlat16_7.xyz * u_xlat6.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat6.xyz = u_xlat16_2.www * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);\n    u_xlat6.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xxx;\n    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat6.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat3.xyz = u_xlat6.xxx * u_xlat16_7.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_1.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat6.x = log2(u_xlat16_1.x);\n    u_xlat16 = (-_FaceShininess) + _OutlineShininess;\n    u_xlat16 = u_xlat30 * u_xlat16 + _FaceShininess;\n    u_xlat16_1.x = u_xlat16 * 128.0;\n    u_xlat6.x = u_xlat6.x * u_xlat16_1.x;\n    u_xlat6.x = exp2(u_xlat6.x);\n    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat6.xyz = u_xlat6.xxx * u_xlat16_1.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat36 = max(u_xlat16_2.w, 9.99999975e-05);\n    u_xlat8.xyz = u_xlat16_2.xyz / vec3(u_xlat36);\n    u_xlat16_11.xyz = u_xlat8.xyz * _LightColor0.xyz;\n    u_xlat6.xyz = u_xlat16_11.xyz * u_xlat16_1.xxx + u_xlat6.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_1.y = dot(unity_SHAg, u_xlat3);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat3);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat9.xyz = log2(u_xlat16_1.xyz);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat9.xyz = exp2(u_xlat9.xyz);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = u_xlat8.xyz * u_xlat9.xyz + u_xlat6.xyz;\n    u_xlat6.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;\n    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz + _ReflectFaceColor.xyz;\n    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat8.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat30 = dot(vs_TEXCOORD6.xyz, u_xlat0.xyz);\n    u_xlat30 = u_xlat30 + u_xlat30;\n    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + vs_TEXCOORD6.xyz;\n    u_xlat16_0.xyz = texture(_Cube, u_xlat0.xyz).xyz;\n    u_xlat0.xyz = u_xlat6.xyz * u_xlat16_0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.www + u_xlat16_1.xyz;\n    SV_Target0.w = u_xlat16_2.w;\n    return;\n}\n\n",0,0,0,0,0,["DIRECTIONAL"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDBASE"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nin mediump vec4 in_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR0;\nout highp vec3 vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD7;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nmediump float u_xlat16_5;\nmediump vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal) + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 * _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.w = u_xlat1.y;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD4.z = u_xlat3.w;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat16_5 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);\n    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform \tmediump vec4 _ReflectOutlineColor;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nUNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(4) uniform mediump samplerCube _Cube;\nin highp vec4 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_COLOR0;\nin highp vec3 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD7;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump float u_xlat16_5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_11;\nvec3 u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nfloat u_xlat16;\nmediump vec2 u_xlat16_16;\nbool u_xlatb22;\nfloat u_xlat30;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nfloat u_xlat36;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD2.w;\n    u_xlat0.y = vs_TEXCOORD3.w;\n    u_xlat0.z = vs_TEXCOORD4.w;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = inversesqrt(u_xlat16_31);\n    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;\n    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;\n    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat2.z = 0.0;\n    u_xlat3 = (-u_xlat2.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat16_4.x = texture(_MainTex, u_xlat3.xy).w;\n    u_xlat16_4.z = texture(_MainTex, u_xlat3.zw).w;\n    u_xlat16_4.y = texture(_MainTex, u_xlat2.xy).w;\n    u_xlat16_4.w = texture(_MainTex, u_xlat2.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat16_4;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat2.x = _BevelWidth + _OutlineWidth;\n    u_xlat2.x = max(u_xlat2.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat2.xxxx;\n    u_xlat2.x = u_xlat2.x * _Bevel;\n    u_xlat2.x = u_xlat2.x * _GradientScale;\n    u_xlat2.x = u_xlat2.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat3 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat3 = -abs(u_xlat3) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat12.x = _ShaderFlags * 0.5;\n    u_xlatb22 = u_xlat12.x>=(-u_xlat12.x);\n    u_xlat12.x = fract(abs(u_xlat12.x));\n    u_xlat12.x = (u_xlatb22) ? u_xlat12.x : (-u_xlat12.x);\n    u_xlatb12 = u_xlat12.x>=0.5;\n    u_xlat0 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat0;\n    u_xlat3 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat3 = sin(u_xlat3);\n    u_xlat3 = (-u_xlat0) + u_xlat3;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat3 + u_xlat0;\n    u_xlat12.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat12.xxxx);\n    u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat2.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat30 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat3.x = u_xlat30 * u_xlat0.z;\n    u_xlat3.yz = vec2(u_xlat30) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz * u_xlat3.xyz;\n    u_xlat0.xyz = u_xlat3.zxy * u_xlat0.yzx + (-u_xlat2.xyz);\n    u_xlat16_30 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat30 = (-u_xlat16_30) + 0.5;\n    u_xlat30 = u_xlat30 + (-vs_TEXCOORD5.x);\n    u_xlat30 = u_xlat30 * vs_TEXCOORD5.y + 0.5;\n    u_xlat2.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_31 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_5 = min(u_xlat2.x, 1.0);\n    u_xlat16_5 = sqrt(u_xlat16_5);\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5;\n    u_xlat12.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat16_3 = texture(_OutlineTex, u_xlat12.xy);\n    u_xlat12.xyz = u_xlat16_3.xyz * _OutlineColor.xyz;\n    u_xlat3.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat13 = u_xlat16_3.w * u_xlat3.x;\n    u_xlat4.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat16_4 = texture(_FaceTex, u_xlat4.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat16_4 * u_xlat5;\n    u_xlat16_7.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat12.xyz * vec3(u_xlat13) + (-u_xlat16_7.xyz);\n    u_xlat16_7.w = u_xlat3.x * u_xlat16_3.w + (-u_xlat6.w);\n    u_xlat16_3 = vec4(u_xlat16_31) * u_xlat16_7;\n    u_xlat16_4.w = u_xlat5.w * u_xlat16_4.w + u_xlat16_3.w;\n    u_xlat16_4.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_3.xyz;\n    u_xlat16_31 = (-u_xlat2.x) * 0.5 + u_xlat30;\n    u_xlat30 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);\n    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat12.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_7.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_31 = u_xlat12.x * 0.5 + u_xlat16_31;\n    u_xlat16_31 = u_xlat16_31 / u_xlat16_7.x;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_2 = vec4(u_xlat16_31) * u_xlat16_4;\n    u_xlat6.x = (-_BumpFace) + _BumpOutline;\n    u_xlat6.x = u_xlat30 * u_xlat6.x + _BumpFace;\n    u_xlat16_16.xy = texture(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_7.xy = u_xlat16_16.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_31 = dot(u_xlat16_7.xy, u_xlat16_7.xy);\n    u_xlat16_31 = min(u_xlat16_31, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_7.z = sqrt(u_xlat16_31);\n    u_xlat6.xyz = u_xlat16_7.xyz * u_xlat6.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat6.xyz = u_xlat16_2.www * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);\n    u_xlat6.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xxx;\n    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat6.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat3.xyz = u_xlat6.xxx * u_xlat16_7.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_1.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat6.x = log2(u_xlat16_1.x);\n    u_xlat16 = (-_FaceShininess) + _OutlineShininess;\n    u_xlat16 = u_xlat30 * u_xlat16 + _FaceShininess;\n    u_xlat16_1.x = u_xlat16 * 128.0;\n    u_xlat6.x = u_xlat6.x * u_xlat16_1.x;\n    u_xlat6.x = exp2(u_xlat6.x);\n    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat6.xyz = u_xlat6.xxx * u_xlat16_1.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat36 = max(u_xlat16_2.w, 9.99999975e-05);\n    u_xlat8.xyz = u_xlat16_2.xyz / vec3(u_xlat36);\n    u_xlat16_11.xyz = u_xlat8.xyz * _LightColor0.xyz;\n    u_xlat6.xyz = u_xlat16_11.xyz * u_xlat16_1.xxx + u_xlat6.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_1.y = dot(unity_SHAg, u_xlat3);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat3);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat9.xyz = log2(u_xlat16_1.xyz);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat9.xyz = exp2(u_xlat9.xyz);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = u_xlat8.xyz * u_xlat9.xyz + u_xlat6.xyz;\n    u_xlat6.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;\n    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz + _ReflectFaceColor.xyz;\n    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat8.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat30 = dot(vs_TEXCOORD6.xyz, u_xlat0.xyz);\n    u_xlat30 = u_xlat30 + u_xlat30;\n    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + vs_TEXCOORD6.xyz;\n    u_xlat16_0.xyz = texture(_Cube, u_xlat0.xyz).xyz;\n    u_xlat0.xyz = u_xlat6.xyz * u_xlat16_0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.www + u_xlat16_1.xyz;\n    SV_Target0.w = u_xlat16_2.w;\n    return;\n}\n\n",0,0,1,0,0,["DIRECTIONAL","LIGHTPROBE_SH"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDBASE"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nin mediump vec4 in_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR0;\nout highp vec3 vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD7;\nvec4 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal) + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 * _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD3.w = u_xlat1.y;\n    vs_TEXCOORD4.z = u_xlat3.w;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat0 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat2 = u_xlat3.yyyy * u_xlat0;\n    u_xlat0 = u_xlat0 * u_xlat0;\n    u_xlat4 = (-u_xlat1.xxxx) + unity_4LightPosX0;\n    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;\n    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;\n    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;\n    u_xlat0 = u_xlat1 * u_xlat1 + u_xlat0;\n    u_xlat1 = u_xlat1 * u_xlat3.wwzw + u_xlat2;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat2 = inversesqrt(u_xlat0);\n    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;\n    u_xlat1 = u_xlat1 * u_xlat2;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat0 * u_xlat1;\n    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_5.x = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_5.x);\n    u_xlat16_2 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD7.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform \tmediump vec4 _ReflectOutlineColor;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nUNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(4) uniform mediump samplerCube _Cube;\nin highp vec4 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_COLOR0;\nin highp vec3 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD7;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump float u_xlat16_5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_11;\nvec3 u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nfloat u_xlat16;\nmediump vec2 u_xlat16_16;\nbool u_xlatb22;\nfloat u_xlat30;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nfloat u_xlat36;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD2.w;\n    u_xlat0.y = vs_TEXCOORD3.w;\n    u_xlat0.z = vs_TEXCOORD4.w;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = inversesqrt(u_xlat16_31);\n    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;\n    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;\n    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat2.z = 0.0;\n    u_xlat3 = (-u_xlat2.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat16_4.x = texture(_MainTex, u_xlat3.xy).w;\n    u_xlat16_4.z = texture(_MainTex, u_xlat3.zw).w;\n    u_xlat16_4.y = texture(_MainTex, u_xlat2.xy).w;\n    u_xlat16_4.w = texture(_MainTex, u_xlat2.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat16_4;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat2.x = _BevelWidth + _OutlineWidth;\n    u_xlat2.x = max(u_xlat2.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat2.xxxx;\n    u_xlat2.x = u_xlat2.x * _Bevel;\n    u_xlat2.x = u_xlat2.x * _GradientScale;\n    u_xlat2.x = u_xlat2.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat3 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat3 = -abs(u_xlat3) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat12.x = _ShaderFlags * 0.5;\n    u_xlatb22 = u_xlat12.x>=(-u_xlat12.x);\n    u_xlat12.x = fract(abs(u_xlat12.x));\n    u_xlat12.x = (u_xlatb22) ? u_xlat12.x : (-u_xlat12.x);\n    u_xlatb12 = u_xlat12.x>=0.5;\n    u_xlat0 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat0;\n    u_xlat3 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat3 = sin(u_xlat3);\n    u_xlat3 = (-u_xlat0) + u_xlat3;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat3 + u_xlat0;\n    u_xlat12.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat12.xxxx);\n    u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat2.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat30 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat3.x = u_xlat30 * u_xlat0.z;\n    u_xlat3.yz = vec2(u_xlat30) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz * u_xlat3.xyz;\n    u_xlat0.xyz = u_xlat3.zxy * u_xlat0.yzx + (-u_xlat2.xyz);\n    u_xlat16_30 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat30 = (-u_xlat16_30) + 0.5;\n    u_xlat30 = u_xlat30 + (-vs_TEXCOORD5.x);\n    u_xlat30 = u_xlat30 * vs_TEXCOORD5.y + 0.5;\n    u_xlat2.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_31 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_5 = min(u_xlat2.x, 1.0);\n    u_xlat16_5 = sqrt(u_xlat16_5);\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5;\n    u_xlat12.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat16_3 = texture(_OutlineTex, u_xlat12.xy);\n    u_xlat12.xyz = u_xlat16_3.xyz * _OutlineColor.xyz;\n    u_xlat3.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat13 = u_xlat16_3.w * u_xlat3.x;\n    u_xlat4.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat16_4 = texture(_FaceTex, u_xlat4.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat16_4 * u_xlat5;\n    u_xlat16_7.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat12.xyz * vec3(u_xlat13) + (-u_xlat16_7.xyz);\n    u_xlat16_7.w = u_xlat3.x * u_xlat16_3.w + (-u_xlat6.w);\n    u_xlat16_3 = vec4(u_xlat16_31) * u_xlat16_7;\n    u_xlat16_4.w = u_xlat5.w * u_xlat16_4.w + u_xlat16_3.w;\n    u_xlat16_4.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_3.xyz;\n    u_xlat16_31 = (-u_xlat2.x) * 0.5 + u_xlat30;\n    u_xlat30 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);\n    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat12.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_7.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_31 = u_xlat12.x * 0.5 + u_xlat16_31;\n    u_xlat16_31 = u_xlat16_31 / u_xlat16_7.x;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_2 = vec4(u_xlat16_31) * u_xlat16_4;\n    u_xlat6.x = (-_BumpFace) + _BumpOutline;\n    u_xlat6.x = u_xlat30 * u_xlat6.x + _BumpFace;\n    u_xlat16_16.xy = texture(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_7.xy = u_xlat16_16.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_31 = dot(u_xlat16_7.xy, u_xlat16_7.xy);\n    u_xlat16_31 = min(u_xlat16_31, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_7.z = sqrt(u_xlat16_31);\n    u_xlat6.xyz = u_xlat16_7.xyz * u_xlat6.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat6.xyz = u_xlat16_2.www * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);\n    u_xlat6.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xxx;\n    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat6.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat3.xyz = u_xlat6.xxx * u_xlat16_7.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_1.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat6.x = log2(u_xlat16_1.x);\n    u_xlat16 = (-_FaceShininess) + _OutlineShininess;\n    u_xlat16 = u_xlat30 * u_xlat16 + _FaceShininess;\n    u_xlat16_1.x = u_xlat16 * 128.0;\n    u_xlat6.x = u_xlat6.x * u_xlat16_1.x;\n    u_xlat6.x = exp2(u_xlat6.x);\n    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat6.xyz = u_xlat6.xxx * u_xlat16_1.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat36 = max(u_xlat16_2.w, 9.99999975e-05);\n    u_xlat8.xyz = u_xlat16_2.xyz / vec3(u_xlat36);\n    u_xlat16_11.xyz = u_xlat8.xyz * _LightColor0.xyz;\n    u_xlat6.xyz = u_xlat16_11.xyz * u_xlat16_1.xxx + u_xlat6.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_1.y = dot(unity_SHAg, u_xlat3);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat3);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat9.xyz = log2(u_xlat16_1.xyz);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat9.xyz = exp2(u_xlat9.xyz);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = u_xlat8.xyz * u_xlat9.xyz + u_xlat6.xyz;\n    u_xlat6.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;\n    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz + _ReflectFaceColor.xyz;\n    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat8.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat30 = dot(vs_TEXCOORD6.xyz, u_xlat0.xyz);\n    u_xlat30 = u_xlat30 + u_xlat30;\n    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + vs_TEXCOORD6.xyz;\n    u_xlat16_0.xyz = texture(_Cube, u_xlat0.xyz).xyz;\n    u_xlat0.xyz = u_xlat6.xyz * u_xlat16_0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.www + u_xlat16_1.xyz;\n    SV_Target0.w = u_xlat16_2.w;\n    return;\n}\n\n",0,0,2,0,0,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDBASE"],["QUEUE","Transparent"],["RenderType","Transparent"]]]],["DIRECTIONAL","FOG_EXP","FOG_EXP2","FOG_LINEAR","GLOW_ON","INSTANCING_ON","LIGHTPROBE_SH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","VERTEXLIGHT_ON","__"],[[["__","GLOW_ON"]],[["__","INSTANCING_ON"]],[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"]],[["DIRECTIONAL"]],[["DIRECTIONAL","LIGHTPROBE_SH"]],[["DIRECTIONAL","VERTEXLIGHT_ON","LIGHTPROBE_SH"]]],3,0,9,0,0,0,0,[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDBASE"],["QUEUE","Transparent"],["RenderType","Transparent"]],null,"",227,-1],["TextMeshPro/Distance Field (Surface)",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nin mediump vec4 in_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD6;\nout highp vec3 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec3 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nout highp vec3 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nint u_xlati5;\nfloat u_xlat7;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat15);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat7 = u_xlat12 * u_xlat7;\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat7);\n    u_xlat2.xzw = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xzw;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xzw;\n    u_xlat2.xzw = u_xlat2.xzw + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xzw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = (-u_xlati5) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = (-u_xlat2.xzw) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xzw;\n    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xzw = u_xlat2.xxx * u_xlat3.xyz;\n    u_xlat2.x = dot(u_xlat0.yzx, u_xlat2.xzw);\n    vs_TEXCOORD6.y = abs(u_xlat2.x) * u_xlat15 + u_xlat7;\n    u_xlatb15 = 0.0>=in_TEXCOORD1.y;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;\n    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;\n    u_xlat15 = u_xlat15 * _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat15 * 0.5;\n    vs_TEXCOORD2.z = u_xlat0.y;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.z = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    vs_TEXCOORD8.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nUNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(4) uniform highp sampler2D _LightTexture0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD6;\nin highp vec3 vs_TEXCOORD2;\nin highp vec3 vs_TEXCOORD3;\nin highp vec3 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_12;\nmediump vec2 u_xlat16_13;\nbool u_xlatb17;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat16_3.x = texture(_MainTex, u_xlat2.xy).w;\n    u_xlat16_3.z = texture(_MainTex, u_xlat2.zw).w;\n    u_xlat16_3.y = texture(_MainTex, u_xlat1.xy).w;\n    u_xlat16_3.w = texture(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat16_3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat16_24 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat24 = (-u_xlat16_24) + 0.5;\n    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.x);\n    u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat16_2 = texture(_OutlineTex, u_xlat9.xy);\n    u_xlat9.xyz = u_xlat16_2.xyz * _OutlineColor.xyz;\n    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat10 = u_xlat16_2.w * u_xlat2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat16_3 = texture(_FaceTex, u_xlat3.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat16_3 * u_xlat5;\n    u_xlat16_12.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat9.xyz * vec3(u_xlat10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w = u_xlat2.x * u_xlat16_2.w + (-u_xlat6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_7;\n    u_xlat16_3.w = u_xlat5.w * u_xlat16_3.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5 + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_12.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x + _BumpFace;\n    u_xlat16_13.xy = texture(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_4.xy = u_xlat16_13.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat6.xyz * vec3(u_xlat29) + u_xlat5.xyz;\n    u_xlat16_4.w = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_7.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx;\n    u_xlat16_4.x = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.xw = max(u_xlat16_4.xw, vec2(0.0, 0.0));\n    u_xlat0.x = log2(u_xlat16_4.x);\n    u_xlat8.x = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8.x = u_xlat24 * u_xlat8.x + _FaceShininess;\n    u_xlat16_4.x = u_xlat8.x * 128.0;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat8.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat8.xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat8.xyz;\n    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.x = texture(_LightTexture0, u_xlat8.xx).x;\n    u_xlat16_4.xyz = u_xlat8.xxx * _LightColor0.xyz;\n    u_xlat16_7.xyz = u_xlat16_4.xyz * _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_7.xyz;\n    u_xlat24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat5.xyz = u_xlat16_1.xyz / vec3(u_xlat24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat5.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n",0,0,0,1,0,["POINT"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDADD"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nin mediump vec4 in_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD6;\nout highp vec3 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec3 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nout highp vec3 vs_TEXCOORD7;\nvec3 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat u_xlat4;\nint u_xlati4;\nvec3 u_xlat6;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat12);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat12 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat12 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat12;\n    u_xlat12 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat12;\n    u_xlat12 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat12;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat12) / u_xlat2.xy;\n    u_xlat12 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat13 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat13 = u_xlat13 * u_xlat2.x;\n    u_xlat2.x = u_xlat12 * u_xlat13;\n    u_xlat6.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat6.x * u_xlat2.x;\n    u_xlat12 = u_xlat12 * u_xlat13 + (-u_xlat2.x);\n    u_xlat6.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat6.xyz;\n    u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat6.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati4 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = (-u_xlati4) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat6.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat6.xyz;\n    u_xlat1.x = dot(u_xlat0.yzx, u_xlat1.xyz);\n    vs_TEXCOORD6.y = abs(u_xlat1.x) * u_xlat12 + u_xlat2.x;\n    u_xlatb12 = 0.0>=in_TEXCOORD1.y;\n    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);\n    u_xlat1.x = (-_WeightNormal) + _WeightBold;\n    u_xlat12 = u_xlat12 * u_xlat1.x + _WeightNormal;\n    u_xlat12 = u_xlat12 * 0.25 + _FaceDilate;\n    u_xlat12 = u_xlat12 * _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat12 * 0.5;\n    vs_TEXCOORD2.z = u_xlat0.y;\n    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat3.xyz = u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat3.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat3.xyz);\n    u_xlat4 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat3.xyz = vec3(u_xlat4) * u_xlat3.xyz;\n    vs_TEXCOORD2.y = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat1.x;\n    vs_TEXCOORD4.x = u_xlat1.y;\n    vs_TEXCOORD3.y = u_xlat3.y;\n    vs_TEXCOORD4.y = u_xlat3.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat6.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat6.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat6.zzz + u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nUNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD6;\nin highp vec3 vs_TEXCOORD2;\nin highp vec3 vs_TEXCOORD3;\nin highp vec3 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nfloat u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_12;\nmediump vec2 u_xlat16_13;\nbool u_xlatb17;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat16_3.x = texture(_MainTex, u_xlat2.xy).w;\n    u_xlat16_3.z = texture(_MainTex, u_xlat2.zw).w;\n    u_xlat16_3.y = texture(_MainTex, u_xlat1.xy).w;\n    u_xlat16_3.w = texture(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat16_3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat16_24 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat24 = (-u_xlat16_24) + 0.5;\n    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.x);\n    u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat16_2 = texture(_OutlineTex, u_xlat9.xy);\n    u_xlat9.xyz = u_xlat16_2.xyz * _OutlineColor.xyz;\n    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat10 = u_xlat16_2.w * u_xlat2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat16_3 = texture(_FaceTex, u_xlat3.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat16_3 * u_xlat5;\n    u_xlat16_12.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat9.xyz * vec3(u_xlat10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w = u_xlat2.x * u_xlat16_2.w + (-u_xlat6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_7;\n    u_xlat16_3.w = u_xlat5.w * u_xlat16_3.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5 + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_12.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x + _BumpFace;\n    u_xlat16_13.xy = texture(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_4.xy = u_xlat16_13.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat29) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_28 = inversesqrt(u_xlat16_28);\n    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.y = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));\n    u_xlat0.x = log2(u_xlat16_4.x);\n    u_xlat8 = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8 = u_xlat24 * u_xlat8 + _FaceShininess;\n    u_xlat16_4.x = u_xlat8 * 128.0;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat16_4.xzw = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xzw;\n    u_xlat24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat5.xyz = u_xlat16_1.xyz / vec3(u_xlat24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xzw = u_xlat5.xyz * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_4.xzw * u_xlat16_4.yyy + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n",0,0,1,1,0,["DIRECTIONAL"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDADD"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nin mediump vec4 in_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD6;\nout highp vec3 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec3 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nout highp vec3 vs_TEXCOORD7;\nout highp vec4 vs_TEXCOORD8;\nvec4 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nint u_xlati5;\nfloat u_xlat7;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat15);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat7 = u_xlat12 * u_xlat7;\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat7);\n    u_xlat2.xzw = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xzw;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xzw;\n    u_xlat2.xzw = u_xlat2.xzw + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xzw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = (-u_xlati5) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = (-u_xlat2.xzw) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xzw;\n    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xzw = u_xlat2.xxx * u_xlat3.xyz;\n    u_xlat2.x = dot(u_xlat0.yzx, u_xlat2.xzw);\n    vs_TEXCOORD6.y = abs(u_xlat2.x) * u_xlat15 + u_xlat7;\n    u_xlatb15 = 0.0>=in_TEXCOORD1.y;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;\n    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;\n    u_xlat15 = u_xlat15 * _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat15 * 0.5;\n    vs_TEXCOORD2.z = u_xlat0.y;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.z = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat1.zzzz + u_xlat0;\n    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat1.wwww + u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nUNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(4) uniform highp sampler2D _LightTexture0;\nUNITY_LOCATION(5) uniform highp sampler2D _LightTextureB0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD6;\nin highp vec3 vs_TEXCOORD2;\nin highp vec3 vs_TEXCOORD3;\nin highp vec3 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_12;\nmediump vec2 u_xlat16_13;\nbool u_xlatb16;\nbool u_xlatb17;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat16_3.x = texture(_MainTex, u_xlat2.xy).w;\n    u_xlat16_3.z = texture(_MainTex, u_xlat2.zw).w;\n    u_xlat16_3.y = texture(_MainTex, u_xlat1.xy).w;\n    u_xlat16_3.w = texture(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat16_3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat16_24 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat24 = (-u_xlat16_24) + 0.5;\n    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.x);\n    u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat16_2 = texture(_OutlineTex, u_xlat9.xy);\n    u_xlat9.xyz = u_xlat16_2.xyz * _OutlineColor.xyz;\n    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat10 = u_xlat16_2.w * u_xlat2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat16_3 = texture(_FaceTex, u_xlat3.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat16_3 * u_xlat5;\n    u_xlat16_12.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat9.xyz * vec3(u_xlat10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w = u_xlat2.x * u_xlat16_2.w + (-u_xlat6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_7;\n    u_xlat16_3.w = u_xlat5.w * u_xlat16_3.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5 + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_12.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x + _BumpFace;\n    u_xlat16_13.xy = texture(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_4.xy = u_xlat16_13.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat6.xyz * vec3(u_xlat29) + u_xlat5.xyz;\n    u_xlat16_4.w = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_7.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx;\n    u_xlat16_4.x = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.xw = max(u_xlat16_4.xw, vec2(0.0, 0.0));\n    u_xlat0.x = log2(u_xlat16_4.x);\n    u_xlat8.x = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8.x = u_xlat24 * u_xlat8.x + _FaceShininess;\n    u_xlat16_4.x = u_xlat8.x * 128.0;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat2 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat2;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat8.xy = u_xlat2.xy / u_xlat2.ww;\n    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);\n    u_xlat8.x = texture(_LightTexture0, u_xlat8.xy).w;\n    u_xlatb16 = 0.0<u_xlat2.z;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = texture(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat16_4.x = (u_xlatb16) ? 1.0 : 0.0;\n    u_xlat16_4.x = u_xlat8.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_7.xyz = u_xlat16_4.xyz * _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_7.xyz;\n    u_xlat24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat5.xyz = u_xlat16_1.xyz / vec3(u_xlat24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat5.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n",0,0,2,1,0,["SPOT"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDADD"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nin mediump vec4 in_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD6;\nout highp vec3 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec3 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nout highp vec3 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nint u_xlati5;\nfloat u_xlat7;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat15);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat7 = u_xlat12 * u_xlat7;\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat7);\n    u_xlat2.xzw = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xzw;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xzw;\n    u_xlat2.xzw = u_xlat2.xzw + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xzw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = (-u_xlati5) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = (-u_xlat2.xzw) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xzw;\n    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xzw = u_xlat2.xxx * u_xlat3.xyz;\n    u_xlat2.x = dot(u_xlat0.yzx, u_xlat2.xzw);\n    vs_TEXCOORD6.y = abs(u_xlat2.x) * u_xlat15 + u_xlat7;\n    u_xlatb15 = 0.0>=in_TEXCOORD1.y;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;\n    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;\n    u_xlat15 = u_xlat15 * _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat15 * 0.5;\n    vs_TEXCOORD2.z = u_xlat0.y;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.z = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    vs_TEXCOORD8.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nUNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(4) uniform highp sampler2D _LightTextureB0;\nUNITY_LOCATION(5) uniform highp samplerCube _LightTexture0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD6;\nin highp vec3 vs_TEXCOORD2;\nin highp vec3 vs_TEXCOORD3;\nin highp vec3 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_12;\nmediump vec2 u_xlat16_13;\nfloat u_xlat16;\nbool u_xlatb17;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat16_3.x = texture(_MainTex, u_xlat2.xy).w;\n    u_xlat16_3.z = texture(_MainTex, u_xlat2.zw).w;\n    u_xlat16_3.y = texture(_MainTex, u_xlat1.xy).w;\n    u_xlat16_3.w = texture(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat16_3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat16_24 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat24 = (-u_xlat16_24) + 0.5;\n    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.x);\n    u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat16_2 = texture(_OutlineTex, u_xlat9.xy);\n    u_xlat9.xyz = u_xlat16_2.xyz * _OutlineColor.xyz;\n    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat10 = u_xlat16_2.w * u_xlat2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat16_3 = texture(_FaceTex, u_xlat3.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat16_3 * u_xlat5;\n    u_xlat16_12.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat9.xyz * vec3(u_xlat10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w = u_xlat2.x * u_xlat16_2.w + (-u_xlat6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_7;\n    u_xlat16_3.w = u_xlat5.w * u_xlat16_3.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5 + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_12.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x + _BumpFace;\n    u_xlat16_13.xy = texture(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_4.xy = u_xlat16_13.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat6.xyz * vec3(u_xlat29) + u_xlat5.xyz;\n    u_xlat16_4.w = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_7.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx;\n    u_xlat16_4.x = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.xw = max(u_xlat16_4.xw, vec2(0.0, 0.0));\n    u_xlat0.x = log2(u_xlat16_4.x);\n    u_xlat8.x = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8.x = u_xlat24 * u_xlat8.x + _FaceShininess;\n    u_xlat16_4.x = u_xlat8.x * 128.0;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat8.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat8.xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat8.xyz;\n    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat5.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.x = texture(_LightTexture0, u_xlat8.xyz).w;\n    u_xlat16 = texture(_LightTextureB0, u_xlat5.xx).x;\n    u_xlat8.x = u_xlat8.x * u_xlat16;\n    u_xlat16_4.xyz = u_xlat8.xxx * _LightColor0.xyz;\n    u_xlat16_7.xyz = u_xlat16_4.xyz * _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_7.xyz;\n    u_xlat24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat5.xyz = u_xlat16_1.xyz / vec3(u_xlat24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat5.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n",0,0,3,1,0,["POINT_COOKIE"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDADD"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nin mediump vec4 in_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD6;\nout highp vec3 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec3 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nout highp vec3 vs_TEXCOORD7;\nout highp vec2 vs_TEXCOORD8;\nvec3 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nint u_xlati5;\nfloat u_xlat7;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat15);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat7 = u_xlat12 * u_xlat7;\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat7);\n    u_xlat2.xzw = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xzw;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xzw;\n    u_xlat2.xzw = u_xlat2.xzw + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xzw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = (-u_xlati5) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = (-u_xlat2.xzw) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xzw;\n    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xzw = u_xlat2.xxx * u_xlat3.xyz;\n    u_xlat2.x = dot(u_xlat0.yzx, u_xlat2.xzw);\n    vs_TEXCOORD6.y = abs(u_xlat2.x) * u_xlat15 + u_xlat7;\n    u_xlatb15 = 0.0>=in_TEXCOORD1.y;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;\n    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;\n    u_xlat15 = u_xlat15 * _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat15 * 0.5;\n    vs_TEXCOORD2.z = u_xlat0.y;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.z = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;\n    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;\n    vs_TEXCOORD8.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nUNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(4) uniform highp sampler2D _LightTexture0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD6;\nin highp vec3 vs_TEXCOORD2;\nin highp vec3 vs_TEXCOORD3;\nin highp vec3 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_12;\nmediump vec2 u_xlat16_13;\nbool u_xlatb17;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat16_3.x = texture(_MainTex, u_xlat2.xy).w;\n    u_xlat16_3.z = texture(_MainTex, u_xlat2.zw).w;\n    u_xlat16_3.y = texture(_MainTex, u_xlat1.xy).w;\n    u_xlat16_3.w = texture(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat16_3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat16_24 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat24 = (-u_xlat16_24) + 0.5;\n    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.x);\n    u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat16_2 = texture(_OutlineTex, u_xlat9.xy);\n    u_xlat9.xyz = u_xlat16_2.xyz * _OutlineColor.xyz;\n    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat10 = u_xlat16_2.w * u_xlat2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat16_3 = texture(_FaceTex, u_xlat3.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat16_3 * u_xlat5;\n    u_xlat16_12.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat9.xyz * vec3(u_xlat10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w = u_xlat2.x * u_xlat16_2.w + (-u_xlat6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_7;\n    u_xlat16_3.w = u_xlat5.w * u_xlat16_3.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5 + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_12.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x + _BumpFace;\n    u_xlat16_13.xy = texture(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_4.xy = u_xlat16_13.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat29) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_28 = inversesqrt(u_xlat16_28);\n    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.y = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));\n    u_xlat0.x = log2(u_xlat16_4.x);\n    u_xlat8.x = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8.x = u_xlat24 * u_xlat8.x + _FaceShininess;\n    u_xlat16_4.x = u_xlat8.x * 128.0;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat8.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat8.xy;\n    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat8.xy;\n    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat8.x = texture(_LightTexture0, u_xlat8.xy).w;\n    u_xlat16_4.xzw = u_xlat8.xxx * _LightColor0.xyz;\n    u_xlat16_7.xyz = u_xlat16_4.xzw * _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_7.xyz;\n    u_xlat24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat5.xyz = u_xlat16_1.xyz / vec3(u_xlat24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat5.xyz;\n    u_xlat0.xyz = u_xlat16_4.xzw * u_xlat16_4.yyy + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n",0,0,4,1,0,["DIRECTIONAL_COOKIE"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDADD"],["QUEUE","Transparent"],["RenderType","Transparent"]]]],["DIRECTIONAL","DIRECTIONAL_COOKIE","FOG_EXP","FOG_EXP2","FOG_LINEAR","GLOW_ON","POINT","POINT_COOKIE","SPOT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[["__","GLOW_ON"]],[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"]],[["POINT"]],[["DIRECTIONAL"]],[["SPOT"]],[["POINT_COOKIE"]],[["DIRECTIONAL_COOKIE"]]],5,0,9,0,1,0,1,[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDADD"],["QUEUE","Transparent"],["RenderType","Transparent"]],null,"",227,-1],["TextMeshPro/Distance Field (Surface)",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _ScaleRatioA;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD3;\nout highp float vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat4;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat4 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat4);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat4) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;\n    vs_TEXCOORD2 = u_xlat0.x * 0.5;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD1;\nin highp float vs_TEXCOORD2;\nlayout(location = 0) out highp vec4 SV_Target0;\nfloat u_xlat0;\nmediump float u_xlat16_0;\nbool u_xlatb0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;\n    u_xlat0 = u_xlat16_0 + (-vs_TEXCOORD2);\n    u_xlatb0 = u_xlat0<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n",0,0,0,2,0,["SHADOWS_DEPTH"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","SHADOWCASTER"],["QUEUE","Transparent"],["RenderType","Transparent"],["SHADOWSUPPORT","true"]]]],["SHADOWS_CUBE","SHADOWS_DEPTH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO"],[[["SHADOWS_DEPTH"]],[["SHADOWS_CUBE"]]],2,0,9,0,2,0,2,[["IGNOREPROJECTOR","true"],["LIGHTMODE","SHADOWCASTER"],["QUEUE","Transparent"],["RenderType","Transparent"],["SHADOWSUPPORT","true"]],null,"",33,-1]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],0]],0,432,"Assets/TextMesh Pro/Shaders/TMP_SDF-Surface.shader",["DIRECTIONAL","FOG_EXP","FOG_EXP2","FOG_LINEAR","GLOW_ON","LIGHTPROBE_SH","VERTEXLIGHT_ON","DIRECTIONAL_COOKIE","POINT","POINT_COOKIE","SPOT","SHADOWS_DEPTH","INSTANCING_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__","SHADOWS_CUBE"],null,null,[],9],[[[0,[["TextMeshPro/Distance Field Overlay",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump vec4 u_xlat16_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4 = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n",0,0,0,0,0,[],[["IGNOREPROJECTOR","true"],["QUEUE","Overlay"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4 = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_3.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat5 = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n",0,0,1,0,0,["UNITY_UI_ALPHACLIP"],[["IGNOREPROJECTOR","true"],["QUEUE","Overlay"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n",0,0,2,0,0,["UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Overlay"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n",0,0,3,0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Overlay"],["RenderType","Transparent"]]]],["BEVEL_ON","GLOW_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","BEVEL_ON"]],[["__","UNDERLAY_ON","UNDERLAY_INNER"]],[["__","GLOW_ON"]],[["__","UNITY_UI_CLIP_RECT"]],[["__","UNITY_UI_ALPHACLIP"]]],0,0,9,0,0,0,0,[["IGNOREPROJECTOR","true"],["QUEUE","Overlay"],["RenderType","Transparent"]],null,"",227,-1]],[["IGNOREPROJECTOR","true"],["QUEUE","Overlay"],["RenderType","Transparent"]],0]],0,412,"Assets/TextMesh Pro/Shaders/TMP_SDF Overlay.shader",["BEVEL_ON","GLOW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],0,408,[],9],[[[0,[["TextMeshPro/Distance Field SSD",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp float vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    vs_COLOR0 = in_COLOR0;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    vs_TEXCOORD1 = u_xlat8.x * 0.5;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin highp vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp float vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec2 u_xlat5;\nmediump float u_xlat16_7;\nfloat u_xlat10;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nvoid main()\n{\n    u_xlat0.x = (-vs_TEXCOORD1) + 0.5;\n    u_xlat1.x = dFdx(vs_TEXCOORD0.y);\n    u_xlat1.y = dFdy(vs_TEXCOORD0.y);\n    u_xlat5.x = _TextureWidth * 0.75;\n    u_xlat5.xy = u_xlat5.xx * u_xlat1.xy;\n    u_xlat5.x = dot(u_xlat5.xy, u_xlat5.xy);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.x = u_xlat5.x * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat5.x = u_xlat10 * u_xlat5.x;\n    u_xlat10 = 0.5 / u_xlat5.x;\n    u_xlat0.x = u_xlat10 + u_xlat0.x;\n    u_xlat16_10 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat16_10) + u_xlat0.x;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat5.x * u_xlat10;\n    u_xlat16_2 = u_xlat10 * 0.5;\n    u_xlat16_7 = min(u_xlat10, 1.0);\n    u_xlat16_7 = sqrt(u_xlat16_7);\n    u_xlat16_12 = u_xlat0.x * u_xlat5.x + (-u_xlat16_2);\n    u_xlat16_2 = u_xlat0.x * u_xlat5.x + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_7 * u_xlat16_2;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat10 = u_xlat5.x * u_xlat0.x;\n    u_xlat16_7 = u_xlat0.x * u_xlat5.x + 1.0;\n    u_xlat16_12 = u_xlat10 * 0.5 + u_xlat16_12;\n    u_xlat16_7 = u_xlat16_12 / u_xlat16_7;\n    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);\n    u_xlat16_7 = (-u_xlat16_7) + 1.0;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat1 = u_xlat16_0 * _OutlineColor;\n    u_xlat0.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_3 = texture(_FaceTex, u_xlat3.xy);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;\n    u_xlat3.x = u_xlat16_3.w * _FaceColor.w;\n    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat3.xxx;\n    u_xlat16_1.xyz = u_xlat1.xyz * u_xlat1.www + (-u_xlat16_4.xyz);\n    u_xlat16_1.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat3.x);\n    u_xlat16_1 = u_xlat16_1 * vec4(u_xlat16_2);\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat3.xxx + u_xlat16_1.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat16_3.w + u_xlat16_1.w;\n    u_xlat16_0 = vec4(u_xlat16_7) * u_xlat16_0;\n    u_xlat0 = u_xlat16_0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0,0,0,0,0,[],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp float vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    vs_COLOR0 = in_COLOR0;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    vs_TEXCOORD1 = u_xlat8.x * 0.5;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin highp vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp float vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nbool u_xlatb3;\nmediump vec4 u_xlat16_4;\nvec2 u_xlat5;\nmediump float u_xlat16_7;\nfloat u_xlat10;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nvoid main()\n{\n    u_xlat0.x = (-vs_TEXCOORD1) + 0.5;\n    u_xlat1.x = dFdx(vs_TEXCOORD0.y);\n    u_xlat1.y = dFdy(vs_TEXCOORD0.y);\n    u_xlat5.x = _TextureWidth * 0.75;\n    u_xlat5.xy = u_xlat5.xx * u_xlat1.xy;\n    u_xlat5.x = dot(u_xlat5.xy, u_xlat5.xy);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.x = u_xlat5.x * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat5.x = u_xlat10 * u_xlat5.x;\n    u_xlat10 = 0.5 / u_xlat5.x;\n    u_xlat0.x = u_xlat10 + u_xlat0.x;\n    u_xlat16_10 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat16_10) + u_xlat0.x;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat5.x * u_xlat10;\n    u_xlat16_2 = u_xlat10 * 0.5;\n    u_xlat16_7 = min(u_xlat10, 1.0);\n    u_xlat16_7 = sqrt(u_xlat16_7);\n    u_xlat16_12 = u_xlat0.x * u_xlat5.x + (-u_xlat16_2);\n    u_xlat16_2 = u_xlat0.x * u_xlat5.x + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_7 * u_xlat16_2;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat10 = u_xlat5.x * u_xlat0.x;\n    u_xlat16_7 = u_xlat0.x * u_xlat5.x + 1.0;\n    u_xlat16_12 = u_xlat10 * 0.5 + u_xlat16_12;\n    u_xlat16_7 = u_xlat16_12 / u_xlat16_7;\n    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);\n    u_xlat16_7 = (-u_xlat16_7) + 1.0;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat1 = u_xlat16_0 * _OutlineColor;\n    u_xlat0.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_3 = texture(_FaceTex, u_xlat3.xy);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;\n    u_xlat3.x = u_xlat16_3.w * _FaceColor.w;\n    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat3.xxx;\n    u_xlat16_1.xyz = u_xlat1.xyz * u_xlat1.www + (-u_xlat16_4.xyz);\n    u_xlat16_1.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat3.x);\n    u_xlat16_1 = u_xlat16_1 * vec4(u_xlat16_2);\n    u_xlat16_4.w = _FaceColor.w * u_xlat16_3.w + u_xlat16_1.w;\n    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat3.xxx + u_xlat16_1.xyz;\n    u_xlat16_0 = vec4(u_xlat16_7) * u_xlat16_4;\n    u_xlat16_2 = u_xlat16_4.w * u_xlat16_7 + -0.00100000005;\n    u_xlatb3 = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat0 = u_xlat16_0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0,0,1,0,0,["UNITY_UI_ALPHACLIP"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp float vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    vs_COLOR0 = in_COLOR0;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    vs_TEXCOORD1 = u_xlat8.x * 0.5;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin highp vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp float vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump float u_xlat16_8;\nvec2 u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat6.x = (-vs_TEXCOORD1) + 0.5;\n    u_xlat1.x = dFdx(vs_TEXCOORD0.y);\n    u_xlat1.y = dFdy(vs_TEXCOORD0.y);\n    u_xlat12.x = _TextureWidth * 0.75;\n    u_xlat12.xy = u_xlat12.xx * u_xlat1.xy;\n    u_xlat12.x = dot(u_xlat12.xy, u_xlat12.xy);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat12.x = u_xlat12.x * _GradientScale;\n    u_xlat18 = _Sharpness + 1.0;\n    u_xlat12.x = u_xlat18 * u_xlat12.x;\n    u_xlat18 = 0.5 / u_xlat12.x;\n    u_xlat6.x = u_xlat18 + u_xlat6.x;\n    u_xlat0.x = (-u_xlat16_0.x) + u_xlat6.x;\n    u_xlat6.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat6.x = u_xlat12.x * u_xlat6.x;\n    u_xlat16_2 = u_xlat6.x * 0.5;\n    u_xlat16_8 = min(u_xlat6.x, 1.0);\n    u_xlat16_8 = sqrt(u_xlat16_8);\n    u_xlat16_14 = u_xlat0.x * u_xlat12.x + (-u_xlat16_2);\n    u_xlat16_2 = u_xlat0.x * u_xlat12.x + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_8 * u_xlat16_2;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat6.x = u_xlat12.x * u_xlat0.x;\n    u_xlat16_8 = u_xlat0.x * u_xlat12.x + 1.0;\n    u_xlat0.x = float(1.0) / u_xlat12.x;\n    u_xlat0.xz = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xx;\n    u_xlat0.xz = vec2(0.25, 0.25) / u_xlat0.xz;\n    u_xlat16_14 = u_xlat6.x * 0.5 + u_xlat16_14;\n    u_xlat16_8 = u_xlat16_14 / u_xlat16_8;\n    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + 1.0;\n    u_xlat6.xz = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_1 = texture(_OutlineTex, u_xlat6.xz);\n    u_xlat3 = u_xlat16_1 * _OutlineColor;\n    u_xlat1.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat6.xz = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat6.xz);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_4.xyz;\n    u_xlat6.x = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_5.xyz = u_xlat6.xxx * u_xlat1.xyz;\n    u_xlat16_3.xyz = u_xlat3.xyz * u_xlat3.www + (-u_xlat16_5.xyz);\n    u_xlat16_3.w = _OutlineColor.w * u_xlat16_1.w + (-u_xlat6.x);\n    u_xlat16_3 = vec4(u_xlat16_2) * u_xlat16_3;\n    u_xlat16_1.xyz = u_xlat1.xyz * u_xlat6.xxx + u_xlat16_3.xyz;\n    u_xlat16_1.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_3.w;\n    u_xlat16_1 = vec4(u_xlat16_8) * u_xlat16_1;\n    u_xlat6.xz = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat6.xz = u_xlat6.xz + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xz * u_xlat6.xz;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0 = u_xlat16_1 * vec4(u_xlat16_2);\n    u_xlat0 = u_xlat16_0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0,0,2,0,0,["UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp float vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    vs_COLOR0 = in_COLOR0;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    vs_TEXCOORD1 = u_xlat8.x * 0.5;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin highp vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp float vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump float u_xlat16_8;\nvec2 u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat6.x = (-vs_TEXCOORD1) + 0.5;\n    u_xlat1.x = dFdx(vs_TEXCOORD0.y);\n    u_xlat1.y = dFdy(vs_TEXCOORD0.y);\n    u_xlat12.x = _TextureWidth * 0.75;\n    u_xlat12.xy = u_xlat12.xx * u_xlat1.xy;\n    u_xlat12.x = dot(u_xlat12.xy, u_xlat12.xy);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat12.x = u_xlat12.x * _GradientScale;\n    u_xlat18 = _Sharpness + 1.0;\n    u_xlat12.x = u_xlat18 * u_xlat12.x;\n    u_xlat18 = 0.5 / u_xlat12.x;\n    u_xlat6.x = u_xlat18 + u_xlat6.x;\n    u_xlat0.x = (-u_xlat16_0.x) + u_xlat6.x;\n    u_xlat6.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat6.x = u_xlat12.x * u_xlat6.x;\n    u_xlat16_2 = u_xlat6.x * 0.5;\n    u_xlat16_8 = min(u_xlat6.x, 1.0);\n    u_xlat16_8 = sqrt(u_xlat16_8);\n    u_xlat16_14 = u_xlat0.x * u_xlat12.x + (-u_xlat16_2);\n    u_xlat16_2 = u_xlat0.x * u_xlat12.x + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_8 * u_xlat16_2;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat6.x = u_xlat12.x * u_xlat0.x;\n    u_xlat16_8 = u_xlat0.x * u_xlat12.x + 1.0;\n    u_xlat0.x = float(1.0) / u_xlat12.x;\n    u_xlat0.xz = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xx;\n    u_xlat0.xz = vec2(0.25, 0.25) / u_xlat0.xz;\n    u_xlat16_14 = u_xlat6.x * 0.5 + u_xlat16_14;\n    u_xlat16_8 = u_xlat16_14 / u_xlat16_8;\n    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + 1.0;\n    u_xlat6.xz = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_1 = texture(_OutlineTex, u_xlat6.xz);\n    u_xlat3 = u_xlat16_1 * _OutlineColor;\n    u_xlat1.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat6.xz = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat6.xz);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_4.xyz;\n    u_xlat6.x = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_5.xyz = u_xlat6.xxx * u_xlat1.xyz;\n    u_xlat16_3.xyz = u_xlat3.xyz * u_xlat3.www + (-u_xlat16_5.xyz);\n    u_xlat16_3.w = _OutlineColor.w * u_xlat16_1.w + (-u_xlat6.x);\n    u_xlat16_3 = vec4(u_xlat16_2) * u_xlat16_3;\n    u_xlat16_1.xyz = u_xlat1.xyz * u_xlat6.xxx + u_xlat16_3.xyz;\n    u_xlat16_1.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_3.w;\n    u_xlat16_1 = vec4(u_xlat16_8) * u_xlat16_1;\n    u_xlat6.xz = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat6.xz = u_xlat6.xz + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xz * u_xlat6.xz;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_8 = u_xlat16_1.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_0 = u_xlat16_1 * vec4(u_xlat16_2);\n    u_xlat0 = u_xlat16_0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n    u_xlatb4 = u_xlat16_8<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n",0,0,3,0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]]],["BEVEL_ON","FORCE_LINEAR","GLOW_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","BEVEL_ON"]],[["__","UNDERLAY_ON","UNDERLAY_INNER"]],[["__","GLOW_ON"]],[["__","FORCE_LINEAR"]],[["__","UNITY_UI_CLIP_RECT"]],[["__","UNITY_UI_ALPHACLIP"]]],0,0,9,0,0,0,0,[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],null,"",227,-1]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],0]],0,414,"Assets/TextMesh Pro/Shaders/TMP_SDF SSD.shader",["BEVEL_ON","FORCE_LINEAR","GLOW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],0,408,[],9],[[[0,[["TextMeshPro/Mobile/Bitmap",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tfloat _DiffusePower;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    u_xlat6.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.ww;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat6.xy;\n    u_xlat16_1 = in_COLOR0 * _Color;\n    u_xlat2.xyz = u_xlat16_1.xyz * vec3(_DiffusePower);\n    vs_COLOR0.w = u_xlat16_1.w;\n    vs_COLOR0.xyz = u_xlat2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);\n    vs_TEXCOORD2.xy = (-u_xlat1.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nmediump float u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0 = u_xlat16_0 * vs_COLOR0.w;\n    SV_Target0.w = u_xlat0;\n    SV_Target0.xyz = vs_COLOR0.xyz;\n    return;\n}\n\n",0,0,0,0,0,[],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tfloat _DiffusePower;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    u_xlat6.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.ww;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat6.xy;\n    u_xlat16_1 = in_COLOR0 * _Color;\n    u_xlat2.xyz = u_xlat16_1.xyz * vec3(_DiffusePower);\n    vs_COLOR0.w = u_xlat16_1.w;\n    vs_COLOR0.xyz = u_xlat2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);\n    vs_TEXCOORD2.xy = (-u_xlat1.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nmediump float u_xlat16_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = vs_COLOR0.w * u_xlat16_0 + -0.00100000005;\n    u_xlat0 = u_xlat16_0 * vs_COLOR0.w;\n    SV_Target0.w = u_xlat0;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0.xyz = vs_COLOR0.xyz;\n    return;\n}\n\n",0,0,1,0,0,["UNITY_UI_ALPHACLIP"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tfloat _DiffusePower;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    u_xlat6.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.ww;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat6.xy;\n    u_xlat16_1 = in_COLOR0 * _Color;\n    u_xlat2.xyz = u_xlat16_1.xyz * vec3(_DiffusePower);\n    vs_COLOR0.w = u_xlat16_1.w;\n    vs_COLOR0.xyz = u_xlat2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);\n    vs_TEXCOORD2.xy = (-u_xlat1.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nmediump float u_xlat16_0;\nmediump float u_xlat16_1;\nvec2 u_xlat2;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0 = u_xlat16_0 * vs_COLOR0.w;\n    u_xlat2.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat2.xy = u_xlat2.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD2.zw;\n    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat2.y * u_xlat2.x;\n    SV_Target0.w = u_xlat0 * u_xlat16_1;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    return;\n}\n\n",0,0,2,0,0,["UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tfloat _DiffusePower;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    u_xlat6.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.ww;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat6.xy;\n    u_xlat16_1 = in_COLOR0 * _Color;\n    u_xlat2.xyz = u_xlat16_1.xyz * vec3(_DiffusePower);\n    vs_COLOR0.w = u_xlat16_1.w;\n    vs_COLOR0.xyz = u_xlat2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);\n    vs_TEXCOORD2.xy = (-u_xlat1.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump float u_xlat16_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = u_xlat16_0 * vs_COLOR0.w;\n    u_xlat16_3 = u_xlat0.x * u_xlat16_1 + -0.00100000005;\n    u_xlat16_5 = u_xlat16_1 * u_xlat0.x;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    SV_Target0.w = u_xlat16_5;\n    u_xlatb0 = u_xlat16_3<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n",0,0,3,0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]]],["STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","UNITY_UI_CLIP_RECT"]],[["__","UNITY_UI_ALPHACLIP"]]],0,0,9,0,0,0,0,[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],null,"",33,-1]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],0],[1,[["TextMeshPro/Mobile/Bitmap",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec3 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_COLOR0 = in_COLOR0;\n    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    SV_Target0.w = u_xlat16_0 * _Color.w;\n    SV_Target0.xyz = vs_COLOR0.xyz * _Color.xyz;\n    return;\n}\n\n",0,0,0,0,1,[],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]]],["STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO"],[],0,0,9,0,0,1,0,[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],null,"",1,-1]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],0]],0,426,"Assets/TextMesh Pro/Shaders/TMP_Bitmap-Mobile.shader",["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],null,null,[],9],[[[0,[["TextMeshPro/Mobile/Distance Field",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat16_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    SV_Target0 = vec4(u_xlat16_1) * vs_COLOR0;\n    return;\n}\n\n",0,0,0,0,0,[],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat16_0.x * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_4 = vs_COLOR0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * vs_COLOR0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n",0,0,1,0,0,["UNITY_UI_ALPHACLIP"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3 = u_xlat16_0.x * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_3) * vs_COLOR0;\n    SV_Target0 = vec4(u_xlat16_1) * u_xlat16_0;\n    return;\n}\n\n",0,0,2,0,0,["UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_4 = u_xlat16_0.x * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_4) * vs_COLOR0;\n    u_xlat16_4 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n",0,0,3,0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout mediump vec2 vs_TEXCOORD4;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec2 u_xlat7;\nvec3 u_xlat8;\nfloat u_xlat10;\nfloat u_xlat16;\nfloat u_xlat18;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0.w = _FaceColor.w;\n    u_xlat16_3.xyz = in_COLOR0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_4 = u_xlat16_3 * _FaceColor;\n    u_xlat16_5.xyz = u_xlat16_4.www * u_xlat16_4.xyz;\n    vs_COLOR0.xyz = u_xlat16_5.xyz;\n    u_xlat5.xyz = (-u_xlat16_5.xyz);\n    u_xlat5.w = (-u_xlat16_4.w);\n    u_xlat16_6.xyz = _OutlineColor.www * _OutlineColor.xyz;\n    u_xlat16_6.w = _OutlineColor.w;\n    u_xlat5 = u_xlat5 + u_xlat16_6;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat10 * u_xlat2.x;\n    u_xlat10 = u_xlat24 * u_xlat2.x;\n    u_xlat18 = (-_PerspectiveFilter) + 1.0;\n    u_xlat18 = u_xlat18 * abs(u_xlat10);\n    u_xlat24 = u_xlat24 * u_xlat2.x + (-u_xlat18);\n    u_xlat16 = abs(u_xlat16) * u_xlat24 + u_xlat18;\n    u_xlatb24 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat16 = (u_xlatb24) ? u_xlat16 : u_xlat10;\n    u_xlat24 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat24 = u_xlat24 * u_xlat16 + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat24;\n    u_xlat24 = _OutlineWidth * _ScaleRatioA;\n    u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat7.x = min(u_xlat24, 1.0);\n    u_xlat7.x = sqrt(u_xlat7.x);\n    u_xlat5 = u_xlat5 * u_xlat7.xxxx;\n    u_xlat4.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat5.xyz;\n    u_xlat4.w = u_xlat16_3.w * _FaceColor.w + u_xlat5.w;\n    vs_COLOR1 = u_xlat4;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat7.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat7.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat8.x = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat24) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat24 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    vs_TEXCOORD3.z = in_COLOR0.w;\n    vs_TEXCOORD3.w = 0.0;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat8.xz = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat8.xz = u_xlat8.xz / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD3.xy = u_xlat8.xz + in_TEXCOORD0.xy;\n    u_xlat8.x = u_xlat1.x * u_xlat16 + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat8.x;\n    u_xlat8.x = u_xlat1.y * u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat8.x) * 0.5 + u_xlat0.x;\n    vs_TEXCOORD4.xy = u_xlat2.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _UnderlayColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec4 vs_COLOR1;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD3;\nin mediump vec2 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec2 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x = u_xlat16_0.x * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    u_xlat16_0.w = _UnderlayColor.w;\n    u_xlat0 = u_xlat16_1.xxxx * u_xlat16_0;\n    u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat16_2.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy = u_xlat16_2.xx * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx * u_xlat16_1 + vs_COLOR1;\n    u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n    u_xlat16_1.x = (-u_xlat16_1.w) * u_xlat16_3.y + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat16_1.xxxx + u_xlat16_2;\n    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0,0,0,0,0,["OUTLINE_ON","UNDERLAY_ON"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec4 vs_COLOR1;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy = vec2(u_xlat16_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vs_COLOR1;\n    SV_Target0 = u_xlat16_2.yyyy * u_xlat16_0;\n    return;\n}\n\n",0,0,0,0,0,["OUTLINE_ON"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout mediump vec2 vs_TEXCOORD4;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec2 u_xlat7;\nvec3 u_xlat8;\nfloat u_xlat10;\nfloat u_xlat16;\nfloat u_xlat18;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0.w = _FaceColor.w;\n    u_xlat16_3.xyz = in_COLOR0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_4 = u_xlat16_3 * _FaceColor;\n    u_xlat16_5.xyz = u_xlat16_4.www * u_xlat16_4.xyz;\n    vs_COLOR0.xyz = u_xlat16_5.xyz;\n    u_xlat5.xyz = (-u_xlat16_5.xyz);\n    u_xlat5.w = (-u_xlat16_4.w);\n    u_xlat16_6.xyz = _OutlineColor.www * _OutlineColor.xyz;\n    u_xlat16_6.w = _OutlineColor.w;\n    u_xlat5 = u_xlat5 + u_xlat16_6;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat10 * u_xlat2.x;\n    u_xlat10 = u_xlat24 * u_xlat2.x;\n    u_xlat18 = (-_PerspectiveFilter) + 1.0;\n    u_xlat18 = u_xlat18 * abs(u_xlat10);\n    u_xlat24 = u_xlat24 * u_xlat2.x + (-u_xlat18);\n    u_xlat16 = abs(u_xlat16) * u_xlat24 + u_xlat18;\n    u_xlatb24 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat16 = (u_xlatb24) ? u_xlat16 : u_xlat10;\n    u_xlat24 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat24 = u_xlat24 * u_xlat16 + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat24;\n    u_xlat24 = _OutlineWidth * _ScaleRatioA;\n    u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat7.x = min(u_xlat24, 1.0);\n    u_xlat7.x = sqrt(u_xlat7.x);\n    u_xlat5 = u_xlat5 * u_xlat7.xxxx;\n    u_xlat4.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat5.xyz;\n    u_xlat4.w = u_xlat16_3.w * _FaceColor.w + u_xlat5.w;\n    vs_COLOR1 = u_xlat4;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat7.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat7.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat8.x = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat24) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat24 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    vs_TEXCOORD3.z = in_COLOR0.w;\n    vs_TEXCOORD3.w = 0.0;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat8.xz = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat8.xz = u_xlat8.xz / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD3.xy = u_xlat8.xz + in_TEXCOORD0.xy;\n    u_xlat8.x = u_xlat1.x * u_xlat16 + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat8.x;\n    u_xlat8.x = u_xlat1.y * u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat8.x) * 0.5 + u_xlat0.x;\n    vs_TEXCOORD4.xy = u_xlat2.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _UnderlayColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec4 vs_COLOR1;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD3;\nin mediump vec2 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec2 u_xlat16_3;\nbool u_xlatb4;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x = u_xlat16_0.x * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    u_xlat16_0.w = _UnderlayColor.w;\n    u_xlat0 = u_xlat16_1.xxxx * u_xlat16_0;\n    u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat16_2.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy = u_xlat16_2.xx * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx * u_xlat16_1 + vs_COLOR1;\n    u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n    u_xlat16_1.x = (-u_xlat16_1.w) * u_xlat16_3.y + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat16_1.xxxx + u_xlat16_2;\n    u_xlat16_1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;\n    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;\n    SV_Target0 = u_xlat0;\n    u_xlatb4 = u_xlat16_1.x<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n",0,0,1,0,0,["UNITY_UI_ALPHACLIP","OUTLINE_ON","UNDERLAY_ON"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec4 vs_COLOR1;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy = vec2(u_xlat16_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vs_COLOR1;\n    u_xlat16_2.x = u_xlat16_0.w * u_xlat16_2.y + -0.00100000005;\n    u_xlat16_0 = u_xlat16_2.yyyy * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb1 = u_xlat16_2.x<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n",0,0,1,0,0,["UNITY_UI_ALPHACLIP","OUTLINE_ON"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout mediump vec2 vs_TEXCOORD4;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec2 u_xlat7;\nvec3 u_xlat8;\nfloat u_xlat10;\nfloat u_xlat16;\nfloat u_xlat18;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0.w = _FaceColor.w;\n    u_xlat16_3.xyz = in_COLOR0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_4 = u_xlat16_3 * _FaceColor;\n    u_xlat16_5.xyz = u_xlat16_4.www * u_xlat16_4.xyz;\n    vs_COLOR0.xyz = u_xlat16_5.xyz;\n    u_xlat5.xyz = (-u_xlat16_5.xyz);\n    u_xlat5.w = (-u_xlat16_4.w);\n    u_xlat16_6.xyz = _OutlineColor.www * _OutlineColor.xyz;\n    u_xlat16_6.w = _OutlineColor.w;\n    u_xlat5 = u_xlat5 + u_xlat16_6;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat10 * u_xlat2.x;\n    u_xlat10 = u_xlat24 * u_xlat2.x;\n    u_xlat18 = (-_PerspectiveFilter) + 1.0;\n    u_xlat18 = u_xlat18 * abs(u_xlat10);\n    u_xlat24 = u_xlat24 * u_xlat2.x + (-u_xlat18);\n    u_xlat16 = abs(u_xlat16) * u_xlat24 + u_xlat18;\n    u_xlatb24 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat16 = (u_xlatb24) ? u_xlat16 : u_xlat10;\n    u_xlat24 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat24 = u_xlat24 * u_xlat16 + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat24;\n    u_xlat24 = _OutlineWidth * _ScaleRatioA;\n    u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat7.x = min(u_xlat24, 1.0);\n    u_xlat7.x = sqrt(u_xlat7.x);\n    u_xlat5 = u_xlat5 * u_xlat7.xxxx;\n    u_xlat4.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat5.xyz;\n    u_xlat4.w = u_xlat16_3.w * _FaceColor.w + u_xlat5.w;\n    vs_COLOR1 = u_xlat4;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat7.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat7.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat8.x = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat24) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat24 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    vs_TEXCOORD3.z = in_COLOR0.w;\n    vs_TEXCOORD3.w = 0.0;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat8.xz = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat8.xz = u_xlat8.xz / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD3.xy = u_xlat8.xz + in_TEXCOORD0.xy;\n    u_xlat8.x = u_xlat1.x * u_xlat16 + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat8.x;\n    u_xlat8.x = u_xlat1.y * u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat8.x) * 0.5 + u_xlat0.x;\n    vs_TEXCOORD4.xy = u_xlat2.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec4 vs_COLOR1;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin mediump vec2 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec2 u_xlat16_3;\nvec2 u_xlat4;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x = u_xlat16_0.x * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    u_xlat16_0.w = _UnderlayColor.w;\n    u_xlat0 = u_xlat16_1.xxxx * u_xlat16_0;\n    u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat16_2.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy = u_xlat16_2.xx * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx * u_xlat16_1 + vs_COLOR1;\n    u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n    u_xlat16_1.x = (-u_xlat16_1.w) * u_xlat16_3.y + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat16_1.xxxx + u_xlat16_2;\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 = u_xlat0 * u_xlat16_1.xxxx;\n    u_xlat0 = u_xlat16_0 * vs_TEXCOORD3.zzzz;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0,0,2,0,0,["UNITY_UI_CLIP_RECT","OUTLINE_ON","UNDERLAY_ON"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec4 vs_COLOR1;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec2 u_xlat1;\nmediump float u_xlat16_1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy = vec2(u_xlat16_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vs_COLOR1;\n    u_xlat16_0 = u_xlat16_2.yyyy * u_xlat16_0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.x;\n    SV_Target0 = u_xlat16_0 * u_xlat16_2.xxxx;\n    return;\n}\n\n",0,0,2,0,0,["UNITY_UI_CLIP_RECT","OUTLINE_ON"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout mediump vec2 vs_TEXCOORD4;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec2 u_xlat7;\nvec3 u_xlat8;\nfloat u_xlat10;\nfloat u_xlat16;\nfloat u_xlat18;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0.w = _FaceColor.w;\n    u_xlat16_3.xyz = in_COLOR0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_4 = u_xlat16_3 * _FaceColor;\n    u_xlat16_5.xyz = u_xlat16_4.www * u_xlat16_4.xyz;\n    vs_COLOR0.xyz = u_xlat16_5.xyz;\n    u_xlat5.xyz = (-u_xlat16_5.xyz);\n    u_xlat5.w = (-u_xlat16_4.w);\n    u_xlat16_6.xyz = _OutlineColor.www * _OutlineColor.xyz;\n    u_xlat16_6.w = _OutlineColor.w;\n    u_xlat5 = u_xlat5 + u_xlat16_6;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat10 * u_xlat2.x;\n    u_xlat10 = u_xlat24 * u_xlat2.x;\n    u_xlat18 = (-_PerspectiveFilter) + 1.0;\n    u_xlat18 = u_xlat18 * abs(u_xlat10);\n    u_xlat24 = u_xlat24 * u_xlat2.x + (-u_xlat18);\n    u_xlat16 = abs(u_xlat16) * u_xlat24 + u_xlat18;\n    u_xlatb24 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat16 = (u_xlatb24) ? u_xlat16 : u_xlat10;\n    u_xlat24 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat24 = u_xlat24 * u_xlat16 + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat24;\n    u_xlat24 = _OutlineWidth * _ScaleRatioA;\n    u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat7.x = min(u_xlat24, 1.0);\n    u_xlat7.x = sqrt(u_xlat7.x);\n    u_xlat5 = u_xlat5 * u_xlat7.xxxx;\n    u_xlat4.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat5.xyz;\n    u_xlat4.w = u_xlat16_3.w * _FaceColor.w + u_xlat5.w;\n    vs_COLOR1 = u_xlat4;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat7.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat7.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat8.x = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat24) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat24 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    vs_TEXCOORD3.z = in_COLOR0.w;\n    vs_TEXCOORD3.w = 0.0;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat8.xz = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat8.xz = u_xlat8.xz / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD3.xy = u_xlat8.xz + in_TEXCOORD0.xy;\n    u_xlat8.x = u_xlat1.x * u_xlat16 + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat8.x;\n    u_xlat8.x = u_xlat1.y * u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat8.x) * 0.5 + u_xlat0.x;\n    vs_TEXCOORD4.xy = u_xlat2.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec4 vs_COLOR1;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin mediump vec2 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec2 u_xlat16_3;\nvec2 u_xlat4;\nbool u_xlatb4;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x = u_xlat16_0.x * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    u_xlat16_0.w = _UnderlayColor.w;\n    u_xlat0 = u_xlat16_1.xxxx * u_xlat16_0;\n    u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat16_2.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy = u_xlat16_2.xx * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx * u_xlat16_1 + vs_COLOR1;\n    u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n    u_xlat16_1.x = (-u_xlat16_1.w) * u_xlat16_3.y + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat16_1.xxxx + u_xlat16_2;\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 = u_xlat0 * u_xlat16_1.xxxx;\n    u_xlat16_1.x = u_xlat16_0.w * vs_TEXCOORD3.z + -0.00100000005;\n    u_xlat0 = u_xlat16_0 * vs_TEXCOORD3.zzzz;\n    SV_Target0 = u_xlat0;\n    u_xlatb4 = u_xlat16_1.x<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n",0,0,3,0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","OUTLINE_ON","UNDERLAY_ON"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec4 vs_COLOR1;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec2 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nmediump vec2 u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy = vec2(u_xlat16_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vs_COLOR1;\n    u_xlat16_0 = u_xlat16_2.yyyy * u_xlat16_0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat16_0.w * u_xlat16_2.x + -0.00100000005;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_2.xxxx;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n",0,0,3,0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","OUTLINE_ON"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]]],["OUTLINE_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","OUTLINE_ON"]],[["__","UNDERLAY_ON","UNDERLAY_INNER"]],[["__","UNITY_UI_CLIP_RECT"]],[["__","UNITY_UI_ALPHACLIP"]]],0,0,9,0,0,0,0,[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],null,"",33,-1]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],0]],0,408,"Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile.shader",["OUTLINE_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],null,null,[],9],[[[0,[["TextMeshPro/Mobile/Distance Field - Masking",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskWipeControl;\nuniform \tfloat _MaskEdgeSoftness;\nuniform \tmediump vec4 _MaskEdgeColor;\nuniform \tint _MaskInverse;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MaskTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump float u_xlat16_6;\nfloat u_xlat18;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_6 = u_xlat16_0.x * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_6) * vs_COLOR0;\n    u_xlat16_6 = u_xlat16_1 * u_xlat16_0.w;\n    u_xlat16_2.xyz = vec3(u_xlat16_6) * _MaskEdgeColor.xyz;\n    u_xlat3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1) + (-u_xlat16_2.xyz);\n    u_xlat18 = (_MaskInverse != 0) ? 1.0 : 0.0;\n    u_xlat16_4 = texture(_MaskTex, vs_TEXCOORD0.zw).w;\n    u_xlat18 = u_xlat18 + (-u_xlat16_4);\n    u_xlat4 = (-_MaskWipeControl) + 1.0;\n    u_xlat18 = u_xlat4 * _MaskEdgeSoftness + abs(u_xlat18);\n    u_xlat18 = u_xlat18 + (-_MaskWipeControl);\n    u_xlat18 = u_xlat18 / _MaskEdgeSoftness;\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n    u_xlat0.w = u_xlat16_6 * u_xlat18;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0,0,0,0,0,[],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskWipeControl;\nuniform \tfloat _MaskEdgeSoftness;\nuniform \tmediump vec4 _MaskEdgeColor;\nuniform \tint _MaskInverse;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MaskTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nmediump float u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nvec3 u_xlat5;\nmediump float u_xlat16_5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat0 = (_MaskInverse != 0) ? 1.0 : 0.0;\n    u_xlat16_5 = texture(_MaskTex, vs_TEXCOORD0.zw).w;\n    u_xlat0 = (-u_xlat16_5) + u_xlat0;\n    u_xlat5.x = (-_MaskWipeControl) + 1.0;\n    u_xlat0 = u_xlat5.x * _MaskEdgeSoftness + abs(u_xlat0);\n    u_xlat0 = u_xlat0 + (-_MaskWipeControl);\n    u_xlat0 = u_xlat0 / _MaskEdgeSoftness;\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat5.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat5.xy = u_xlat5.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD2.zw;\n    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat5.y * u_xlat5.x;\n    u_xlat16_5 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_6 = u_xlat16_5 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_2 = vec4(u_xlat16_6) * vs_COLOR0;\n    u_xlat16_6 = u_xlat16_1 * u_xlat16_2.w;\n    u_xlat16_11 = u_xlat16_6 * u_xlat0 + -0.00100000005;\n    u_xlatb5 = u_xlat16_11<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat16_3.xyz = vec3(u_xlat16_6) * _MaskEdgeColor.xyz;\n    u_xlat4.w = u_xlat0 * u_xlat16_6;\n    u_xlat5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_1) + (-u_xlat16_3.xyz);\n    u_xlat5.xyz = vec3(u_xlat0) * u_xlat5.xyz + u_xlat16_3.xyz;\n    u_xlat4.xyz = vec3(u_xlat0) * u_xlat5.xyz;\n    SV_Target0 = u_xlat4;\n    return;\n}\n\n",0,0,1,0,0,["UNITY_UI_ALPHACLIP"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskWipeControl;\nuniform \tfloat _MaskEdgeSoftness;\nuniform \tmediump vec4 _MaskEdgeColor;\nuniform \tint _MaskInverse;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MaskTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump float u_xlat16_6;\nfloat u_xlat18;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_6 = u_xlat16_0.x * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_6) * vs_COLOR0;\n    u_xlat16_6 = u_xlat16_1 * u_xlat16_0.w;\n    u_xlat16_2.xyz = vec3(u_xlat16_6) * _MaskEdgeColor.xyz;\n    u_xlat3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1) + (-u_xlat16_2.xyz);\n    u_xlat18 = (_MaskInverse != 0) ? 1.0 : 0.0;\n    u_xlat16_4 = texture(_MaskTex, vs_TEXCOORD0.zw).w;\n    u_xlat18 = u_xlat18 + (-u_xlat16_4);\n    u_xlat4 = (-_MaskWipeControl) + 1.0;\n    u_xlat18 = u_xlat4 * _MaskEdgeSoftness + abs(u_xlat18);\n    u_xlat18 = u_xlat18 + (-_MaskWipeControl);\n    u_xlat18 = u_xlat18 / _MaskEdgeSoftness;\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n    u_xlat0.w = u_xlat16_6 * u_xlat18;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0,0,2,0,0,["UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskWipeControl;\nuniform \tfloat _MaskEdgeSoftness;\nuniform \tmediump vec4 _MaskEdgeColor;\nuniform \tint _MaskInverse;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MaskTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nmediump float u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nvec3 u_xlat5;\nmediump float u_xlat16_5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat0 = (_MaskInverse != 0) ? 1.0 : 0.0;\n    u_xlat16_5 = texture(_MaskTex, vs_TEXCOORD0.zw).w;\n    u_xlat0 = (-u_xlat16_5) + u_xlat0;\n    u_xlat5.x = (-_MaskWipeControl) + 1.0;\n    u_xlat0 = u_xlat5.x * _MaskEdgeSoftness + abs(u_xlat0);\n    u_xlat0 = u_xlat0 + (-_MaskWipeControl);\n    u_xlat0 = u_xlat0 / _MaskEdgeSoftness;\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat5.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat5.xy = u_xlat5.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD2.zw;\n    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat5.y * u_xlat5.x;\n    u_xlat16_5 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_6 = u_xlat16_5 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_2 = vec4(u_xlat16_6) * vs_COLOR0;\n    u_xlat16_6 = u_xlat16_1 * u_xlat16_2.w;\n    u_xlat16_11 = u_xlat16_6 * u_xlat0 + -0.00100000005;\n    u_xlatb5 = u_xlat16_11<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat16_3.xyz = vec3(u_xlat16_6) * _MaskEdgeColor.xyz;\n    u_xlat4.w = u_xlat0 * u_xlat16_6;\n    u_xlat5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_1) + (-u_xlat16_3.xyz);\n    u_xlat5.xyz = vec3(u_xlat0) * u_xlat5.xyz + u_xlat16_3.xyz;\n    u_xlat4.xyz = vec3(u_xlat0) * u_xlat5.xyz;\n    SV_Target0 = u_xlat4;\n    return;\n}\n\n",0,0,3,0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]]],["OUTLINE_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","OUTLINE_ON"]],[["__","UNDERLAY_ON","UNDERLAY_INNER"]],[["__","UNITY_UI_CLIP_RECT"]],[["__","UNITY_UI_ALPHACLIP"]]],0,0,9,0,0,0,0,[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],null,"",33,-1]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],0]],0,418,"Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile Masking.shader",["OUTLINE_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],null,null,[],9],[[[0,[["TextMeshPro/Mobile/Distance Field (Surface)",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nin mediump vec4 in_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR0;\nout highp vec3 vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD7;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nmediump float u_xlat16_5;\nmediump vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal) + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 * _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.w = u_xlat1.y;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD4.z = u_xlat3.w;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat16_5 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);\n    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD7;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec4 u_xlat16_6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat10;\nmediump float u_xlat16_15;\nvec2 u_xlat16;\nfloat u_xlat24;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat16_0.x) + 0.5;\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.x);\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y + 0.5;\n    u_xlat7 = _OutlineWidth * _ScaleRatioA;\n    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y;\n    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_8.x = (-u_xlat7) * 0.5 + u_xlat0.x;\n    u_xlat16_15 = min(u_xlat7, 1.0);\n    u_xlat16_15 = sqrt(u_xlat16_15);\n    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_0.xyz * _OutlineColor.xyz;\n    u_xlat2 = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat9 = u_xlat16_0.w * u_xlat2;\n    u_xlat16.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat16_3 = texture(_FaceTex, u_xlat16.xy);\n    u_xlat4 = vs_COLOR0 * _FaceColor;\n    u_xlat5 = u_xlat16_3 * u_xlat4;\n    u_xlat16_6.xyz = u_xlat5.www * u_xlat5.xyz;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat9) + (-u_xlat16_6.xyz);\n    u_xlat16_6.w = u_xlat2 * u_xlat16_0.w + (-u_xlat5.w);\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_6;\n    u_xlat16_2.w = u_xlat4.w * u_xlat16_3.w + u_xlat16_0.w;\n    u_xlat16_2.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat16_0.xyz;\n    u_xlat3.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat10 = u_xlat3.x * vs_TEXCOORD5.y;\n    u_xlat16_1.x = u_xlat3.x * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_8.x = u_xlat10 * 0.5 + u_xlat16_8.x;\n    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;\n    u_xlat3.x = max(u_xlat16_0.w, 9.99999975e-05);\n    u_xlat3.xyz = u_xlat16_0.xyz / u_xlat3.xxx;\n    SV_Target0.w = u_xlat16_0.w;\n    u_xlat4.x = vs_TEXCOORD2.z;\n    u_xlat4.y = vs_TEXCOORD3.z;\n    u_xlat4.z = vs_TEXCOORD4.z;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.yzw = u_xlat16_6.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_1.yzw);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_8.xyz = u_xlat3.xyz * u_xlat4.xyz;\n    u_xlat16_6.xyz = u_xlat3.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;\n    return;\n}\n\n",0,0,0,0,0,["DIRECTIONAL"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDBASE"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nin mediump vec4 in_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR0;\nout highp vec3 vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD7;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nmediump float u_xlat16_5;\nmediump vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal) + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 * _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.w = u_xlat1.y;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD4.z = u_xlat3.w;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat16_5 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);\n    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD7;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec4 u_xlat16_6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat10;\nmediump float u_xlat16_15;\nvec2 u_xlat16;\nfloat u_xlat24;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat16_0.x) + 0.5;\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.x);\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y + 0.5;\n    u_xlat7 = _OutlineWidth * _ScaleRatioA;\n    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y;\n    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_8.x = (-u_xlat7) * 0.5 + u_xlat0.x;\n    u_xlat16_15 = min(u_xlat7, 1.0);\n    u_xlat16_15 = sqrt(u_xlat16_15);\n    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_0.xyz * _OutlineColor.xyz;\n    u_xlat2 = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat9 = u_xlat16_0.w * u_xlat2;\n    u_xlat16.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat16_3 = texture(_FaceTex, u_xlat16.xy);\n    u_xlat4 = vs_COLOR0 * _FaceColor;\n    u_xlat5 = u_xlat16_3 * u_xlat4;\n    u_xlat16_6.xyz = u_xlat5.www * u_xlat5.xyz;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat9) + (-u_xlat16_6.xyz);\n    u_xlat16_6.w = u_xlat2 * u_xlat16_0.w + (-u_xlat5.w);\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_6;\n    u_xlat16_2.w = u_xlat4.w * u_xlat16_3.w + u_xlat16_0.w;\n    u_xlat16_2.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat16_0.xyz;\n    u_xlat3.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat10 = u_xlat3.x * vs_TEXCOORD5.y;\n    u_xlat16_1.x = u_xlat3.x * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_8.x = u_xlat10 * 0.5 + u_xlat16_8.x;\n    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;\n    u_xlat3.x = max(u_xlat16_0.w, 9.99999975e-05);\n    u_xlat3.xyz = u_xlat16_0.xyz / u_xlat3.xxx;\n    SV_Target0.w = u_xlat16_0.w;\n    u_xlat4.x = vs_TEXCOORD2.z;\n    u_xlat4.y = vs_TEXCOORD3.z;\n    u_xlat4.z = vs_TEXCOORD4.z;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.yzw = u_xlat16_6.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_1.yzw);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_8.xyz = u_xlat3.xyz * u_xlat4.xyz;\n    u_xlat16_6.xyz = u_xlat3.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;\n    return;\n}\n\n",0,0,1,0,0,["DIRECTIONAL","LIGHTPROBE_SH"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDBASE"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nin mediump vec4 in_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR0;\nout highp vec3 vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD7;\nvec4 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal) + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 * _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD3.w = u_xlat1.y;\n    vs_TEXCOORD4.z = u_xlat3.w;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat0 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat2 = u_xlat3.yyyy * u_xlat0;\n    u_xlat0 = u_xlat0 * u_xlat0;\n    u_xlat4 = (-u_xlat1.xxxx) + unity_4LightPosX0;\n    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;\n    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;\n    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;\n    u_xlat0 = u_xlat1 * u_xlat1 + u_xlat0;\n    u_xlat1 = u_xlat1 * u_xlat3.wwzw + u_xlat2;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat2 = inversesqrt(u_xlat0);\n    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;\n    u_xlat1 = u_xlat1 * u_xlat2;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat0 * u_xlat1;\n    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_5.x = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_5.x);\n    u_xlat16_2 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD7.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD7;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec4 u_xlat16_6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat10;\nmediump float u_xlat16_15;\nvec2 u_xlat16;\nfloat u_xlat24;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat16_0.x) + 0.5;\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.x);\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y + 0.5;\n    u_xlat7 = _OutlineWidth * _ScaleRatioA;\n    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y;\n    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_8.x = (-u_xlat7) * 0.5 + u_xlat0.x;\n    u_xlat16_15 = min(u_xlat7, 1.0);\n    u_xlat16_15 = sqrt(u_xlat16_15);\n    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_0.xyz * _OutlineColor.xyz;\n    u_xlat2 = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat9 = u_xlat16_0.w * u_xlat2;\n    u_xlat16.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat16_3 = texture(_FaceTex, u_xlat16.xy);\n    u_xlat4 = vs_COLOR0 * _FaceColor;\n    u_xlat5 = u_xlat16_3 * u_xlat4;\n    u_xlat16_6.xyz = u_xlat5.www * u_xlat5.xyz;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat9) + (-u_xlat16_6.xyz);\n    u_xlat16_6.w = u_xlat2 * u_xlat16_0.w + (-u_xlat5.w);\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_6;\n    u_xlat16_2.w = u_xlat4.w * u_xlat16_3.w + u_xlat16_0.w;\n    u_xlat16_2.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat16_0.xyz;\n    u_xlat3.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat10 = u_xlat3.x * vs_TEXCOORD5.y;\n    u_xlat16_1.x = u_xlat3.x * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_8.x = u_xlat10 * 0.5 + u_xlat16_8.x;\n    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;\n    u_xlat3.x = max(u_xlat16_0.w, 9.99999975e-05);\n    u_xlat3.xyz = u_xlat16_0.xyz / u_xlat3.xxx;\n    SV_Target0.w = u_xlat16_0.w;\n    u_xlat4.x = vs_TEXCOORD2.z;\n    u_xlat4.y = vs_TEXCOORD3.z;\n    u_xlat4.z = vs_TEXCOORD4.z;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.yzw = u_xlat16_6.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_1.yzw);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_8.xyz = u_xlat3.xyz * u_xlat4.xyz;\n    u_xlat16_6.xyz = u_xlat3.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;\n    return;\n}\n\n",0,0,2,0,0,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDBASE"],["QUEUE","Transparent"],["RenderType","Transparent"]]]],["DIRECTIONAL","FOG_EXP","FOG_EXP2","FOG_LINEAR","GLOW_ON","INSTANCING_ON","LIGHTPROBE_SH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","VERTEXLIGHT_ON","__"],[[["__","GLOW_ON"]],[["__","INSTANCING_ON"]],[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"]],[["DIRECTIONAL"]],[["DIRECTIONAL","LIGHTPROBE_SH"]],[["DIRECTIONAL","VERTEXLIGHT_ON","LIGHTPROBE_SH"]]],3,0,9,0,0,0,0,[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDBASE"],["QUEUE","Transparent"],["RenderType","Transparent"]],null,"",227,-1],["TextMeshPro/Mobile/Distance Field (Surface)",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _ScaleRatioA;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD3;\nout highp float vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat4;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat4 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat4);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat4) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;\n    vs_TEXCOORD2 = u_xlat0.x * 0.5;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD1;\nin highp float vs_TEXCOORD2;\nlayout(location = 0) out highp vec4 SV_Target0;\nfloat u_xlat0;\nmediump float u_xlat16_0;\nbool u_xlatb0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;\n    u_xlat0 = u_xlat16_0 + (-vs_TEXCOORD2);\n    u_xlatb0 = u_xlat0<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n",0,0,0,1,0,["SHADOWS_DEPTH"],[["IGNOREPROJECTOR","true"],["LIGHTMODE","SHADOWCASTER"],["QUEUE","Transparent"],["RenderType","Transparent"],["SHADOWSUPPORT","true"]]]],["SHADOWS_CUBE","SHADOWS_DEPTH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO"],[[["SHADOWS_DEPTH"]],[["SHADOWS_CUBE"]]],2,0,9,0,1,0,1,[["IGNOREPROJECTOR","true"],["LIGHTMODE","SHADOWCASTER"],["QUEUE","Transparent"],["RenderType","Transparent"],["SHADOWSUPPORT","true"]],null,"",33,-1]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],0]],0,422,"Assets/TextMesh Pro/Shaders/TMP_SDF-Surface-Mobile.shader",["DIRECTIONAL","FOG_EXP","FOG_EXP2","FOG_LINEAR","GLOW_ON","LIGHTPROBE_SH","VERTEXLIGHT_ON","SHADOWS_DEPTH","INSTANCING_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__","SHADOWS_CUBE"],null,null,[],9],[[[0,[["TextMeshPro/Mobile/Distance Field Overlay",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat16_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    SV_Target0 = vec4(u_xlat16_1) * vs_COLOR0;\n    return;\n}\n\n",0,0,0,0,0,[],[["IGNOREPROJECTOR","true"],["QUEUE","Overlay"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat16_0.x * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_4 = vs_COLOR0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * vs_COLOR0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n",0,0,1,0,0,["UNITY_UI_ALPHACLIP"],[["IGNOREPROJECTOR","true"],["QUEUE","Overlay"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3 = u_xlat16_0.x * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_3) * vs_COLOR0;\n    SV_Target0 = vec4(u_xlat16_1) * u_xlat16_0;\n    return;\n}\n\n",0,0,2,0,0,["UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Overlay"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_4 = u_xlat16_0.x * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_4) * vs_COLOR0;\n    u_xlat16_4 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n",0,0,3,0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Overlay"],["RenderType","Transparent"]]]],["OUTLINE_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","OUTLINE_ON"]],[["__","UNDERLAY_ON","UNDERLAY_INNER"]],[["__","UNITY_UI_CLIP_RECT"]],[["__","UNITY_UI_ALPHACLIP"]]],0,0,9,0,0,0,0,[["IGNOREPROJECTOR","true"],["QUEUE","Overlay"],["RenderType","Transparent"]],null,"",33,-1]],[["IGNOREPROJECTOR","true"],["QUEUE","Overlay"],["RenderType","Transparent"]],0]],0,428,"Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile Overlay.shader",["OUTLINE_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],null,null,[],9],[[[0,[["TextMeshPro/Mobile/Distance Field SSD",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_COLOR0;\nout highp vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1 = in_COLOR0 * _FaceColor;\n    vs_COLOR0.xyz = u_xlat1.www * u_xlat1.xyz;\n    vs_COLOR0.w = u_xlat1.w;\n    u_xlat6.x = in_COLOR0.w * _OutlineColor.w;\n    vs_COLOR1.xyz = u_xlat6.xxx * _OutlineColor.xyz;\n    vs_COLOR1.w = u_xlat6.x;\n    u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy + (-u_xlat1.xy);\n    u_xlat6.xy = (-u_xlat1.xy) + u_xlat1.zw;\n    vs_TEXCOORD0.zw = u_xlat0.xy / u_xlat6.xy;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat3 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat3 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat0.x = _GradientScale * 1.33329999;\n    u_xlat3 = _Sharpness + 1.0;\n    u_xlat0.x = u_xlat3 * u_xlat0.x;\n    vs_TEXCOORD1.y = u_xlat0.x / _TextureWidth;\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    vs_TEXCOORD1.z = u_xlat0.x * 0.5;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2.xy = vec2(0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec2 u_xlat0;\nfloat u_xlat1;\nmediump float u_xlat16_1;\nvec2 u_xlat2;\nvoid main()\n{\n    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);\n    u_xlat2.xy = dFdy(vs_TEXCOORD0.yx);\n    u_xlat1 = u_xlat2.y * u_xlat0.y;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x + (-u_xlat1);\n    u_xlat0.x = inversesqrt(abs(u_xlat0.x));\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat1 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat1 = u_xlat1 * u_xlat0.x + 1.0;\n    u_xlat0.x = u_xlat0.x / u_xlat1;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat1 = u_xlat16_1 + (-vs_TEXCOORD1.x);\n    u_xlat0.x = u_xlat1 * u_xlat0.x + 0.5;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    SV_Target0 = u_xlat0.xxxx * vs_COLOR0;\n    return;\n}\n\n",0,0,0,0,0,[],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_COLOR0;\nout highp vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1 = in_COLOR0 * _FaceColor;\n    vs_COLOR0.xyz = u_xlat1.www * u_xlat1.xyz;\n    vs_COLOR0.w = u_xlat1.w;\n    u_xlat6.x = in_COLOR0.w * _OutlineColor.w;\n    vs_COLOR1.xyz = u_xlat6.xxx * _OutlineColor.xyz;\n    vs_COLOR1.w = u_xlat6.x;\n    u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy + (-u_xlat1.xy);\n    u_xlat6.xy = (-u_xlat1.xy) + u_xlat1.zw;\n    vs_TEXCOORD0.zw = u_xlat0.xy / u_xlat6.xy;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat3 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat3 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat0.x = _GradientScale * 1.33329999;\n    u_xlat3 = _Sharpness + 1.0;\n    u_xlat0.x = u_xlat3 * u_xlat0.x;\n    vs_TEXCOORD1.y = u_xlat0.x / _TextureWidth;\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    vs_TEXCOORD1.z = u_xlat0.x * 0.5;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2.xy = vec2(0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump float u_xlat16_2;\nvec2 u_xlat4;\nvoid main()\n{\n    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);\n    u_xlat4.xy = dFdy(vs_TEXCOORD0.yx);\n    u_xlat2 = u_xlat4.y * u_xlat0.y;\n    u_xlat0.x = u_xlat0.x * u_xlat4.x + (-u_xlat2);\n    u_xlat0.x = inversesqrt(abs(u_xlat0.x));\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat2 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat2 = u_xlat2 * u_xlat0.x + 1.0;\n    u_xlat0.x = u_xlat0.x / u_xlat2;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat2 = u_xlat16_2 + (-vs_TEXCOORD1.x);\n    u_xlat0.x = u_xlat2 * u_xlat0.x + 0.5;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat2 = vs_COLOR0.w * u_xlat0.x + -0.00100000005;\n    u_xlat1 = u_xlat0.xxxx * vs_COLOR0;\n    SV_Target0 = u_xlat1;\n    u_xlatb0 = u_xlat2<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n",0,0,1,0,0,["UNITY_UI_ALPHACLIP"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_COLOR0;\nout highp vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1 = in_COLOR0 * _FaceColor;\n    vs_COLOR0.xyz = u_xlat1.www * u_xlat1.xyz;\n    vs_COLOR0.w = u_xlat1.w;\n    u_xlat6.x = in_COLOR0.w * _OutlineColor.w;\n    vs_COLOR1.xyz = u_xlat6.xxx * _OutlineColor.xyz;\n    vs_COLOR1.w = u_xlat6.x;\n    u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat6.xy = u_xlat0.xy + (-u_xlat1.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);\n    vs_TEXCOORD2.xy = (-u_xlat1.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat1.xy) + u_xlat1.zw;\n    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat3 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat3 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat0.x = _GradientScale * 1.33329999;\n    u_xlat3 = _Sharpness + 1.0;\n    u_xlat0.x = u_xlat3 * u_xlat0.x;\n    vs_TEXCOORD1.y = u_xlat0.x / _TextureWidth;\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    vs_TEXCOORD1.z = u_xlat0.x * 0.5;\n    vs_TEXCOORD1.w = 0.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD2;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec2 u_xlat2;\nvec2 u_xlat4;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);\n    u_xlat4.xy = dFdy(vs_TEXCOORD0.yx);\n    u_xlat2.x = u_xlat4.y * u_xlat0.y;\n    u_xlat0.x = u_xlat0.x * u_xlat4.x + (-u_xlat2.x);\n    u_xlat0.x = inversesqrt(abs(u_xlat0.x));\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * u_xlat0.x + 1.0;\n    u_xlat0.x = u_xlat0.x / u_xlat2.x;\n    u_xlat2.x = float(1.0) / u_xlat0.x;\n    u_xlat2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat2.xx;\n    u_xlat2.xy = vec2(0.25, 0.25) / u_xlat2.xy;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat2.xy = u_xlat2.xy * u_xlat1.xy;\n    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);\n    u_xlat2.x = u_xlat2.y * u_xlat2.x;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat4.x = u_xlat16_4 + (-vs_TEXCOORD1.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 0.5;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = u_xlat0.xxxx * vs_COLOR0;\n    SV_Target0 = u_xlat2.xxxx * u_xlat1;\n    return;\n}\n\n",0,0,2,0,0,["UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_COLOR0;\nout highp vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1 = in_COLOR0 * _FaceColor;\n    vs_COLOR0.xyz = u_xlat1.www * u_xlat1.xyz;\n    vs_COLOR0.w = u_xlat1.w;\n    u_xlat6.x = in_COLOR0.w * _OutlineColor.w;\n    vs_COLOR1.xyz = u_xlat6.xxx * _OutlineColor.xyz;\n    vs_COLOR1.w = u_xlat6.x;\n    u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat6.xy = u_xlat0.xy + (-u_xlat1.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);\n    vs_TEXCOORD2.xy = (-u_xlat1.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat1.xy) + u_xlat1.zw;\n    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat3 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat3 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat0.x = _GradientScale * 1.33329999;\n    u_xlat3 = _Sharpness + 1.0;\n    u_xlat0.x = u_xlat3 * u_xlat0.x;\n    vs_TEXCOORD1.y = u_xlat0.x / _TextureWidth;\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    vs_TEXCOORD1.z = u_xlat0.x * 0.5;\n    vs_TEXCOORD1.w = 0.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD2;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec2 u_xlat2;\nvec2 u_xlat4;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);\n    u_xlat4.xy = dFdy(vs_TEXCOORD0.yx);\n    u_xlat2.x = u_xlat4.y * u_xlat0.y;\n    u_xlat0.x = u_xlat0.x * u_xlat4.x + (-u_xlat2.x);\n    u_xlat0.x = inversesqrt(abs(u_xlat0.x));\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * u_xlat0.x + 1.0;\n    u_xlat0.x = u_xlat0.x / u_xlat2.x;\n    u_xlat2.x = float(1.0) / u_xlat0.x;\n    u_xlat2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat2.xx;\n    u_xlat2.xy = vec2(0.25, 0.25) / u_xlat2.xy;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat2.xy = u_xlat2.xy * u_xlat1.xy;\n    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);\n    u_xlat2.x = u_xlat2.y * u_xlat2.x;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat4.x = u_xlat16_4 + (-vs_TEXCOORD1.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 0.5;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = u_xlat0.xxxx * vs_COLOR0;\n    u_xlat0.x = u_xlat1.w * u_xlat2.x + -0.00100000005;\n    u_xlat1 = u_xlat2.xxxx * u_xlat1;\n    SV_Target0 = u_xlat1;\n    u_xlatb0 = u_xlat0.x<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n",0,0,3,0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]]]],["OUTLINE_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","OUTLINE_ON"]],[["__","UNDERLAY_ON","UNDERLAY_INNER"]],[["__","UNITY_UI_CLIP_RECT"]],[["__","UNITY_UI_ALPHACLIP"]]],0,0,9,0,0,0,0,[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],null,"",33,-1]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],0]],0,430,"Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile SSD.shader",["OUTLINE_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],null,null,[],9],[[[0,[["TextMeshPro/Sprite",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat16_0 + _TextureSampleAdd;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0,0,0,0,0,[],[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat16_0 + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n",0,0,1,0,0,["UNITY_UI_ALPHACLIP"],[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n",0,0,2,0,0,["UNITY_UI_CLIP_RECT"],[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat16_2 = u_xlat1.w * u_xlat0.x + -0.00100000005;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    u_xlatb0.x = u_xlat16_2<0.0;\n    if(u_xlatb0.x){discard;}\n    return;\n}\n\n",0,0,3,0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]]]],["STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","UNITY_UI_CLIP_RECT"]],[["__","UNITY_UI_ALPHACLIP"]]],0,0,9,0,0,0,0,[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]],null,"",1,-1]],[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]],0]],0,410,"Assets/TextMesh Pro/Shaders/TMP_Sprite.shader",["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],null,null,[],9],[[[0,[["UI/Default",[[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n",0,0,0,0,0,[],[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3 = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n",0,0,1,0,0,["UNITY_UI_ALPHACLIP"],[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 = vs_COLOR0.w * 255.0;\n    u_xlat16_4 = roundEven(u_xlat16_4);\n    u_xlat16_0.w = u_xlat16_4 * 0.00392156886;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat16_2 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat2;\n    u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n    return;\n}\n\n",0,0,2,0,0,["UNITY_UI_CLIP_RECT"],[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]]],[0,"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n",0,0,3,0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]]]],["STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","_"],[[["_","UNITY_UI_CLIP_RECT"]],[["_","UNITY_UI_ALPHACLIP"]]],0,0,9,0,0,0,0,[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]],null,"",1,-1]],[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]],0]],0,30,"Resources/unity_builtin_extra",["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_"],null,null,[],9]],[],0,9,[0,0,0,0,0,0,0,0,0]]}],"shaders":[{"id":34,"assetBundleId":-1,"data":[[],"Hidden/InternalErrorShader",null,[],[[0,0,"",0,"",0,[4,null],[1,null],[2,null],[[1,null],[0,null],[0,null]],[[1,null],[0,null],[0,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[],[],[],[],[],0]],[],[],null,null,0,0,0]},{"id":410,"assetBundleId":-1,"data":[[],"TextMeshPro/Sprite",null,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[0,0,"Default",0,"",0,[0,"unity_GUIZTestMode"],[0,null],[0,"_CullMode"],[[5,null],[10,null],[0,null]],[[5,null],[10,null],[0,null]],[0,"_ColorMask"],[0,null],[0,null],[0,"_Stencil"],[0,"_StencilReadMask"],[0,"_StencilWriteMask"],[[0,"_StencilOp"],[0,null],[0,null],[0,"_StencilComp"]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["CanUseSpriteAtlas","true"],["IGNOREPROJECTOR","true"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]],["STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","UNITY_UI_CLIP_RECT"],1],[["__","UNITY_UI_ALPHACLIP"],1]],[[0,0,[],0,1,1,0],[0,0,["UNITY_UI_ALPHACLIP"],2,3,1,0],[0,0,["UNITY_UI_CLIP_RECT"],2,4,1,0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],2,5,1,0]],[],0]],[],[["_MainTex",4,0,0,0,0,"white",2],["_Color",0,1,1,1,1,"",0],["_StencilComp",2,8,0,0,0,"",0],["_Stencil",2,0,0,0,0,"",0],["_StencilOp",2,0,0,0,0,"",0],["_StencilWriteMask",2,255,0,0,0,"",0],["_StencilReadMask",2,255,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0],["_ColorMask",2,15,0,0,0,"",0],["_ClipRect",1,-32767,-32767,32767,32767,"",0],["_UseUIAlphaClip",2,0,0,0,0,"",0]],null,null,0,0,0]},{"id":420,"assetBundleId":-1,"data":[[],"TextMeshPro/Bitmap Custom Atlas",null,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[0,0,"",0,"",0,[0,"unity_GUIZTestMode"],[0,null],[0,"_CullMode"],[[5,null],[10,null],[0,null]],[[5,null],[10,null],[0,null]],[0,"_ColorMask"],[0,null],[0,null],[0,"_Stencil"],[0,"_StencilReadMask"],[0,"_StencilWriteMask"],[[0,"_StencilOp"],[0,null],[0,null],[0,"_StencilComp"]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],["STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","UNITY_UI_CLIP_RECT"],1],[["__","UNITY_UI_ALPHACLIP"],1]],[[0,0,[],6,7,1,0],[0,0,["UNITY_UI_ALPHACLIP"],6,8,1,0],[0,0,["UNITY_UI_CLIP_RECT"],6,9,1,0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],6,10,1,0]],[],0]],[],[["_MainTex",4,0,0,0,0,"white",0],["_FaceTex",4,0,0,0,0,"white",0],["_FaceColor",0,1,1,1,1,"",16],["_VertexOffsetX",2,0,0,0,0,"",0],["_VertexOffsetY",2,0,0,0,0,"",0],["_MaskSoftnessX",2,0,0,0,0,"",0],["_MaskSoftnessY",2,0,0,0,0,"",0],["_ClipRect",1,-32767,-32767,32767,32767,"",0],["_Padding",2,0,0,0,0,"",0],["_StencilComp",2,8,0,0,0,"",0],["_Stencil",2,0,0,0,0,"",0],["_StencilOp",2,0,0,0,0,"",0],["_StencilWriteMask",2,255,0,0,0,"",0],["_StencilReadMask",2,255,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0],["_ColorMask",2,15,0,0,0,"",0]],null,null,0,0,0]},{"id":424,"assetBundleId":-1,"data":[[],"TextMeshPro/Bitmap",null,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[0,0,"",0,"",0,[0,"unity_GUIZTestMode"],[0,null],[0,"_CullMode"],[[5,null],[10,null],[0,null]],[[5,null],[10,null],[0,null]],[0,"_ColorMask"],[0,null],[0,null],[0,"_Stencil"],[0,"_StencilReadMask"],[0,"_StencilWriteMask"],[[0,"_StencilOp"],[0,null],[0,null],[0,"_StencilComp"]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],["STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","UNITY_UI_CLIP_RECT"],1],[["__","UNITY_UI_ALPHACLIP"],1]],[[0,0,[],6,26,1,0],[0,0,["UNITY_UI_ALPHACLIP"],6,27,1,0],[0,0,["UNITY_UI_CLIP_RECT"],6,28,1,0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],6,29,1,0]],[],0]],[],[["_MainTex",4,0,0,0,0,"white",0],["_FaceTex",4,0,0,0,0,"white",0],["_FaceColor",0,1,1,1,1,"",16],["_VertexOffsetX",2,0,0,0,0,"",0],["_VertexOffsetY",2,0,0,0,0,"",0],["_MaskSoftnessX",2,0,0,0,0,"",0],["_MaskSoftnessY",2,0,0,0,0,"",0],["_ClipRect",1,-32767,-32767,32767,32767,"",0],["_StencilComp",2,8,0,0,0,"",0],["_Stencil",2,0,0,0,0,"",0],["_StencilOp",2,0,0,0,0,"",0],["_StencilWriteMask",2,255,0,0,0,"",0],["_StencilReadMask",2,255,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0],["_ColorMask",2,15,0,0,0,"",0]],null,null,0,0,0]},{"id":414,"assetBundleId":-1,"data":[[],"TextMeshPro/Distance Field SSD",null,["BEVEL_ON","FORCE_LINEAR","GLOW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[0,0,"",0,"",0,[0,"unity_GUIZTestMode"],[0,null],[0,"_CullMode"],[[1,null],[10,null],[0,null]],[[1,null],[10,null],[0,null]],[0,"_ColorMask"],[0,null],[0,null],[0,"_Stencil"],[0,"_StencilReadMask"],[0,"_StencilWriteMask"],[[0,"_StencilOp"],[0,null],[0,null],[0,"_StencilComp"]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],["BEVEL_ON","FORCE_LINEAR","GLOW_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","BEVEL_ON"],1],[["__","UNDERLAY_ON","UNDERLAY_INNER"],1],[["__","GLOW_ON"],1],[["__","FORCE_LINEAR"],1],[["__","UNITY_UI_CLIP_RECT"],1],[["__","UNITY_UI_ALPHACLIP"],1]],[[0,0,[],30,31,1,0],[0,0,["UNITY_UI_ALPHACLIP"],30,32,1,0],[0,0,["UNITY_UI_CLIP_RECT"],30,33,1,0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],30,34,1,0]],[],0]],[],[["_FaceTex",4,0,0,0,0,"white",0],["_FaceUVSpeedX",3,0,-5,5,0,"",0],["_FaceUVSpeedY",3,0,-5,5,0,"",0],["_FaceColor",0,1,1,1,1,"",16],["_FaceDilate",3,0,-1,1,0,"",0],["_OutlineColor",0,0,0,0,1,"",16],["_OutlineTex",4,0,0,0,0,"white",0],["_OutlineUVSpeedX",3,0,-5,5,0,"",0],["_OutlineUVSpeedY",3,0,-5,5,0,"",0],["_OutlineWidth",3,0,0,1,0,"",0],["_OutlineSoftness",3,0,0,1,0,"",0],["_Bevel",3,0.5,0,1,0,"",0],["_BevelOffset",3,0,-0.5,0.5,0,"",0],["_BevelWidth",3,0,-0.5,0.5,0,"",0],["_BevelClamp",3,0,0,1,0,"",0],["_BevelRoundness",3,0,0,1,0,"",0],["_LightAngle",3,3.14159989356995,0,6.28318548202515,0,"",0],["_SpecularColor",0,1,1,1,1,"",16],["_SpecularPower",3,2,0,4,0,"",0],["_Reflectivity",3,10,5,15,0,"",0],["_Diffuse",3,0.5,0,1,0,"",0],["_Ambient",3,0.5,1,0,0,"",0],["_BumpMap",4,0,0,0,0,"bump",0],["_BumpOutline",3,0,0,1,0,"",0],["_BumpFace",3,0,0,1,0,"",0],["_ReflectFaceColor",0,0,0,0,1,"",0],["_ReflectOutlineColor",0,0,0,0,1,"",0],["_Cube",4,0,0,0,0,"black",0],["_EnvMatrixRotation",1,0,0,0,0,"",0],["_UnderlayColor",0,0,0,0,0.5,"",16],["_UnderlayOffsetX",3,0,-1,1,0,"",0],["_UnderlayOffsetY",3,0,-1,1,0,"",0],["_UnderlayDilate",3,0,-1,1,0,"",0],["_UnderlaySoftness",3,0,0,1,0,"",0],["_GlowColor",0,0,1,0,0.5,"",16],["_GlowOffset",3,0,-1,1,0,"",0],["_GlowInner",3,0.0500000007450581,0,1,0,"",0],["_GlowOuter",3,0.0500000007450581,0,1,0,"",0],["_GlowPower",3,0.75,1,0,0,"",0],["_WeightNormal",2,0,0,0,0,"",0],["_WeightBold",2,0.5,0,0,0,"",0],["_ShaderFlags",2,0,0,0,0,"",0],["_ScaleRatioA",2,1,0,0,0,"",0],["_ScaleRatioB",2,1,0,0,0,"",0],["_ScaleRatioC",2,1,0,0,0,"",0],["_MainTex",4,0,0,0,0,"white",0],["_TextureWidth",2,512,0,0,0,"",0],["_TextureHeight",2,512,0,0,0,"",0],["_GradientScale",2,5,0,0,0,"",0],["_ScaleX",2,1,0,0,0,"",0],["_ScaleY",2,1,0,0,0,"",0],["_PerspectiveFilter",3,0.875,0,1,0,"",0],["_Sharpness",3,0,-1,1,0,"",0],["_VertexOffsetX",2,0,0,0,0,"",0],["_VertexOffsetY",2,0,0,0,0,"",0],["_MaskCoord",1,0,0,32767,32767,"",0],["_ClipRect",1,-32767,-32767,32767,32767,"",0],["_MaskSoftnessX",2,0,0,0,0,"",0],["_MaskSoftnessY",2,0,0,0,0,"",0],["_StencilComp",2,8,0,0,0,"",0],["_Stencil",2,0,0,0,0,"",0],["_StencilOp",2,0,0,0,0,"",0],["_StencilWriteMask",2,255,0,0,0,"",0],["_StencilReadMask",2,255,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0],["_ColorMask",2,15,0,0,0,"",0]],0,408,0,0,0]},{"id":418,"assetBundleId":-1,"data":[[],"TextMeshPro/Mobile/Distance Field - Masking",null,["OUTLINE_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[0,0,"",0,"",0,[0,"unity_GUIZTestMode"],[0,null],[0,"_CullMode"],[[1,null],[10,null],[0,null]],[[1,null],[10,null],[0,null]],[0,"_ColorMask"],[0,null],[0,null],[0,"_Stencil"],[0,"_StencilReadMask"],[0,"_StencilWriteMask"],[[0,"_StencilOp"],[0,null],[0,null],[0,"_StencilComp"]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],["OUTLINE_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","OUTLINE_ON"],1],[["__","UNDERLAY_ON","UNDERLAY_INNER"],1],[["__","UNITY_UI_CLIP_RECT"],1],[["__","UNITY_UI_ALPHACLIP"],1]],[[0,0,[],35,36,1,0],[0,0,["UNITY_UI_ALPHACLIP"],35,37,1,0],[0,0,["UNITY_UI_CLIP_RECT"],35,36,1,0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],35,37,1,0]],[],0]],[],[["_FaceColor",0,1,1,1,1,"",16],["_FaceDilate",3,0,-1,1,0,"",0],["_OutlineColor",0,0,0,0,1,"",16],["_OutlineWidth",3,0,0,1,0,"",0],["_OutlineSoftness",3,0,0,1,0,"",0],["_UnderlayColor",0,0,0,0,0.5,"",16],["_UnderlayOffsetX",3,0,-1,1,0,"",0],["_UnderlayOffsetY",3,0,-1,1,0,"",0],["_UnderlayDilate",3,0,-1,1,0,"",0],["_UnderlaySoftness",3,0,0,1,0,"",0],["_WeightNormal",2,0,0,0,0,"",0],["_WeightBold",2,0.5,0,0,0,"",0],["_ShaderFlags",2,0,0,0,0,"",0],["_ScaleRatioA",2,1,0,0,0,"",0],["_ScaleRatioB",2,1,0,0,0,"",0],["_ScaleRatioC",2,1,0,0,0,"",0],["_MainTex",4,0,0,0,0,"white",0],["_TextureWidth",2,512,0,0,0,"",0],["_TextureHeight",2,512,0,0,0,"",0],["_GradientScale",2,5,0,0,0,"",0],["_ScaleX",2,1,0,0,0,"",0],["_ScaleY",2,1,0,0,0,"",0],["_PerspectiveFilter",3,0.875,0,1,0,"",0],["_Sharpness",3,0,-1,1,0,"",0],["_VertexOffsetX",2,0,0,0,0,"",0],["_VertexOffsetY",2,0,0,0,0,"",0],["_ClipRect",1,-32767,-32767,32767,32767,"",0],["_MaskSoftnessX",2,0,0,0,0,"",0],["_MaskSoftnessY",2,0,0,0,0,"",0],["_MaskTex",4,0,0,0,0,"white",0],["_MaskInverse",2,0,0,0,0,"",0],["_MaskEdgeColor",0,1,1,1,1,"",0],["_MaskEdgeSoftness",3,0.00999999977648258,0,1,0,"",0],["_MaskWipeControl",3,0.5,0,1,0,"",0],["_StencilComp",2,8,0,0,0,"",0],["_Stencil",2,0,0,0,0,"",0],["_StencilOp",2,0,0,0,0,"",0],["_StencilWriteMask",2,255,0,0,0,"",0],["_StencilReadMask",2,255,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0],["_ColorMask",2,15,0,0,0,"",0]],null,null,0,0,0]},{"id":422,"assetBundleId":-1,"data":[[],"TextMeshPro/Mobile/Distance Field (Surface)",null,["DIRECTIONAL","FOG_EXP","FOG_EXP2","FOG_LINEAR","GLOW_ON","LIGHTPROBE_SH","VERTEXLIGHT_ON","SHADOWS_DEPTH","INSTANCING_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__","SHADOWS_CUBE"],[[0,0,"FORWARD",4,"",0,[4,null],[0,null],[0,"_CullMode"],[[5,null],[10,null],[0,null]],[[5,null],[10,null],[0,null]],[14,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDBASE"],["QUEUE","Transparent"],["RenderType","Transparent"]],["DIRECTIONAL","FOG_EXP","FOG_EXP2","FOG_LINEAR","GLOW_ON","INSTANCING_ON","LIGHTPROBE_SH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","VERTEXLIGHT_ON","__"],[[["__","GLOW_ON"],1],[["__","INSTANCING_ON"],1],[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"],1],[["DIRECTIONAL"],0],[["DIRECTIONAL","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","LIGHTPROBE_SH"],0]],[[0,0,["DIRECTIONAL"],38,39,1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH"],38,39,1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON"],40,39,1,0]],[],0],[1,0,"Caster",8,"",0,[4,null],[1,null],[0,null],[[1,null],[0,null],[0,null]],[[1,null],[0,null],[0,null]],[14,null],[1,null],[1,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["LIGHTMODE","SHADOWCASTER"],["QUEUE","Transparent"],["RenderType","Transparent"],["SHADOWSUPPORT","true"]],["SHADOWS_CUBE","SHADOWS_DEPTH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO"],[[["SHADOWS_DEPTH"],0],[["SHADOWS_CUBE"],0]],[[1,0,["SHADOWS_DEPTH"],41,42,1,0]],[],0]],[],[["_FaceTex",4,0,0,0,0,"white",0],["_FaceColor",0,1,1,1,1,"",16],["_FaceDilate",3,0,-1,1,0,"",0],["_OutlineColor",0,0,0,0,1,"",16],["_OutlineTex",4,0,0,0,0,"white",0],["_OutlineWidth",3,0,0,1,0,"",0],["_OutlineSoftness",3,0,0,1,0,"",0],["_GlowColor",0,0,1,0,0.5,"",16],["_GlowOffset",3,0,-1,1,0,"",0],["_GlowInner",3,0.0500000007450581,0,1,0,"",0],["_GlowOuter",3,0.0500000007450581,0,1,0,"",0],["_GlowPower",3,0.75,1,0,0,"",0],["_WeightNormal",2,0,0,0,0,"",0],["_WeightBold",2,0.5,0,0,0,"",0],["_ShaderFlags",2,0,0,0,0,"",0],["_ScaleRatioA",2,1,0,0,0,"",0],["_ScaleRatioB",2,1,0,0,0,"",0],["_ScaleRatioC",2,1,0,0,0,"",0],["_MainTex",4,0,0,0,0,"white",0],["_TextureWidth",2,512,0,0,0,"",0],["_TextureHeight",2,512,0,0,0,"",0],["_GradientScale",2,5,0,0,0,"",0],["_ScaleX",2,1,0,0,0,"",0],["_ScaleY",2,1,0,0,0,"",0],["_PerspectiveFilter",3,0.875,0,1,0,"",0],["_Sharpness",3,0,-1,1,0,"",0],["_VertexOffsetX",2,0,0,0,0,"",0],["_VertexOffsetY",2,0,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0]],null,null,0,0,0]},{"id":416,"assetBundleId":-1,"data":[[],"TextMeshPro/Distance Field",null,["BEVEL_ON","GLOW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[0,0,"",0,"",0,[0,"unity_GUIZTestMode"],[0,null],[0,"_CullMode"],[[1,null],[10,null],[0,null]],[[1,null],[10,null],[0,null]],[0,"_ColorMask"],[0,null],[0,null],[0,"_Stencil"],[0,"_StencilReadMask"],[0,"_StencilWriteMask"],[[0,"_StencilOp"],[0,null],[0,null],[0,"_StencilComp"]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],["BEVEL_ON","GLOW_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","BEVEL_ON"],1],[["__","UNDERLAY_ON","UNDERLAY_INNER"],1],[["__","GLOW_ON"],1],[["__","UNITY_UI_CLIP_RECT"],1],[["__","UNITY_UI_ALPHACLIP"],1]],[[0,0,[],43,44,1,0],[0,0,["UNITY_UI_ALPHACLIP"],43,45,1,0],[0,0,["UNITY_UI_CLIP_RECT"],43,46,1,0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],43,47,1,0]],[],0]],[],[["_FaceTex",4,0,0,0,0,"white",0],["_FaceUVSpeedX",3,0,-5,5,0,"",0],["_FaceUVSpeedY",3,0,-5,5,0,"",0],["_FaceColor",0,1,1,1,1,"",16],["_FaceDilate",3,0,-1,1,0,"",0],["_OutlineColor",0,0,0,0,1,"",16],["_OutlineTex",4,0,0,0,0,"white",0],["_OutlineUVSpeedX",3,0,-5,5,0,"",0],["_OutlineUVSpeedY",3,0,-5,5,0,"",0],["_OutlineWidth",3,0,0,1,0,"",0],["_OutlineSoftness",3,0,0,1,0,"",0],["_Bevel",3,0.5,0,1,0,"",0],["_BevelOffset",3,0,-0.5,0.5,0,"",0],["_BevelWidth",3,0,-0.5,0.5,0,"",0],["_BevelClamp",3,0,0,1,0,"",0],["_BevelRoundness",3,0,0,1,0,"",0],["_LightAngle",3,3.14159989356995,0,6.28318548202515,0,"",0],["_SpecularColor",0,1,1,1,1,"",16],["_SpecularPower",3,2,0,4,0,"",0],["_Reflectivity",3,10,5,15,0,"",0],["_Diffuse",3,0.5,0,1,0,"",0],["_Ambient",3,0.5,1,0,0,"",0],["_BumpMap",4,0,0,0,0,"bump",0],["_BumpOutline",3,0,0,1,0,"",0],["_BumpFace",3,0,0,1,0,"",0],["_ReflectFaceColor",0,0,0,0,1,"",0],["_ReflectOutlineColor",0,0,0,0,1,"",0],["_Cube",4,0,0,0,0,"black",0],["_EnvMatrixRotation",1,0,0,0,0,"",0],["_UnderlayColor",0,0,0,0,0.5,"",16],["_UnderlayOffsetX",3,0,-1,1,0,"",0],["_UnderlayOffsetY",3,0,-1,1,0,"",0],["_UnderlayDilate",3,0,-1,1,0,"",0],["_UnderlaySoftness",3,0,0,1,0,"",0],["_GlowColor",0,0,1,0,0.5,"",16],["_GlowOffset",3,0,-1,1,0,"",0],["_GlowInner",3,0.0500000007450581,0,1,0,"",0],["_GlowOuter",3,0.0500000007450581,0,1,0,"",0],["_GlowPower",3,0.75,1,0,0,"",0],["_WeightNormal",2,0,0,0,0,"",0],["_WeightBold",2,0.5,0,0,0,"",0],["_ShaderFlags",2,0,0,0,0,"",0],["_ScaleRatioA",2,1,0,0,0,"",0],["_ScaleRatioB",2,1,0,0,0,"",0],["_ScaleRatioC",2,1,0,0,0,"",0],["_MainTex",4,0,0,0,0,"white",0],["_TextureWidth",2,512,0,0,0,"",0],["_TextureHeight",2,512,0,0,0,"",0],["_GradientScale",2,5,0,0,0,"",0],["_ScaleX",2,1,0,0,0,"",0],["_ScaleY",2,1,0,0,0,"",0],["_PerspectiveFilter",3,0.875,0,1,0,"",0],["_Sharpness",3,0,-1,1,0,"",0],["_VertexOffsetX",2,0,0,0,0,"",0],["_VertexOffsetY",2,0,0,0,0,"",0],["_MaskCoord",1,0,0,32767,32767,"",0],["_ClipRect",1,-32767,-32767,32767,32767,"",0],["_MaskSoftnessX",2,0,0,0,0,"",0],["_MaskSoftnessY",2,0,0,0,0,"",0],["_StencilComp",2,8,0,0,0,"",0],["_Stencil",2,0,0,0,0,"",0],["_StencilOp",2,0,0,0,0,"",0],["_StencilWriteMask",2,255,0,0,0,"",0],["_StencilReadMask",2,255,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0],["_ColorMask",2,15,0,0,0,"",0]],0,408,0,0,0]},{"id":428,"assetBundleId":-1,"data":[[],"TextMeshPro/Mobile/Distance Field Overlay",null,["OUTLINE_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[0,0,"",0,"",0,[8,null],[0,null],[0,"_CullMode"],[[1,null],[10,null],[0,null]],[[1,null],[10,null],[0,null]],[0,"_ColorMask"],[0,null],[0,null],[0,"_Stencil"],[0,"_StencilReadMask"],[0,"_StencilWriteMask"],[[0,"_StencilOp"],[0,null],[0,null],[0,"_StencilComp"]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["QUEUE","Overlay"],["RenderType","Transparent"]],["OUTLINE_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","OUTLINE_ON"],1],[["__","UNDERLAY_ON","UNDERLAY_INNER"],1],[["__","UNITY_UI_CLIP_RECT"],1],[["__","UNITY_UI_ALPHACLIP"],1]],[[0,0,[],35,48,1,0],[0,0,["UNITY_UI_ALPHACLIP"],35,49,1,0],[0,0,["UNITY_UI_CLIP_RECT"],35,50,1,0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],35,51,1,0]],[],0]],[],[["_FaceColor",0,1,1,1,1,"",16],["_FaceDilate",3,0,-1,1,0,"",0],["_OutlineColor",0,0,0,0,1,"",16],["_OutlineWidth",3,0,0,1,0,"",0],["_OutlineSoftness",3,0,0,1,0,"",0],["_UnderlayColor",0,0,0,0,0.5,"",16],["_UnderlayOffsetX",3,0,-1,1,0,"",0],["_UnderlayOffsetY",3,0,-1,1,0,"",0],["_UnderlayDilate",3,0,-1,1,0,"",0],["_UnderlaySoftness",3,0,0,1,0,"",0],["_WeightNormal",2,0,0,0,0,"",0],["_WeightBold",2,0.5,0,0,0,"",0],["_ShaderFlags",2,0,0,0,0,"",0],["_ScaleRatioA",2,1,0,0,0,"",0],["_ScaleRatioB",2,1,0,0,0,"",0],["_ScaleRatioC",2,1,0,0,0,"",0],["_MainTex",4,0,0,0,0,"white",0],["_TextureWidth",2,512,0,0,0,"",0],["_TextureHeight",2,512,0,0,0,"",0],["_GradientScale",2,5,0,0,0,"",0],["_ScaleX",2,1,0,0,0,"",0],["_ScaleY",2,1,0,0,0,"",0],["_PerspectiveFilter",3,0.875,0,1,0,"",0],["_Sharpness",3,0,-1,1,0,"",0],["_VertexOffsetX",2,0,0,0,0,"",0],["_VertexOffsetY",2,0,0,0,0,"",0],["_ClipRect",1,-32767,-32767,32767,32767,"",0],["_MaskSoftnessX",2,0,0,0,0,"",0],["_MaskSoftnessY",2,0,0,0,0,"",0],["_StencilComp",2,8,0,0,0,"",0],["_Stencil",2,0,0,0,0,"",0],["_StencilOp",2,0,0,0,0,"",0],["_StencilWriteMask",2,255,0,0,0,"",0],["_StencilReadMask",2,255,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0],["_ColorMask",2,15,0,0,0,"",0]],null,null,0,0,0]},{"id":412,"assetBundleId":-1,"data":[[],"TextMeshPro/Distance Field Overlay",null,["BEVEL_ON","GLOW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[0,0,"",0,"",0,[8,null],[0,null],[0,"_CullMode"],[[1,null],[10,null],[0,null]],[[1,null],[10,null],[0,null]],[0,"_ColorMask"],[0,null],[0,null],[0,"_Stencil"],[0,"_StencilReadMask"],[0,"_StencilWriteMask"],[[0,"_StencilOp"],[0,null],[0,null],[0,"_StencilComp"]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["QUEUE","Overlay"],["RenderType","Transparent"]],["BEVEL_ON","GLOW_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","BEVEL_ON"],1],[["__","UNDERLAY_ON","UNDERLAY_INNER"],1],[["__","GLOW_ON"],1],[["__","UNITY_UI_CLIP_RECT"],1],[["__","UNITY_UI_ALPHACLIP"],1]],[[0,0,[],43,44,1,0],[0,0,["UNITY_UI_ALPHACLIP"],43,45,1,0],[0,0,["UNITY_UI_CLIP_RECT"],43,46,1,0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],43,47,1,0]],[],0]],[],[["_FaceTex",4,0,0,0,0,"white",0],["_FaceUVSpeedX",3,0,-5,5,0,"",0],["_FaceUVSpeedY",3,0,-5,5,0,"",0],["_FaceColor",0,1,1,1,1,"",16],["_FaceDilate",3,0,-1,1,0,"",0],["_OutlineColor",0,0,0,0,1,"",16],["_OutlineTex",4,0,0,0,0,"white",0],["_OutlineUVSpeedX",3,0,-5,5,0,"",0],["_OutlineUVSpeedY",3,0,-5,5,0,"",0],["_OutlineWidth",3,0,0,1,0,"",0],["_OutlineSoftness",3,0,0,1,0,"",0],["_Bevel",3,0.5,0,1,0,"",0],["_BevelOffset",3,0,-0.5,0.5,0,"",0],["_BevelWidth",3,0,-0.5,0.5,0,"",0],["_BevelClamp",3,0,0,1,0,"",0],["_BevelRoundness",3,0,0,1,0,"",0],["_LightAngle",3,3.14159989356995,0,6.28318548202515,0,"",0],["_SpecularColor",0,1,1,1,1,"",16],["_SpecularPower",3,2,0,4,0,"",0],["_Reflectivity",3,10,5,15,0,"",0],["_Diffuse",3,0.5,0,1,0,"",0],["_Ambient",3,0.5,1,0,0,"",0],["_BumpMap",4,0,0,0,0,"bump",0],["_BumpOutline",3,0,0,1,0,"",0],["_BumpFace",3,0,0,1,0,"",0],["_ReflectFaceColor",0,0,0,0,1,"",0],["_ReflectOutlineColor",0,0,0,0,1,"",0],["_Cube",4,0,0,0,0,"black",0],["_EnvMatrixRotation",1,0,0,0,0,"",0],["_UnderlayColor",0,0,0,0,0.5,"",16],["_UnderlayOffsetX",3,0,-1,1,0,"",0],["_UnderlayOffsetY",3,0,-1,1,0,"",0],["_UnderlayDilate",3,0,-1,1,0,"",0],["_UnderlaySoftness",3,0,0,1,0,"",0],["_GlowColor",0,0,1,0,0.5,"",16],["_GlowOffset",3,0,-1,1,0,"",0],["_GlowInner",3,0.0500000007450581,0,1,0,"",0],["_GlowOuter",3,0.0500000007450581,0,1,0,"",0],["_GlowPower",3,0.75,1,0,0,"",0],["_WeightNormal",2,0,0,0,0,"",0],["_WeightBold",2,0.5,0,0,0,"",0],["_ShaderFlags",2,0,0,0,0,"",0],["_ScaleRatioA",2,1,0,0,0,"",0],["_ScaleRatioB",2,1,0,0,0,"",0],["_ScaleRatioC",2,1,0,0,0,"",0],["_MainTex",4,0,0,0,0,"white",0],["_TextureWidth",2,512,0,0,0,"",0],["_TextureHeight",2,512,0,0,0,"",0],["_GradientScale",2,5,0,0,0,"",0],["_ScaleX",2,1,0,0,0,"",0],["_ScaleY",2,1,0,0,0,"",0],["_PerspectiveFilter",3,0.875,0,1,0,"",0],["_Sharpness",3,0,-1,1,0,"",0],["_VertexOffsetX",2,0,0,0,0,"",0],["_VertexOffsetY",2,0,0,0,0,"",0],["_MaskCoord",1,0,0,32767,32767,"",0],["_ClipRect",1,-32767,-32767,32767,32767,"",0],["_MaskSoftnessX",2,0,0,0,0,"",0],["_MaskSoftnessY",2,0,0,0,0,"",0],["_StencilComp",2,8,0,0,0,"",0],["_Stencil",2,0,0,0,0,"",0],["_StencilOp",2,0,0,0,0,"",0],["_StencilWriteMask",2,255,0,0,0,"",0],["_StencilReadMask",2,255,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0],["_ColorMask",2,15,0,0,0,"",0]],0,408,0,0,0]},{"id":408,"assetBundleId":-1,"data":[[],"TextMeshPro/Mobile/Distance Field",null,["OUTLINE_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[0,0,"",0,"",0,[0,"unity_GUIZTestMode"],[0,null],[0,"_CullMode"],[[1,null],[10,null],[0,null]],[[1,null],[10,null],[0,null]],[0,"_ColorMask"],[0,null],[0,null],[0,"_Stencil"],[0,"_StencilReadMask"],[0,"_StencilWriteMask"],[[0,"_StencilOp"],[0,null],[0,null],[0,"_StencilComp"]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],["OUTLINE_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","OUTLINE_ON"],1],[["__","UNDERLAY_ON","UNDERLAY_INNER"],1],[["__","UNITY_UI_CLIP_RECT"],1],[["__","UNITY_UI_ALPHACLIP"],1]],[[0,0,[],35,48,1,0],[0,0,["UNITY_UI_ALPHACLIP"],35,49,1,0],[0,0,["UNITY_UI_CLIP_RECT"],35,50,1,0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],35,51,1,0],[0,0,["OUTLINE_ON","UNDERLAY_ON"],61,62,1,0],[0,0,["OUTLINE_ON"],35,63,1,0],[0,0,["UNITY_UI_ALPHACLIP","OUTLINE_ON","UNDERLAY_ON"],61,64,1,0],[0,0,["UNITY_UI_ALPHACLIP","OUTLINE_ON"],35,65,1,0],[0,0,["UNITY_UI_CLIP_RECT","OUTLINE_ON","UNDERLAY_ON"],61,66,1,0],[0,0,["UNITY_UI_CLIP_RECT","OUTLINE_ON"],35,67,1,0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","OUTLINE_ON","UNDERLAY_ON"],61,68,1,0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","OUTLINE_ON"],35,69,1,0]],[],0]],[],[["_FaceColor",0,1,1,1,1,"",16],["_FaceDilate",3,0,-1,1,0,"",0],["_OutlineColor",0,0,0,0,1,"",16],["_OutlineWidth",3,0,0,1,0,"",0],["_OutlineSoftness",3,0,0,1,0,"",0],["_UnderlayColor",0,0,0,0,0.5,"",16],["_UnderlayOffsetX",3,0,-1,1,0,"",0],["_UnderlayOffsetY",3,0,-1,1,0,"",0],["_UnderlayDilate",3,0,-1,1,0,"",0],["_UnderlaySoftness",3,0,0,1,0,"",0],["_WeightNormal",2,0,0,0,0,"",0],["_WeightBold",2,0.5,0,0,0,"",0],["_ShaderFlags",2,0,0,0,0,"",0],["_ScaleRatioA",2,1,0,0,0,"",0],["_ScaleRatioB",2,1,0,0,0,"",0],["_ScaleRatioC",2,1,0,0,0,"",0],["_MainTex",4,0,0,0,0,"white",0],["_TextureWidth",2,512,0,0,0,"",0],["_TextureHeight",2,512,0,0,0,"",0],["_GradientScale",2,5,0,0,0,"",0],["_ScaleX",2,1,0,0,0,"",0],["_ScaleY",2,1,0,0,0,"",0],["_PerspectiveFilter",3,0.875,0,1,0,"",0],["_Sharpness",3,0,-1,1,0,"",0],["_VertexOffsetX",2,0,0,0,0,"",0],["_VertexOffsetY",2,0,0,0,0,"",0],["_ClipRect",1,-32767,-32767,32767,32767,"",0],["_MaskSoftnessX",2,0,0,0,0,"",0],["_MaskSoftnessY",2,0,0,0,0,"",0],["_StencilComp",2,8,0,0,0,"",0],["_Stencil",2,0,0,0,0,"",0],["_StencilOp",2,0,0,0,0,"",0],["_StencilWriteMask",2,255,0,0,0,"",0],["_StencilReadMask",2,255,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0],["_ColorMask",2,15,0,0,0,"",0]],null,null,0,0,0]},{"id":430,"assetBundleId":-1,"data":[[],"TextMeshPro/Mobile/Distance Field SSD",null,["OUTLINE_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[0,0,"",0,"",0,[0,"unity_GUIZTestMode"],[0,null],[0,"_CullMode"],[[1,null],[10,null],[0,null]],[[1,null],[10,null],[0,null]],[0,"_ColorMask"],[0,null],[0,null],[0,"_Stencil"],[0,"_StencilReadMask"],[0,"_StencilWriteMask"],[[0,"_StencilOp"],[0,null],[0,null],[0,"_StencilComp"]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],["OUTLINE_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","OUTLINE_ON"],1],[["__","UNDERLAY_ON","UNDERLAY_INNER"],1],[["__","UNITY_UI_CLIP_RECT"],1],[["__","UNITY_UI_ALPHACLIP"],1]],[[0,0,[],70,71,1,0],[0,0,["UNITY_UI_ALPHACLIP"],70,72,1,0],[0,0,["UNITY_UI_CLIP_RECT"],73,74,1,0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],73,75,1,0]],[],0]],[],[["_FaceColor",0,1,1,1,1,"",16],["_FaceDilate",3,0,-1,1,0,"",0],["_OutlineColor",0,0,0,0,1,"",16],["_OutlineWidth",3,0,0,1,0,"",0],["_OutlineSoftness",3,0,0,1,0,"",0],["_UnderlayColor",0,0,0,0,0.5,"",16],["_UnderlayOffsetX",3,0,-1,1,0,"",0],["_UnderlayOffsetY",3,0,-1,1,0,"",0],["_UnderlayDilate",3,0,-1,1,0,"",0],["_UnderlaySoftness",3,0,0,1,0,"",0],["_WeightNormal",2,0,0,0,0,"",0],["_WeightBold",2,0.5,0,0,0,"",0],["_ShaderFlags",2,0,0,0,0,"",0],["_ScaleRatioA",2,1,0,0,0,"",0],["_ScaleRatioB",2,1,0,0,0,"",0],["_ScaleRatioC",2,1,0,0,0,"",0],["_MainTex",4,0,0,0,0,"white",0],["_TextureWidth",2,512,0,0,0,"",0],["_TextureHeight",2,512,0,0,0,"",0],["_GradientScale",2,5,0,0,0,"",0],["_ScaleX",2,1,0,0,0,"",0],["_ScaleY",2,1,0,0,0,"",0],["_PerspectiveFilter",3,0.875,0,1,0,"",0],["_Sharpness",3,0,-1,1,0,"",0],["_VertexOffsetX",2,0,0,0,0,"",0],["_VertexOffsetY",2,0,0,0,0,"",0],["_ClipRect",1,-32767,-32767,32767,32767,"",0],["_MaskSoftnessX",2,0,0,0,0,"",0],["_MaskSoftnessY",2,0,0,0,0,"",0],["_MaskTex",4,0,0,0,0,"white",0],["_MaskInverse",2,0,0,0,0,"",0],["_MaskEdgeColor",0,1,1,1,1,"",0],["_MaskEdgeSoftness",3,0.00999999977648258,0,1,0,"",0],["_MaskWipeControl",3,0.5,0,1,0,"",0],["_StencilComp",2,8,0,0,0,"",0],["_Stencil",2,0,0,0,0,"",0],["_StencilOp",2,0,0,0,0,"",0],["_StencilWriteMask",2,255,0,0,0,"",0],["_StencilReadMask",2,255,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0],["_ColorMask",2,15,0,0,0,"",0]],null,null,0,0,0]},{"id":426,"assetBundleId":-1,"data":[[],"TextMeshPro/Mobile/Bitmap",null,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[0,0,"",0,"",0,[0,"unity_GUIZTestMode"],[0,null],[0,"_CullMode"],[[5,null],[10,null],[0,null]],[[5,null],[10,null],[0,null]],[0,"_ColorMask"],[0,null],[0,null],[0,"_Stencil"],[0,"_StencilReadMask"],[0,"_StencilWriteMask"],[[0,"_StencilOp"],[0,null],[0,null],[0,"_StencilComp"]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],["STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","UNITY_UI_CLIP_RECT"],1],[["__","UNITY_UI_ALPHACLIP"],1]],[[0,0,[],76,77,1,0],[0,0,["UNITY_UI_ALPHACLIP"],76,78,1,0],[0,0,["UNITY_UI_CLIP_RECT"],76,79,1,0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],76,80,1,0]],[],0]],[],[["_MainTex",4,0,0,0,0,"white",0],["_Color",0,1,1,1,1,"",16],["_DiffusePower",3,1,1,4,0,"",0],["_VertexOffsetX",2,0,0,0,0,"",0],["_VertexOffsetY",2,0,0,0,0,"",0],["_MaskSoftnessX",2,0,0,0,0,"",0],["_MaskSoftnessY",2,0,0,0,0,"",0],["_ClipRect",1,-32767,-32767,32767,32767,"",0],["_StencilComp",2,8,0,0,0,"",0],["_Stencil",2,0,0,0,0,"",0],["_StencilOp",2,0,0,0,0,"",0],["_StencilWriteMask",2,255,0,0,0,"",0],["_StencilReadMask",2,255,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0],["_ColorMask",2,15,0,0,0,"",0]],null,null,0,0,0]},{"id":432,"assetBundleId":-1,"data":[[],"TextMeshPro/Distance Field (Surface)",null,["DIRECTIONAL","FOG_EXP","FOG_EXP2","FOG_LINEAR","GLOW_ON","LIGHTPROBE_SH","VERTEXLIGHT_ON","DIRECTIONAL_COOKIE","POINT","POINT_COOKIE","SPOT","SHADOWS_DEPTH","INSTANCING_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__","SHADOWS_CUBE"],[[0,0,"FORWARD",4,"",0,[4,null],[0,null],[0,"_CullMode"],[[5,null],[10,null],[0,null]],[[5,null],[10,null],[0,null]],[14,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDBASE"],["QUEUE","Transparent"],["RenderType","Transparent"]],["DIRECTIONAL","FOG_EXP","FOG_EXP2","FOG_LINEAR","GLOW_ON","INSTANCING_ON","LIGHTPROBE_SH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","VERTEXLIGHT_ON","__"],[[["__","GLOW_ON"],1],[["__","INSTANCING_ON"],1],[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"],1],[["DIRECTIONAL"],0],[["DIRECTIONAL","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","LIGHTPROBE_SH"],0]],[[0,0,["DIRECTIONAL"],38,81,1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH"],38,81,1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON"],40,81,1,0]],[],0],[1,0,"FORWARD",5,"",0,[4,null],[0,null],[0,"_CullMode"],[[5,null],[1,null],[0,null]],[[5,null],[1,null],[0,null]],[14,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDADD"],["QUEUE","Transparent"],["RenderType","Transparent"]],["DIRECTIONAL","DIRECTIONAL_COOKIE","FOG_EXP","FOG_EXP2","FOG_LINEAR","GLOW_ON","POINT","POINT_COOKIE","SPOT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[["__","GLOW_ON"],1],[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"],1],[["POINT"],0],[["DIRECTIONAL"],0],[["SPOT"],0],[["POINT_COOKIE"],0],[["DIRECTIONAL_COOKIE"],0]],[[1,0,["POINT"],82,83,1,0],[1,0,["DIRECTIONAL"],84,85,1,0],[1,0,["SPOT"],86,87,1,0],[1,0,["POINT_COOKIE"],82,88,1,0],[1,0,["DIRECTIONAL_COOKIE"],89,90,1,0]],[],0],[2,0,"Caster",8,"",0,[4,null],[1,null],[0,null],[[1,null],[0,null],[0,null]],[[1,null],[0,null],[0,null]],[14,null],[1,null],[1,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["LIGHTMODE","SHADOWCASTER"],["QUEUE","Transparent"],["RenderType","Transparent"],["SHADOWSUPPORT","true"]],["SHADOWS_CUBE","SHADOWS_DEPTH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO"],[[["SHADOWS_DEPTH"],0],[["SHADOWS_CUBE"],0]],[[2,0,["SHADOWS_DEPTH"],41,42,1,0]],[],0]],[],[["_FaceTex",4,0,0,0,0,"white",0],["_FaceUVSpeedX",3,0,-5,5,0,"",0],["_FaceUVSpeedY",3,0,-5,5,0,"",0],["_FaceColor",0,1,1,1,1,"",16],["_FaceDilate",3,0,-1,1,0,"",0],["_OutlineColor",0,0,0,0,1,"",16],["_OutlineTex",4,0,0,0,0,"white",0],["_OutlineUVSpeedX",3,0,-5,5,0,"",0],["_OutlineUVSpeedY",3,0,-5,5,0,"",0],["_OutlineWidth",3,0,0,1,0,"",0],["_OutlineSoftness",3,0,0,1,0,"",0],["_Bevel",3,0.5,0,1,0,"",0],["_BevelOffset",3,0,-0.5,0.5,0,"",0],["_BevelWidth",3,0,-0.5,0.5,0,"",0],["_BevelClamp",3,0,0,1,0,"",0],["_BevelRoundness",3,0,0,1,0,"",0],["_BumpMap",4,0,0,0,0,"bump",0],["_BumpOutline",3,0.5,0,1,0,"",0],["_BumpFace",3,0.5,0,1,0,"",0],["_ReflectFaceColor",0,0,0,0,1,"",0],["_ReflectOutlineColor",0,0,0,0,1,"",0],["_Cube",4,0,0,0,0,"black",0],["_EnvMatrixRotation",1,0,0,0,0,"",0],["_SpecColor",0,0,0,0,1,"",16],["_FaceShininess",3,0,0,1,0,"",0],["_OutlineShininess",3,0,0,1,0,"",0],["_GlowColor",0,0,1,0,0.5,"",16],["_GlowOffset",3,0,-1,1,0,"",0],["_GlowInner",3,0.0500000007450581,0,1,0,"",0],["_GlowOuter",3,0.0500000007450581,0,1,0,"",0],["_GlowPower",3,0.75,1,0,0,"",0],["_WeightNormal",2,0,0,0,0,"",0],["_WeightBold",2,0.5,0,0,0,"",0],["_ShaderFlags",2,0,0,0,0,"",0],["_ScaleRatioA",2,1,0,0,0,"",0],["_ScaleRatioB",2,1,0,0,0,"",0],["_ScaleRatioC",2,1,0,0,0,"",0],["_MainTex",4,0,0,0,0,"white",0],["_TextureWidth",2,512,0,0,0,"",0],["_TextureHeight",2,512,0,0,0,"",0],["_GradientScale",2,5,0,0,0,"",0],["_ScaleX",2,1,0,0,0,"",0],["_ScaleY",2,1,0,0,0,"",0],["_PerspectiveFilter",3,0.875,0,1,0,"",0],["_Sharpness",3,0,-1,1,0,"",0],["_VertexOffsetX",2,0,0,0,0,"",0],["_VertexOffsetY",2,0,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0]],null,null,0,0,0]}],"sounds":[{"id":24216,"path":"Assets/Content/Sounds/level complete.wav","assetBundleId":-1,"data":["level complete"]},{"id":24212,"path":"Assets/Content/Sounds/tile click.wav","assetBundleId":-1,"data":["tile click"]},{"id":26722,"path":"Assets/Content/Sounds/power up.wav","assetBundleId":-1,"data":["power up"]},{"id":24536,"path":"Assets/Content/Sounds/tile click blocked.wav","assetBundleId":-1,"data":["tile click blocked"]},{"id":27026,"path":"Assets/Content/Sounds/life received.wav","assetBundleId":-1,"data":["life received"]},{"id":27162,"path":"Assets/Content/Sounds/ice crack.wav","assetBundleId":-1,"data":["ice crack"]},{"id":27418,"path":"Assets/Content/Sounds/ui_button_1.wav","assetBundleId":-1,"data":["ui_button_1"]},{"id":24218,"path":"Assets/Content/Sounds/level failed.wav","assetBundleId":-1,"data":["level failed"]},{"id":29606,"path":"Assets/Content/Sounds/coin pickup.wav","assetBundleId":-1,"data":["coin pickup"]},{"id":30288,"path":"Assets/Content/Sounds/coins reward.wav","assetBundleId":-1,"data":["coins reward"]},{"id":26870,"path":"Assets/Content/Sounds/crate crack.wav","assetBundleId":-1,"data":["crate crack"]},{"id":30840,"path":"Assets/Content/Sounds/rubber quick.wav","assetBundleId":-1,"data":["rubber quick"]},{"id":24214,"path":"Assets/Content/Sounds/merge sound.wav","assetBundleId":-1,"data":["merge sound"]}],"sprites":[{"id":24210,"path":"Assets/Content/Sprites/Tiles/tile_c1_t4.png","assetBundleId":-1,"data":["tile_c1_t4",6,24428,[0,0,0,0.5688889,0.5688889,0],[-0.5688889,0.5688889,0,0,1,0.5688889,-0.5688889,0,1,0,0.5688889,0.5688889,0,1,1,-0.5688889,-0.5688889,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,0,0]},{"id":24190,"path":"Assets/Content/Sprites/Ingredients/cinnamon.png","assetBundleId":-1,"data":["cinnamon",6,24426,[0.007031262,-0.0234375,0,0.4945313,0.2578125,0],[0.39375,0.234375,0,0.828125,0.6953125,0.5015625,-0.0609375,0,0.9179688,0.4492188,0.5015625,0.1171875,0,0.9179688,0.5976563,0.028125,0.234375,0,0.5234375,0.6953125,-0.0703125,-0.28125,0,0.4414063,0.265625,-0.3046875,-0.28125,0,0.2460938,0.265625,-0.440625,-0.24375,0,0.1328125,0.296875,-0.4875,0.028125,0,0.09375,0.5234375,-0.4875,-0.1546875,0,0.09375,0.3710938],[8,7,6,3,6,7,5,6,3,4,5,3,1,4,3,0,1,3,2,1,0],-0.000186346471309662,-0.000297337770462036,0.999813675880432,0.99970269203186,0.09375,0.265625,0.91796875,0.6953125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,24.0477046966553,68.0761184692383]},{"id":24230,"path":"Assets/Content/Sprites/Tiles/tile_c1_t2.png","assetBundleId":-1,"data":["tile_c1_t2",6,24432,[0,0,0,0.5688889,0.5688889,0],[-0.5688889,0.5688889,0,0,1,0.5688889,-0.5688889,0,1,0,0.5688889,0.5688889,0,1,1,-0.5688889,-0.5688889,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,0,0]},{"id":24228,"path":"Assets/Content/Sprites/Quest/bg.png","assetBundleId":-1,"data":["bg",6,24312,[0,0,0,5.4,9.599999,0],[-5.4,9.599999,0,0,1,5.4,-9.599999,0,1,0,5.4,9.599999,0,1,1,-5.4,-9.599999,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-5.4,-9.599999,5.4,9.599999],53.3333358764648,576,1024,576,1024,288,512,0,0]},{"id":24254,"path":"Assets/Content/Sprites/Tiles/tile_c1_t5.png","assetBundleId":-1,"data":["tile_c1_t5",6,24436,[0,0,0,0.5688889,0.5688889,0],[-0.5688889,0.5688889,0,0,1,0.5688889,-0.5688889,0,1,0,0.5688889,0.5688889,0,1,1,-0.5688889,-0.5688889,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,0,0]},{"id":24234,"path":"Assets/Content/Sprites/Ingredients/apple.png","assetBundleId":-1,"data":["apple",6,24434,[-0.002343759,0.1148437,0,0.4710938,0.4289063,0],[-0.2203125,0.3609375,0,0.3164063,0.8007813,-0.2203125,0.3421875,0,0.3164063,0.7851563,-0.2203125,0.3609375,0,0.3164063,0.8007813,-0.2296875,0.3328125,0,0.3085938,0.7773438,-0.2671875,0.2625,0,0.2773438,0.71875,-0.2765625,0.3234375,0,0.2695313,0.7695313,-0.2765625,0.2625,0,0.2695313,0.71875,-0.28125,0.2625,0,0.265625,0.71875,-0.3046875,0.271875,0,0.2460938,0.7265625,-0.20625,0.3375,0,0.328125,0.78125,-0.2015625,0.3515625,0,0.3320313,0.7929688,-0.215625,0.3890625,0,0.3203125,0.8242188,-0.1921875,0.3796875,0,0.3398438,0.8164063,-0.2015625,0.3890625,0,0.3320313,0.8242188,-0.2203125,0.3796875,0,0.3164063,0.8164063,-0.20625,0.4265625,0,0.328125,0.8554688,-0.2015625,0.3984375,0,0.3320313,0.8320313,-0.2015625,0.4265625,0,0.3320313,0.8554688,-0.225,0.3984375,0,0.3125,0.8320313,-0.20625,0.4265625,0,0.328125,0.8554688,-0.2015625,0.43125,0,0.3320313,0.859375,-0.20625,0.43125,0,0.328125,0.859375,-0.2015625,0.43125,0,0.3320313,0.859375,-0.20625,0.45,0,0.328125,0.875,-0.1828125,0.45,0,0.3476563,0.875,-0.1921875,0.3796875,0,0.3398438,0.8164063,-0.1921875,0.3796875,0,0.3398438,0.8164063,-0.2296875,0.421875,0,0.3085938,0.8515625,-0.2296875,0.403125,0,0.3085938,0.8359375,-0.2203125,0.43125,0,0.3164063,0.859375,-0.2296875,0.4265625,0,0.3085938,0.8554688,-0.20625,0.3234375,0,0.328125,0.7695313,-0.2203125,0.31875,0,0.3164063,0.765625,-0.28125,0.403125,0,0.265625,0.8359375,-0.28125,0.4265625,0,0.265625,0.8554688,-0.2859375,0.3984375,0,0.2617188,0.8320313,-0.290625,0.3984375,0,0.2578125,0.8320313,-0.2671875,0.3890625,0,0.2773438,0.8242188,-0.2765625,0.3984375,0,0.2695313,0.8320313,-0.2953125,0.328125,0,0.2539063,0.7734375,-0.309375,0.3984375,0,0.2421875,0.8320313,-0.3140625,0.3140625,0,0.2382813,0.7617188,-0.309375,0.4265625,0,0.2421875,0.8554688,-0.328125,0.3140625,0,0.2265625,0.7617188,-0.3234375,0.2578125,0,0.2304688,0.7148438,-0.3140625,0.309375,0,0.2382813,0.7578125,-0.3515625,0.2390625,0,0.2070313,0.6992188,0.0984375,0.3609375,0,0.5820313,0.8007813,0.1125,0.3234375,0,0.59375,0.7695313,0.1078125,0.3515625,0,0.5898438,0.7929688,0.0984375,0.309375,0,0.5820313,0.7578125,0.09375,0.309375,0,0.578125,0.7578125,0.084375,0.35625,0,0.5703125,0.796875,0.084375,0.31875,0,0.5703125,0.765625,-0.05625,0.3421875,0,0.453125,0.7851563,-0.065625,0.3375,0,0.4453125,0.78125,-0.05625,0.3234375,0,0.453125,0.7695313,-0.09375,0.4875,0,0.421875,0.90625,-0.065625,0.478125,0,0.4453125,0.8984375,-0.075,0.4875,0,0.4375,0.90625,-0.103125,0.46875,0,0.4140625,0.890625,-0.0609375,0.4734375,0,0.4492188,0.8945313,-0.0703125,0.4265625,0,0.4414063,0.8554688,-0.0609375,0.440625,0,0.4492188,0.8671875,-0.0890625,0.421875,0,0.4257813,0.8515625,-0.103125,0.4125,0,0.4140625,0.84375,-0.0890625,0.4125,0,0.4257813,0.84375,-0.1125,0.4359375,0,0.40625,0.8632813,-0.1125,0.4265625,0,0.40625,0.8554688,-0.0609375,0.4734375,0,0.4492188,0.8945313,-0.1078125,0.4546875,0,0.4101563,0.8789063,-0.1125,0.45,0,0.40625,0.875,-0.028125,0.43125,0,0.4765625,0.859375,-0.05625,0.384375,0,0.453125,0.8203125,-0.028125,0.4078125,0,0.4765625,0.8398438,-0.0609375,0.43125,0,0.4492188,0.859375,-0.084375,0.4125,0,0.4296875,0.84375,-0.084375,0.384375,0,0.4296875,0.8203125,-0.0890625,0.39375,0,0.4257813,0.828125,-0.05625,0.346875,0,0.453125,0.7890625,-0.0515625,0.3421875,0,0.4570313,0.7851563,-0.0515625,0.346875,0,0.4570313,0.7890625,-0.0515625,0.35625,0,0.4570313,0.796875,-0.065625,0.3609375,0,0.4453125,0.8007813,-0.075,0.3515625,0,0.4375,0.7929688,-0.0328125,0.346875,0,0.4726563,0.7890625,-0.028125,0.3421875,0,0.4765625,0.7851563,-0.0234375,0.496875,0,0.4804688,0.9140625,0.225,0.54375,0,0.6875,0.953125,-0.09375,0.50625,0,0.421875,0.921875,-0.0984375,0.5109375,0,0.4179688,0.9257813,-0.121875,0.5109375,0,0.3984375,0.9257813,-0.15,0.45,0,0.375,0.875,-0.121875,0.4875,0,0.3984375,0.90625,-0.1640625,0.45,0,0.3632813,0.875,-0.16875,0.4453125,0,0.359375,0.8710938,-0.178125,0.4453125,0,0.3515625,0.8710938,-0.16875,0.440625,0,0.359375,0.8671875,-0.3609375,0.2390625,0,0.1992188,0.6992188,-0.4125,0.54375,0,0.15625,0.953125,-0.4265625,0.2859375,0,0.1445313,0.7382813,0.46875,0.121875,0,0.890625,0.6015625,0.3234375,-0.3140625,0,0.7695313,0.2382813,0.46875,-0.1875,0,0.890625,0.34375,-0.028125,0.328125,0,0.4765625,0.7734375,-0.0328125,0.31875,0,0.4726563,0.765625,-0.046875,0.31875,0,0.4609375,0.765625,-0.09375,-0.3140625,0,0.421875,0.2382813,-0.16875,0.365625,0,0.359375,0.8046875,-0.1828125,0.3703125,0,0.3476563,0.8085938,-0.16875,0.3515625,0,0.359375,0.7929688,-0.16875,0.3703125,0,0.359375,0.8085938,-0.1921875,0.375,0,0.3398438,0.8125,-0.178125,0.440625,0,0.3515625,0.8671875,-0.1828125,0.35625,0,0.3476563,0.796875,-0.1921875,0.3515625,0,0.3398438,0.7929688,-0.1828125,0.421875,0,0.3476563,0.8515625,-0.178125,0.43125,0,0.3515625,0.859375,-0.1875,0.421875,0,0.34375,0.8515625,-0.196875,0.421875,0,0.3359375,0.8515625,-0.1078125,0.403125,0,0.4101563,0.8359375,-0.103125,0.384375,0,0.4140625,0.8203125,-0.103125,0.3984375,0,0.4140625,0.8320313,-0.1078125,0.375,0,0.4101563,0.8125,-0.121875,0.375,0,0.3984375,0.8125,-0.13125,0.403125,0,0.390625,0.8359375,-0.13125,0.3984375,0,0.390625,0.8320313,-0.13125,0.3796875,0,0.390625,0.8164063,-0.1640625,0.403125,0,0.3632813,0.8359375,-0.16875,0.421875,0,0.359375,0.8515625,-0.1640625,0.403125,0,0.3632813,0.8359375,-0.196875,0.4125,0,0.3359375,0.84375,-0.196875,0.4078125,0,0.3359375,0.8398438,-0.1640625,0.3796875,0,0.3632813,0.8164063,-0.159375,0.375,0,0.3671875,0.8125,-0.159375,0.3796875,0,0.3671875,0.8164063,-0.1640625,0.3703125,0,0.3632813,0.8085938,-0.159375,0.3890625,0,0.3671875,0.8242188,-0.1359375,0.375,0,0.3867188,0.8125,-0.140625,0.346875,0,0.3828125,0.7890625,-0.1359375,0.35625,0,0.3867188,0.796875,-0.1453125,0.3796875,0,0.3789063,0.8164063,-0.159375,0.346875,0,0.3671875,0.7890625,-0.159375,0.4078125,0,0.3671875,0.8398438,-0.159375,0.403125,0,0.3671875,0.8359375,-0.15,0.4171875,0,0.375,0.8476563,-0.140625,0.4171875,0,0.3828125,0.8476563,-0.140625,0.4171875,0,0.3828125,0.8476563,-0.13125,0.421875,0,0.390625,0.8515625,-0.13125,0.4078125,0,0.390625,0.8398438,-0.1265625,0.421875,0,0.3945313,0.8515625,-0.121875,0.43125,0,0.3984375,0.859375,-0.121875,0.45,0,0.3984375,0.875,-0.1171875,0.4359375,0,0.4023438,0.8632813,-0.1640625,0.421875,0,0.3632813,0.8515625,-0.16875,0.43125,0,0.359375,0.859375,-0.3796875,0.2296875,0,0.1835938,0.6914063,-0.440625,-0.1734375,0,0.1328125,0.3554688,-0.4734375,0.140625,0,0.1054688,0.6171875,-0.4734375,0,0,0.1054688,0.5,-0.09375,0.4921875,0,0.421875,0.9101563,-0.0984375,0.4828125,0,0.4179688,0.9023438,-0.1125,0.4828125,0,0.40625,0.9023438,-0.140625,0.3890625,0,0.3828125,0.8242188],[68,151,67,137,144,163,146,163,144,126,163,146,149,126,146,125,126,149,135,137,141,163,141,137,138,141,163,126,138,163,127,138,126,93,91,162,90,162,91,161,162,90,160,161,90,89,160,90,66,64,76,62,76,64,92,93,60,162,60,93,161,60,162,57,60,161,160,57,161,59,57,160,89,59,160,159,158,157,156,157,158,107,157,156,6,107,156,4,107,6,3,107,4,32,107,3,31,107,32,9,107,31,10,107,9,115,107,10,114,107,115,109,107,114,110,107,109,142,107,110,139,107,142,140,107,139,138,107,140,127,107,138,124,107,127,123,107,124,121,107,123,122,107,121,65,107,122,66,107,65,78,107,66,125,149,120,150,120,149,151,120,150,68,120,151,65,120,68,122,120,65,155,97,154,92,154,97,148,154,92,152,148,92,151,148,152,153,151,152,150,148,151,146,148,149,150,149,148,144,143,146,145,146,143,147,146,145,128,143,130,144,130,143,137,130,144,128,129,143,110,108,142,111,142,108,136,142,111,134,142,136,139,142,134,135,139,134,141,139,135,138,139,141,140,139,138,26,130,25,109,25,130,111,109,130,133,111,130,135,133,130,137,135,130,111,133,136,134,136,133,135,134,133,97,95,92,94,92,95,132,131,26,118,26,131,130,26,118,116,130,118,128,130,116,129,128,116,127,126,124,125,124,126,120,124,125,123,124,120,121,123,120,122,121,120,17,20,119,113,119,20,118,119,113,116,118,113,117,116,113,2,0,10,12,10,0,115,10,12,25,115,12,112,115,25,114,115,112,109,114,112,113,96,97,20,22,113,24,113,22,96,113,24,112,25,109,111,108,109,110,109,108,56,54,106,80,106,54,81,106,80,85,106,81,105,106,85,104,105,85,86,104,85,81,82,85,78,84,107,102,107,84,77,84,78,55,102,84,56,102,55,106,102,56,105,102,106,104,102,105,86,102,104,74,102,86,72,102,74,87,102,72,53,102,87,51,102,53,50,102,51,48,102,50,88,102,48,101,102,88,103,102,101,100,99,98,42,98,99,91,42,99,88,91,99,46,98,42,43,46,42,41,43,42,40,41,42,34,42,91,23,34,91,30,34,23,27,34,30,29,30,23,21,29,23,24,23,91,96,24,91,95,96,91,97,96,95,94,95,91,92,94,91,93,92,91,90,91,88,89,90,88,59,89,88,87,59,88,58,59,87,52,87,88,53,87,52,47,52,88,49,47,88,48,49,88,62,63,75,72,75,63,61,72,63,87,72,61,77,73,84,83,84,73,82,83,73,74,82,73,85,82,74,86,85,74,84,83,55,54,55,83,79,54,83,82,79,83,81,79,82,54,79,80,81,80,79,78,66,77,76,77,66,73,77,76,62,73,76,75,73,62,72,73,75,74,73,72,67,71,61,70,61,71,60,61,70,58,61,60,69,61,58,68,67,65,61,65,67,64,65,61,66,65,64,62,64,61,63,62,61,60,57,58,59,58,57,56,55,54,53,52,51,47,51,52,50,51,47,48,50,47,49,48,47,46,43,44,45,44,43,40,42,36,34,36,42,33,36,34,41,40,39,36,39,40,37,39,36,35,37,36,38,37,35,36,33,35,27,35,33,34,27,33,3,1,32,31,32,1,9,31,1,27,30,19,29,19,30,21,19,29,28,27,18,19,18,27,15,18,19,12,26,25,21,23,22,24,22,23,19,21,20,22,20,21,15,19,17,20,17,19,18,15,16,17,16,15,0,14,12,11,12,14,13,12,11,1,2,9,10,9,2,8,5,7,6,7,5,4,6,5,0,4,5,3,4,0,1,3,0,2,1,0],-0.000104494392871857,-0.00029735267162323,0.999895513057709,0.999702632427216,0.10546875,0.23828125,0.890625,0.953125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,27.0267505645752,61.0761222839355]},{"id":24260,"path":"Assets/Content/Sprites/Ingredients/garlic.png","assetBundleId":-1,"data":["garlic",6,24438,[0.007031247,-0.01640625,0,0.4335938,0.2929688,0],[0.440625,0.2765625,0,0.8671875,0.7304688,0.4125,-0.309375,0,0.84375,0.2421875,0.440625,-0.3,0,0.8671875,0.25,-0.35625,0.2765625,0,0.203125,0.7304688,-0.4265625,0.1734375,0,0.1445313,0.6445313,-0.4265625,-0.309375,0,0.1445313,0.2421875],[5,4,1,3,1,4,0,1,3,2,1,0],-0.000104501843452454,-0.00029735267162323,0.999895513057709,0.999702632427216,0.14453125,0.2421875,0.8671875,0.73046875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,37.0267524719238,62.0761222839355]},{"id":24264,"path":"Assets/Content/Sprites/Ingredients/dill.png","assetBundleId":-1,"data":["dill",6,24440,[-0.003835231,0.01917613,0,0.387358,0.421875,0],[0.2607955,0.1380682,0,0.765625,0.640625,0.2492898,0.134233,0,0.7539063,0.6367188,0.2607955,0.1380682,0,0.765625,0.640625,0.2799716,0.4410512,0,0.7851563,0.9492188,0.3451705,0.2684659,0,0.8515625,0.7734375,0.3605114,0.4410512,0,0.8671875,0.9492188,0.2799716,0.1610796,0,0.7851563,0.6640625,0.2569602,0.437216,0,0.7617188,0.9453125,0.1725852,0.3566762,0,0.6757813,0.8632813,0.3758523,0.1112216,0,0.8828125,0.6132813,0.3835227,0.06903409,0,0.890625,0.5703125,0.3835227,0.1073864,0,0.890625,0.609375,0.3566762,0.1112216,0,0.8632813,0.6132813,0.3413352,-0.1227273,0,0.8476563,0.375,0.2799716,0.1419034,0,0.7851563,0.6445313,0.2684659,0.1419034,0,0.7734375,0.6445313,0.2569602,-0.2032671,0,0.7617188,0.2929688,-0.0421875,0.4257103,0,0.4570313,0.9335938,-0.1764205,-0.3490057,0,0.3203125,0.1445313,-0.3643466,0.1802557,0,0.1289063,0.6835938,-0.3911932,-0.04602273,0,0.1015625,0.453125,-0.3911932,-0.3490057,0,0.1015625,0.1445313,-0.07670455,-0.3758523,0,0.421875,0.1171875,-0.08821023,-0.4026989,0,0.4101563,0.08984375,-0.07670455,-0.3950284,0,0.421875,0.09765625,-0.09971592,-0.4026989,0,0.3984375,0.08984375,-0.1035511,-0.3758523,0,0.3945313,0.1171875,-0.1112216,-0.3796875,0,0.3867188,0.1132813,-0.1112216,-0.3911932,0,0.3867188,0.1015625],[28,27,25,26,25,27,22,25,26,23,25,22,24,23,22,21,20,18,19,18,20,17,18,19,16,18,17,8,16,17,1,16,8,2,16,1,13,16,2,0,13,2,15,13,0,14,13,15,12,13,14,10,13,12,9,10,12,11,10,9,8,7,1,0,1,7,3,0,7,6,0,3,4,6,3,5,4,3,2,1,0],-0.000297345221042633,-0.000297345221042633,0.999702632427216,0.999702632427216,0.1015625,0.08984375,0.890625,0.94921875,0,0,0,0,[0,0,0,0],[-0.4909091,-0.4909091,0.4909091,0.4909091],260.74072265625,256,256,256,256,128,128,26.0761203765869,23.0761203765869]},{"id":24268,"path":"Assets/Content/Sprites/Tiles/tile_c2_t4.png","assetBundleId":-1,"data":["tile_c2_t4",6,24314,[0,0,0,0.5688889,0.5688889,0],[-0.5688889,0.5688889,0,0,1,0.5688889,-0.5688889,0,1,0,0.5688889,0.5688889,0,1,1,-0.5688889,-0.5688889,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,0,0]},{"id":24220,"path":"Assets/Content/Sprites/Ingredients/spinach.png","assetBundleId":-1,"data":["spinach",6,24430,[0.01640627,-0.03046876,0,0.5835937,0.3820313,0],[0.4546875,-0.3140625,0,0.8789063,0.2382813,0.459375,-0.3421875,0,0.8828125,0.2148438,0.459375,-0.3234375,0,0.8828125,0.2304688,0.43125,-0.3609375,0,0.859375,0.1992188,0.4171875,-0.3140625,0,0.8476563,0.2382813,0.309375,-0.39375,0,0.7578125,0.171875,0.253125,-0.403125,0,0.7109375,0.1640625,0.1640625,-0.4078125,0,0.6367188,0.1601563,0.1171875,-0.4125,0,0.5976563,0.15625,0.075,-0.3796875,0,0.5625,0.1835938,0.0703125,-0.4125,0,0.5585938,0.15625,0.065625,-0.384375,0,0.5546875,0.1796875,0.065625,-0.403125,0,0.5546875,0.1640625,-0.01875,-0.384375,0,0.484375,0.1796875,-0.0234375,-0.4078125,0,0.4804688,0.1601563,-0.0140625,-0.3984375,0,0.4882813,0.1679688,-0.0421875,-0.384375,0,0.4648438,0.1796875,-0.046875,-0.4078125,0,0.4609375,0.1601563,-0.0515625,-0.39375,0,0.4570313,0.171875,0.0328125,-0.384375,0,0.5273438,0.1796875,0.028125,-0.4078125,0,0.5234375,0.1601563,0.0375,-0.3984375,0,0.53125,0.1679688,0.0046875,-0.384375,0,0.5039063,0.1796875,0,-0.4078125,0,0.5,0.1601563,-0.0046875,-0.39375,0,0.4960938,0.171875,-0.309375,-0.2390625,0,0.2421875,0.3007813,-0.1359375,-0.2859375,0,0.3867188,0.2617188,-0.215625,0.3515625,0,0.3203125,0.7929688,-0.1359375,-0.290625,0,0.3867188,0.2578125,-0.309375,-0.24375,0,0.2421875,0.296875,-0.3140625,-0.253125,0,0.2382813,0.2890625,-0.346875,-0.290625,0,0.2109375,0.2578125,-0.3890625,-0.253125,0,0.1757813,0.2890625,-0.3984375,-0.2484375,0,0.1679688,0.2929688,-0.3984375,-0.2625,0,0.1679688,0.28125,0.13125,-0.2765625,0,0.609375,0.2695313,0.13125,-0.290625,0,0.609375,0.2578125,0.13125,-0.2859375,0,0.609375,0.2617188,0.121875,-0.271875,0,0.6015625,0.2734375,-0.1171875,-0.271875,0,0.4023438,0.2734375,0.1875,-0.290625,0,0.65625,0.2578125,0.178125,-0.3,0,0.6484375,0.25,0.1875,-0.2953125,0,0.65625,0.2539063,0.1359375,-0.3,0,0.6132813,0.25,0.13125,-0.2953125,0,0.609375,0.2539063,0.16875,-0.271875,0,0.640625,0.2734375,0.1875,-0.2765625,0,0.65625,0.2695313,0.1359375,-0.271875,0,0.6132813,0.2734375,0.2671875,0.3515625,0,0.7226563,0.7929688,0.121875,-0.3140625,0,0.6015625,0.2382813,-0.0703125,-0.3140625,0,0.4414063,0.2382813,-0.13125,-0.3046875,0,0.390625,0.2460938,-0.496875,-0.215625,0,0.0859375,0.3203125,-0.5015625,-0.2953125,0,0.08203122,0.2539063,-0.496875,-0.234375,0,0.0859375,0.3046875,-0.534375,-0.28125,0,0.0546875,0.265625,-0.496875,-0.215625,0,0.0859375,0.3203125,-0.5390625,-0.1265625,0,0.05078125,0.3945313,-0.54375,-0.121875,0,0.04687503,0.3984375,-0.5625,-0.121875,0,0.03125,0.3984375,-0.5671875,-0.1359375,0,0.02734378,0.3867188,-0.5671875,-0.2390625,0,0.02734378,0.3007813,0.58125,-0.196875,0,0.984375,0.3359375,0.6,-0.2109375,0,1,0.3242188,0.6,-0.196875,0,1,0.3359375,0.5671875,-0.225,0,0.9726563,0.3125,0.6,-0.0328125,0,1,0.4726563,0.553125,-0.0984375,0,0.9609375,0.4179688,0.5015625,0.028125,0,0.9179688,0.5234375,0.496875,-0.0046875,0,0.9140625,0.4960938,0.6,-0.2578125,0,1,0.2851563,0.5625,-0.28125,0,0.96875,0.265625,0.5484375,-0.2578125,0,0.9570313,0.2851563,0.5484375,-0.28125,0,0.9570313,0.265625,0.553125,-0.1171875,0,0.9609375,0.4023438,0.553125,-0.1265625,0,0.9609375,0.3945313,0.5484375,-0.103125,0,0.9570313,0.4140625,0.5203125,-0.1171875,0,0.9335938,0.4023438,0.4265625,-0.290625,0,0.8554688,0.2578125,0.3,0.346875,0,0.75,0.7890625,-0.4828125,-0.24375,0,0.09765625,0.296875,-0.4734375,-0.2625,0,0.1054688,0.28125,-0.478125,-0.2953125,0,0.1015625,0.2539063,-0.4734375,-0.28125,0,0.1054688,0.265625,-0.46875,-0.20625,0,0.109375,0.328125,-0.421875,-0.234375,0,0.1484375,0.3046875,-0.421875,-0.234375,0,0.1484375,0.3046875,-0.4734375,-0.20625,0,0.1054688,0.328125,-0.421875,-0.15,0,0.1484375,0.375,-0.4734375,-0.1078125,0,0.1054688,0.4101563,-0.496875,-0.1078125,0,0.0859375,0.4101563,-0.496875,-0.1921875,0,0.0859375,0.3398438,-0.3234375,-0.225,0,0.2304688,0.3125,-0.4171875,-0.2390625,0,0.1523438,0.3007813,-0.459375,-0.2578125,0,0.1171875,0.2851563,-0.421875,-0.253125,0,0.1484375,0.2890625,-0.4921875,-0.20625,0,0.08984375,0.328125,-0.515625,-0.028125,0,0.0703125,0.4765625,-0.5015625,-0.0421875,0,0.08203122,0.4648438,-0.5015625,-0.0328125,0,0.08203122,0.4726563,-0.525,-0.0984375,0,0.06249997,0.4179688,-0.534375,-0.1078125,0,0.0546875,0.4101563,-0.5578125,-0.0703125,0,0.03515625,0.4414063,-0.5578125,-0.1078125,0,0.03515625,0.4101563,-0.4828125,-0.0703125,0,0.09765625,0.4414063,-0.4734375,-0.09375,0,0.1054688,0.421875,-0.4734375,-0.0796875,0,0.1054688,0.4335938,-0.4875,-0.0984375,0,0.09375,0.4179688,-0.496875,-0.075,0,0.0859375,0.4375,-0.496875,-0.0890625,0,0.0859375,0.4257813,-0.403125,-0.271875,0,0.1640625,0.2734375,-0.3984375,-0.2671875,0,0.1679688,0.2773438,-0.4171875,-0.271875,0,0.1523438,0.2734375,-0.31875,0.0515625,0,0.234375,0.5429688,-0.3328125,0.05625,0,0.2226563,0.546875,-0.375,0.05625,0,0.1875,0.546875,-0.4125,0.0421875,0,0.15625,0.5351563,-0.421875,0.0515625,0,0.1484375,0.5429688,-0.4125,-0.009375,0,0.15625,0.4921875,-0.31875,0.01875,0,0.234375,0.515625,-0.3890625,-0.009375,0,0.1757813,0.4921875],[118,116,120,115,120,116,119,120,115,114,119,115,113,119,114,117,118,88,92,88,118,120,92,118,119,92,120,25,92,119,113,25,119,27,116,117,118,117,116,115,116,27,114,115,27,113,114,27,25,113,27,33,93,32,95,85,34,93,34,85,33,34,93,94,95,112,34,112,95,110,112,34,111,110,34,109,108,107,104,107,108,105,107,104,106,105,104,103,102,101,97,101,102,100,101,97,98,100,97,99,98,97,56,96,80,87,80,96,94,80,87,85,94,87,95,94,85,85,86,93,86,88,93,92,93,88,32,93,92,30,32,92,25,30,92,29,30,25,91,90,87,89,87,90,88,87,89,84,87,88,86,84,88,87,84,85,86,85,84,53,54,82,80,82,54,81,82,80,83,82,81,54,52,80,56,80,52,75,76,74,40,46,78,48,78,46,79,78,48,77,78,79,65,78,77,76,65,77,75,65,76,74,65,75,67,65,74,73,72,71,65,71,72,70,71,65,63,70,65,69,68,67,66,67,68,65,67,66,62,65,66,64,62,66,65,62,63,64,63,62,61,60,55,59,55,60,58,55,59,57,55,58,56,55,57,52,55,56,53,55,52,54,53,52,28,36,51,50,51,36,49,50,36,44,49,36,37,35,47,27,48,26,39,26,48,38,39,48,35,38,48,47,35,48,45,47,48,46,45,48,36,37,40,47,40,37,45,40,47,46,40,45,44,36,43,40,43,36,41,43,40,42,41,40,26,39,28,36,28,39,38,36,39,35,36,38,37,36,35,34,33,31,32,31,33,30,31,32,28,31,30,29,28,30,25,28,29,26,28,25,27,26,25,24,22,23,20,23,22,19,20,22,21,20,19,18,16,17,14,17,16,13,14,16,15,14,13,12,11,10,9,10,11,8,10,9,4,8,9,7,8,4,6,7,4,5,6,4,3,5,4,0,3,4,1,3,0,2,1,0],-0.000297315418720245,-0.00029735267162323,0.99970269203186,0.999702632427216,0.0273437798023224,0.15625,1,0.79296875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,7.07612037658691,40.0761222839355]},{"id":24278,"path":"Assets/Content/Sprites/Ingredients/feta chesee.png","assetBundleId":-1,"data":["feta chesee",6,24442,[0.007031247,-0.05624999,0,0.3351563,0.2859375,0],[0.3421875,-0.1875,0,0.7851563,0.34375,0.309375,-0.290625,0,0.7578125,0.2578125,0.3421875,-0.2625,0,0.7851563,0.28125,0.2296875,0.1265625,0,0.6914063,0.6054688,0.121875,0.2296875,0,0.6015625,0.6914063,0.0609375,-0.3421875,0,0.5507813,0.2148438,-0.065625,-0.3421875,0,0.4453125,0.2148438,-0.2390625,0.2296875,0,0.3007813,0.6914063,-0.328125,0.2015625,0,0.2265625,0.6679688,-0.328125,-0.0421875,0,0.2265625,0.4648438],[9,8,6,7,6,8,4,6,7,5,6,4,1,5,4,3,1,4,0,1,3,2,1,0],-0.00029735267162323,-0.000104501843452454,0.999702632427216,0.999895513057709,0.2265625,0.21484375,0.78515625,0.69140625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,58.0761222839355,55.0267524719238]},{"id":24282,"path":"Assets/Content/Sprites/Tiles/tile_c1_t3.png","assetBundleId":-1,"data":["tile_c1_t3",6,24444,[0,0,0,0.5688889,0.5688889,0],[-0.5688889,0.5688889,0,0,1,0.5688889,-0.5688889,0,1,0,0.5688889,0.5688889,0,1,1,-0.5688889,-0.5688889,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,0,0]},{"id":24238,"path":"Assets/Content/Sprites/Tiles/tile_c1_t1.png","assetBundleId":-1,"data":["tile_c1_t1",6,24414,[0,0,0,0.5688889,0.5688889,0],[-0.5688889,0.5688889,0,0,1,0.5688889,-0.5688889,0,1,0,0.5688889,0.5688889,0,1,1,-0.5688889,-0.5688889,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,0,0]},{"id":24294,"path":"Assets/Content/Sprites/Tiles/tile_c3_t4.png","assetBundleId":-1,"data":["tile_c3_t4",6,24448,[0,0,0,0.5688889,0.5688889,0],[-0.5688889,0.5688889,0,0,1,0.5688889,-0.5688889,0,1,0,0.5688889,0.5688889,0,1,1,-0.5688889,-0.5688889,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,0,0]},{"id":24288,"path":"Assets/Content/Sprites/background.png","assetBundleId":-1,"data":["background",6,24454,[0,0,0,10.24,10.24,0],[-10.24,10.24,0,0,1,10.24,-10.24,0,1,0,10.24,10.24,0,1,1,-10.24,-10.24,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-10.24,-10.24,10.24,10.24],100,2048,2048,2048,2048,1024,1024,0,0]},{"id":24296,"path":"Assets/Content/Sprites/Ingredients/lemon.png","assetBundleId":-1,"data":["lemon",6,24450,[0.002343744,0,0,0.5132812,0.4359375,0],[0.0046875,-0.4078125,0,0.5039063,0.1601563,0.01875,-0.4265625,0,0.515625,0.1445313,0.01875,-0.4125,0,0.515625,0.15625,0.0046875,-0.43125,0,0.5039063,0.140625,-0.0046875,-0.4171875,0,0.4960938,0.1523438,0.4828125,-0.2203125,0,0.9023438,0.3164063,0.496875,-0.2484375,0,0.9140625,0.2929688,0.496875,-0.225,0,0.9140625,0.3125,0.4546875,-0.3046875,0,0.8789063,0.2460938,0.4453125,-0.2203125,0,0.8710938,0.3164063,0.4359375,-0.3046875,0,0.8632813,0.2460938,0.421875,-0.2390625,0,0.8515625,0.3007813,0.4171875,-0.271875,0,0.8476563,0.2734375,0.4171875,-0.28125,0,0.8476563,0.265625,-0.4875,-0.0984375,0,0.09375,0.4179688,-0.4875,-0.1734375,0,0.09375,0.3554688,-0.4828125,-0.103125,0,0.09765625,0.4140625,-0.5109375,-0.0984375,0,0.07421875,0.4179688,-0.5109375,-0.15,0,0.07421875,0.375,-0.271875,-0.39375,0,0.2734375,0.171875,-0.20625,-0.4125,0,0.328125,0.15625,-0.20625,-0.39375,0,0.328125,0.171875,-0.271875,-0.4125,0,0.2734375,0.15625,-0.3703125,-0.375,0,0.1914063,0.1875,-0.4359375,-0.2765625,0,0.1367188,0.2695313,-0.4453125,-0.2765625,0,0.1289063,0.2695313,-0.4453125,-0.3046875,0,0.1289063,0.2460938,-0.215625,-0.3703125,0,0.3203125,0.1914063,-0.20625,-0.3890625,0,0.328125,0.1757813,-0.4265625,-0.2765625,0,0.1445313,0.2695313,0.20625,-0.365625,0,0.671875,0.1953125,0.1359375,-0.384375,0,0.6132813,0.1796875,0.215625,-0.365625,0,0.6796875,0.1953125,0.1171875,-0.384375,0,0.5976563,0.1796875,0.459375,0.346875,0,0.8828125,0.7890625,0.45,-0.20625,0,0.875,0.328125,0.459375,-0.196875,0,0.8828125,0.3359375,0.43125,0.3796875,0,0.859375,0.8164063,0.35625,0.3046875,0,0.796875,0.7539063,0.346875,0.2953125,0,0.7890625,0.7460938,0.3328125,0.2953125,0,0.7773438,0.7460938,0.328125,0.309375,0,0.7734375,0.7578125,0.3046875,-0.3421875,0,0.7539063,0.2148438,0.440625,0.3984375,0,0.8671875,0.8320313,0.459375,0.3984375,0,0.8828125,0.8320313,0.43125,0.3890625,0,0.859375,0.8242188,0.459375,0.4359375,0,0.8828125,0.8632813,0.3515625,0.31875,0,0.7929688,0.765625,0.3375,0.31875,0,0.78125,0.765625,0.3,0.3890625,0,0.75,0.8242188,0.2859375,0.39375,0,0.7382813,0.828125,0.271875,0.3796875,0,0.7265625,0.8164063,0.271875,0.375,0,0.7265625,0.8125,0.05625,-0.39375,0,0.546875,0.171875,-0.4078125,0.4359375,0,0.1601563,0.8632813,-0.4546875,-0.1546875,0,0.1210938,0.3710938,-0.4640625,-0.1171875,0,0.1132813,0.4023438,-0.4828125,-0.05625,0,0.09765625,0.453125,-0.4875,-0.0703125,0,0.09375,0.4414063,-0.5109375,0.215625,0,0.07421875,0.6796875,-0.5109375,-0.0609375,0,0.07421875,0.4492188,0.496875,0.39375,0,0.9140625,0.828125,0.515625,0.365625,0,0.9296875,0.8046875,0.515625,0.384375,0,0.9296875,0.8203125,0.496875,0.3328125,0,0.9140625,0.7773438,0.46875,0.3328125,0,0.890625,0.7773438,0.3,0.3796875,0,0.75,0.8164063,0.2859375,0.365625,0,0.7382813,0.8046875,0.28125,0.365625,0,0.734375,0.8046875,0.2765625,-0.365625,0,0.7304688,0.1953125,0.28125,-0.39375,0,0.734375,0.171875,0.28125,-0.375,0,0.734375,0.1875,0.253125,-0.421875,0,0.7109375,0.1484375,0.140625,-0.4359375,0,0.6171875,0.1367188,0.046875,-0.403125,0,0.5390625,0.1640625,0.0421875,-0.4171875,0,0.5351563,0.1523438,0.0421875,-0.4359375,0,0.5351563,0.1367188,-0.4546875,-0.1828125,0,0.1210938,0.3476563,-0.478125,-0.1828125,0,0.1015625,0.3476563,-0.4875,-0.2390625,0,0.09375,0.3007813],[41,48,40,39,40,48,47,39,48,38,39,47,15,16,78,56,78,16,77,78,56,55,77,56,16,57,56,79,15,24,78,24,15,77,24,78,55,24,77,21,28,53,52,51,68,50,68,51,67,68,50,66,67,50,49,66,50,76,75,73,74,73,75,33,73,74,31,73,33,32,73,31,72,73,32,69,72,32,70,72,69,71,70,69,32,52,69,68,69,52,42,69,68,67,42,68,66,42,67,49,42,66,34,44,65,61,65,44,64,65,61,62,64,61,63,62,61,60,59,58,54,58,59,57,58,54,56,57,54,55,56,54,24,55,54,29,24,54,27,29,54,51,27,54,50,51,54,46,50,54,28,27,51,53,28,51,33,53,51,30,33,51,32,30,51,52,32,51,49,50,46,48,49,46,41,49,48,42,49,41,47,48,46,38,47,46,45,38,46,37,38,45,43,45,46,44,43,46,37,45,34,43,34,45,44,34,43,42,41,35,40,35,41,39,35,40,38,35,39,37,35,38,34,35,37,36,35,34,33,30,31,32,31,30,24,29,19,27,19,29,21,19,27,28,21,27,26,25,23,24,23,25,19,23,24,22,23,19,20,22,19,21,20,19,18,17,15,14,15,17,16,15,14,13,12,10,11,10,12,9,10,11,8,10,9,5,8,9,6,8,5,7,6,5,4,0,3,1,3,0,2,1,0],-0.000104494392871857,-0.00029735267162323,0.999895513057709,0.999702632427216,0.07421875,0.13671875,0.9296875,0.86328125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,19.0267505645752,35.0761222839355]},{"id":24300,"path":"Assets/Content/Sprites/Tiles/tile_c3_t1.png","assetBundleId":-1,"data":["tile_c3_t1",6,24452,[0,0,0,0.5688889,0.5688889,0],[-0.5688889,0.5688889,0,0,1,0.5688889,-0.5688889,0,1,0,0.5688889,0.5688889,0,1,1,-0.5688889,-0.5688889,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,0,0]},{"id":24290,"path":"Assets/Content/Sprites/Ingredients/olive oil.png","assetBundleId":-1,"data":["olive oil",6,24446,[0,0.002343744,0,0.2484375,0.4757813,0],[0.2484375,0.0328125,0,0.7070313,0.5273438,0.20625,-0.4734375,0,0.671875,0.1054688,0.2484375,-0.3703125,0,0.7070313,0.1914063,0.1546875,0.3890625,0,0.6289063,0.8242188,0.0609375,0.478125,0,0.5507813,0.8984375,-0.1171875,0.478125,0,0.4023438,0.8984375,-0.1734375,-0.4734375,0,0.3554688,0.1054688,-0.2484375,0.046875,0,0.2929688,0.5390625,-0.2484375,-0.4171875,0,0.2929688,0.1523438],[8,7,6,5,6,7,1,6,5,4,1,5,3,1,4,0,1,3,2,1,0],-0.00010448694229126,-0.000297345221042633,0.999895513057709,0.999702632427216,0.29296875,0.10546875,0.70703125,0.8984375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,75.0267486572266,27.0761203765869]},{"id":24306,"path":"Assets/Content/Sprites/Quest/end_card.png","assetBundleId":-1,"data":["end_card",6,24324,[0,0,0,5.4,9.599999,0],[-5.4,9.599999,0,0,1,5.4,-9.599999,0,1,0,5.4,9.599999,0,1,1,-5.4,-9.599999,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-5.4,-9.599999,5.4,9.599999],53.3333358764648,576,1024,576,1024,288,512,0,0]},{"id":24388,"path":"Assets/Content/Sprites/Tiles/tile_background.png","assetBundleId":-1,"data":["tile_background",6,24392,[0,0,0,0.5333334,0.5688889,0],[0.4711111,0.5688889,0,0.9140625,1,0.5333334,-0.4711111,0,0.96875,0.0859375,0.5333334,0.56,0,0.96875,0.9921875,0.4444444,-0.5688889,0,0.890625,0,-0.5333334,0.5688889,0,0.03124997,1,-0.5333334,-0.5688889,0,0.03124997,0],[5,4,3,0,3,4,1,3,0,2,1,0],-0.000594720244407654,0,0.999405264854431,1,0.0312499701976776,0,0.96875,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,4.07612037658691,0]},{"id":24408,"path":"Assets/Content/Sprites/Quest/dotted line.png","assetBundleId":-1,"data":["dotted line",6,24412,[0,0,0,0.73,0.73,0],[-0.58,-0.59,0,0.1027397,0.09589044,-0.46,-0.73,0,0.1849315,0,-0.46,-0.67,0,0.1849315,0.04109589,-0.59,-0.73,0,0.09589044,0,-0.62,-0.59,0,0.07534247,0.09589044,-0.67,-0.64,0,0.04109589,0.06164384,-0.67,-0.66,0,0.04109589,0.04794521,-0.17,-0.67,0,0.3835616,0.04109589,-0.15,-0.73,0,0.3972603,0,-0.15,-0.69,0,0.3972603,0.02739726,-0.33,-0.67,0,0.2739726,0.04109589,-0.35,-0.69,0,0.260274,0.02739726,-0.35,-0.73,0,0.260274,0,0.15,-0.67,0,0.6027398,0.04109589,0.17,-0.73,0,0.6164383,0,0.17,-0.69,0,0.6164383,0.02739726,-0.01,-0.67,0,0.4931507,0.04109589,-0.03,-0.69,0,0.479452,0.02739726,-0.03,-0.73,0,0.479452,0,0.48,-0.66,0,0.8287671,0.04794521,0.5,-0.73,0,0.8424658,0,0.5,-0.71,0,0.8424658,0.01369863,0.3,-0.66,0,0.7054794,0.04794521,0.29,-0.69,0,0.6986302,0.02739726,0.29,-0.73,0,0.6986302,0,0.73,-0.49,0,1,0.1643836,0.72,-0.61,0,0.9931507,0.08219178,0.73,-0.58,0,1,0.1027397,0.71,-0.48,0,0.9863014,0.1712329,0.67,-0.68,0,0.9589041,0.03424658,0.65,-0.48,0,0.9452055,0.1712329,0.61,-0.68,0,0.9178082,0.03424658,0.58,-0.6,0,0.8972602,0.08904107,0.58,-0.67,0,0.8972602,0.04109589,-0.69,-0.31,0,0.02739726,0.2876712,-0.66,-0.5,0,0.04794521,0.1575342,-0.66,-0.32,0,0.04794521,0.2808219,-0.7,-0.52,0,0.02054795,0.1438356,-0.73,-0.31,0,0,0.2876712,-0.73,-0.52,0,0,0.1438356,0.69,-0.17,0,0.9726027,0.3835616,0.73,-0.37,0,1,0.2465753,0.73,-0.17,0,1,0.3835616,0.69,-0.37,0,0.9726027,0.2465753,0.67,-0.19,0,0.9589041,0.369863,0.67,-0.35,0,0.9589041,0.260274,0.39,0.73,0,0.7671233,1,0.37,0.67,0,0.7534246,0.9589041,0.39,0.69,0,0.7671233,0.9726027,0.21,0.67,0,0.6438356,0.9589041,0.19,0.73,0,0.630137,1,0.19,0.69,0,0.630137,0.9726027,0.07,0.73,0,0.5479452,1,0.05,0.67,0,0.5342466,0.9589041,0.07,0.69,0,0.5479452,0.9726027,-0.11,0.67,0,0.4246575,0.9589041,-0.13,0.73,0,0.4109589,1,-0.13,0.69,0,0.4109589,0.9726027,-0.69,0.01,0,0.02739726,0.5068493,-0.67,-0.17,0,0.04109589,0.3835616,-0.67,-0.01,0,0.04109589,0.4931507,-0.69,-0.19,0,0.02739726,0.369863,-0.73,0.01,0,0,0.5068493,-0.73,-0.19,0,0,0.369863,0.69,0.15,0,0.9726027,0.6027398,0.73,-0.05,0,1,0.4657534,0.73,0.15,0,1,0.6027398,0.69,-0.05,0,0.9726027,0.4657534,0.67,0.13,0,0.9589041,0.5890411,0.67,-0.03,0,0.9589041,0.479452,-0.69,0.33,0,0.02739726,0.7260274,-0.67,0.15,0,0.04109589,0.6027398,-0.67,0.31,0,0.04109589,0.7123288,-0.69,0.13,0,0.02739726,0.5890411,-0.73,0.33,0,0,0.7260274,-0.73,0.13,0,0,0.5890411,0.71,0.48,0,0.9863014,0.8287671,0.73,0.27,0,1,0.6849315,0.73,0.48,0,1,0.8287671,0.69,0.27,0,0.9726027,0.6849315,0.66,0.46,0,0.9520548,0.8150685,0.66,0.28,0,0.9520548,0.6917808,-0.64,0.65,0,0.06164384,0.9452055,-0.6,0.54,0,0.08904107,0.869863,-0.6,0.64,0,0.08904107,0.9383562,-0.64,0.44,0,0.06164384,0.8013698,-0.69,0.65,0,0.02739726,0.9452055,-0.73,0.62,0,0,0.9246575,-0.73,0.44,0,0,0.8013698,0.69,0.63,0,0.9726027,0.9315069,0.67,0.56,0,0.9589041,0.8835617,0.69,0.57,0,0.9726027,0.890411,0.65,0.7,0,0.9452055,0.9794521,0.6,0.56,0,0.9109589,0.8835617,0.56,0.73,0,0.8835617,1,0.51,0.73,0,0.849315,1,0.51,0.63,0,0.849315,0.9315069,0.5,0.72,0,0.8424658,0.9931507,0.5,0.67,0,0.8424658,0.9589041,-0.25,0.73,0,0.3287671,1,-0.26,0.66,0,0.3219178,0.9520548,-0.25,0.69,0,0.3287671,0.9726027,-0.42,0.65,0,0.2123288,0.9452055,-0.52,0.65,0,0.1438356,0.9452055,-0.53,0.73,0,0.1369863,1,-0.54,0.72,0,0.130137,0.9931507,-0.54,0.7,0,0.130137,0.9794521],[106,105,103,104,103,105,99,103,104,102,103,99,100,102,99,101,100,99,98,97,96,95,96,97,93,96,95,94,93,95,92,93,94,90,93,92,89,90,92,91,90,89,88,87,85,86,85,87,82,85,86,83,85,82,84,83,82,81,80,79,76,79,80,77,79,76,78,77,76,75,74,73,70,73,74,71,73,70,72,71,70,69,68,67,64,67,68,65,67,64,66,65,64,63,62,61,58,61,62,59,61,58,60,59,58,57,56,55,52,55,56,53,55,52,54,53,52,51,50,49,46,49,50,47,49,46,48,47,46,45,44,43,40,43,44,41,43,40,42,41,40,39,38,37,34,37,38,35,37,34,36,35,34,33,32,31,30,31,32,29,31,30,28,29,30,26,29,28,25,26,28,27,26,25,24,23,20,22,20,23,19,20,22,21,20,19,18,17,14,16,14,17,13,14,16,15,14,13,12,11,8,10,8,11,7,8,10,9,8,7,6,5,3,4,3,5,0,3,4,1,3,0,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-0.73,-0.73,0.73,0.73],100,146,146,146,146,73,73,0,0]},{"id":24550,"path":"Assets/Content/Sprites/Tiles/Special/tile_ice_1.png","assetBundleId":-1,"data":["tile_ice_1",6,24548,[0,0,0,0.5688889,0.5688889,0],[0.5688889,0.5688889,0,1,1,-0.5066667,-0.5688889,0,0.0546875,0,0.5688889,-0.5688889,0,1,0,-0.5688889,0.5688889,0,0,1,-0.5688889,-0.48,0,0,0.078125],[4,3,1,0,1,3,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,0,0]},{"id":24546,"path":"Assets/Content/Sprites/Tiles/Special/tile_crate.png","assetBundleId":-1,"data":["tile_crate",6,24544,[0,0,0,0.5333334,0.5688889,0],[0.5333334,0.5244445,0,0.96875,0.9609375,0.4977778,-0.5688889,0,0.9375,0,0.5333334,-0.4,0,0.96875,0.1484375,0.4711111,0.5688889,0,0.9140625,1,-0.5333334,0.5688889,0,0.03124997,1,-0.5333334,-0.5688889,0,0.03124997,0],[5,4,1,3,1,4,0,1,3,2,1,0],-0.000594720244407654,0,0.999405264854431,1,0.0312499701976776,0,0.96875,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,4.07612037658691,0]},{"id":24422,"path":"Assets/Content/Sprites/Dock/slot_background.png","assetBundleId":-1,"data":["slot_background",6,24424,[0,0,0,0.512,0.512,0],[0.508,0.352,0,0.9960938,0.84375,0.512,-0.328,0,1,0.1796875,0.512,0.328,0,1,0.8203125,0.504,-0.348,0,0.9921875,0.1601563,0.476,-0.408,0,0.9648438,0.1015625,0.464,0.424,0,0.953125,0.9140625,0.424,-0.464,0,0.9140625,0.046875,0.408,0.476,0,0.8984375,0.9648438,0.352,-0.508,0,0.84375,0.00390622,0.348,0.504,0,0.8398438,0.9921875,0.328,0.512,0,0.8203125,1,0.328,-0.512,0,0.8203125,0,-0.328,0.512,0,0.1796875,1,-0.328,-0.512,0,0.1796875,0,-0.348,-0.504,0,0.1601563,0.0078125,-0.352,0.508,0,0.15625,0.9960938,-0.384,-0.488,0,0.125,0.0234375,-0.424,0.464,0,0.0859375,0.953125,-0.424,-0.46,0,0.0859375,0.05078125,-0.464,-0.424,0,0.046875,0.0859375,-0.476,0.408,0,0.03515625,0.8984375,-0.504,0.348,0,0.0078125,0.8398438,-0.508,-0.352,0,0.00390622,0.15625,-0.512,0.328,0,0,0.8203125,-0.512,-0.328,0,0,0.1796875],[24,23,22,21,22,23,19,22,21,20,19,21,17,19,20,18,19,17,16,18,17,15,16,17,14,16,15,12,14,15,13,14,12,11,13,12,10,11,12,8,11,10,9,8,10,7,8,9,6,8,7,5,6,7,4,6,5,0,4,5,3,4,0,1,3,0,2,1,0],0,0,1,1,0,0,1,1,0.21875,0.1171875,0.2421875,0.34765625,[0,0,0,0],[-0.512,-0.512,0.512,0.512],250,256,256,256,256,128,128,0,0]},{"id":24542,"path":"Assets/Content/Sprites/Tiles/new tile_c1_t1.png","assetBundleId":-1,"data":["new tile_c1_t1",6,24540,[0,0,0,0.5688889,0.5688889,0],[-0.5688889,0.5688889,0,0,1,0.5688889,-0.5688889,0,1,0,0.5688889,0.5688889,0,1,1,-0.5688889,-0.5688889,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,0,0]},{"id":24558,"path":"Assets/Content/Sprites/Tiles/Special/tile_ice_3.png","assetBundleId":-1,"data":["tile_ice_3",6,24556,[-0.00444445,0,0,0.5288889,0.5688889,0],[-0.4266667,-0.4355555,0,0.125,0.1171875,-0.4533333,-0.48,0,0.1015625,0.078125,-0.4266667,-0.4622222,0,0.125,0.09375,-0.2488889,0.07111111,0,0.28125,0.5625,-0.5333334,-0.1066667,0,0.03124997,0.40625,-0.5333334,-0.3822222,0,0.03124997,0.1640625,0.4977778,-0.08888889,0,0.9375,0.421875,0.5244445,-0.5688889,0,0.9609375,0,0.5244445,-0.16,0,0.9609375,0.359375,0.2488889,-0.09777778,0,0.71875,0.4140625,-0.1066667,0.07111111,0,0.40625,0.5625,-0.4266667,-0.4888889,0,0.125,0.0703125,-0.4444444,-0.5688889,0,0.109375,0,-0.4711111,-0.008888889,0,0.0859375,0.4921875,-0.4533333,-0.05333333,0,0.1015625,0.453125,-0.4533333,-0.02666667,0,0.1015625,0.4765625,-0.48,-0.06222222,0,0.078125,0.4453125,-0.4977778,-0.01777778,0,0.0625,0.484375,-0.4977778,-0.04444445,0,0.0625,0.4609375,-0.008888889,0.2044444,0,0.4921875,0.6796875,-0.01777778,0.1511111,0,0.484375,0.6328125,-0.008888889,0.1688889,0,0.4921875,0.6484375,-0.06222222,0.1511111,0,0.4453125,0.6328125,-0.07111111,0.2044444,0,0.4375,0.6796875,-0.07111111,0.1688889,0,0.4375,0.6484375,-0.4533333,0.5688889,0,0.1015625,1,-0.1955556,0.4977778,0,0.328125,0.9375,-0.1955556,0.5688889,0,0.328125,1,-0.4622222,0.2577778,0,0.09375,0.7265625,-0.5333334,0.5422222,0,0.03124997,0.9765625,-0.5333334,0.2577778,0,0.03124997,0.7265625,0.3555556,0.56,0,0.8125,0.9921875,0.3555556,0.5155556,0,0.8125,0.953125,0.3644444,0.5333334,0,0.8203125,0.96875,0.3288889,0.5688889,0,0.7890625,1,0.3288889,0.5155556,0,0.7890625,0.953125,0.2577778,0.5244445,0,0.7265625,0.9609375,0.2133333,0.5333334,0,0.6875,0.96875,0.2044444,0.5688889,0,0.6796875,1],[38,34,37,36,37,34,35,36,34,32,35,34,31,32,34,33,32,31,30,29,28,25,28,29,26,28,25,27,26,25,24,23,22,19,22,23,20,22,19,21,20,19,18,17,16,13,16,17,14,16,13,15,14,13,12,11,7,2,7,11,0,7,2,3,7,0,10,7,3,9,7,10,6,7,9,8,7,6,5,4,1,3,1,4,0,1,3,2,1,0],-0.000335250049829483,0,0.999664723873138,1,0.0312499701976776,0,0.9609375,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,4.04290819168091,0]},{"id":24554,"path":"Assets/Content/Sprites/Tiles/Special/tile_ice_2.png","assetBundleId":-1,"data":["tile_ice_2",6,24552,[-0.00444445,0,0,0.5288889,0.5688889,0],[-0.4177778,0.3644444,0,0.1328125,0.8203125,-0.4711111,0.2577778,0,0.0859375,0.7265625,-0.3733333,0.3644444,0,0.171875,0.8203125,-0.5244445,0.2577778,0,0.0390625,0.7265625,-0.5333334,0.2755556,0,0.03124997,0.7421875,-0.3377778,0.5688889,0,0.203125,1,-0.1955556,0.56,0,0.328125,0.9921875,-0.1955556,0.5688889,0,0.328125,1,-0.3822222,0.5511111,0,0.1640625,0.984375,-0.4711111,0.4711111,0,0.0859375,0.9140625,-0.5244445,0.3555556,0,0.0390625,0.8125,-0.5333334,0.3288889,0,0.03124997,0.7890625,-0.5333334,0.2844445,0,0.03124997,0.75,0.1511111,0.3644444,0,0.6328125,0.8203125,0.5244445,-0.5688889,0,0.9609375,0,0.5244445,0.2933333,0,0.9609375,0.7578125,-0.4888889,-0.5688889,0,0.0703125,0,-0.5333334,0.2755556,0,0.03124997,0.7421875,-0.5333334,-0.4622222,0,0.03124997,0.09375,0.3733333,0.5511111,0,0.828125,0.984375,0.3911111,0.5066667,0,0.84375,0.9453125,0.3911111,0.5244445,0,0.84375,0.9609375,0.3644444,0.4977778,0,0.8203125,0.9375,0.3288889,0.5688889,0,0.7890625,1,0.2133333,0.5422222,0,0.6875,0.9765625,0.2044444,0.5688889,0,0.6796875,1],[25,23,24,22,24,23,19,22,23,20,22,19,21,20,19,18,17,16,4,16,17,3,16,4,1,16,3,14,16,1,2,14,1,13,14,2,15,14,13,12,11,4,10,4,11,0,4,10,9,0,10,8,0,9,2,0,8,5,2,8,6,2,5,7,6,5,4,0,3,1,3,0,2,1,0],-0.000242270529270172,0,0.999757707118988,1,0.0312499701976776,0,0.9609375,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,4.03100681304932,0]},{"id":24562,"path":"Assets/Content/Sprites/Tiles/Special/tile_link.png","assetBundleId":-1,"data":["tile_link",6,24560,[0,0.03111112,0,0.1955556,0.4222222,0],[-0.1511111,0.3822222,0,0.3671875,0.8359375,-0.1866667,0.2044444,0,0.3359375,0.6796875,-0.1511111,0.1777778,0,0.3671875,0.65625,-0.1511111,0.4355555,0,0.3671875,0.8828125,-0.1511111,0.4266667,0,0.3671875,0.875,-0.1511111,0.4266667,0,0.3671875,0.875,-0.1511111,0.4,0,0.3671875,0.8515625,-0.16,0.3911111,0,0.359375,0.84375,-0.1777778,0.4355555,0,0.34375,0.8828125,-0.1866667,0.3911111,0,0.3359375,0.84375,-0.1955556,0.4177778,0,0.328125,0.8671875,-0.1244444,0.4533333,0,0.390625,0.8984375,-0.1422222,0.4088889,0,0.375,0.859375,0.1955556,0.4533333,0,0.671875,0.8984375,0.16,-0.3911111,0,0.640625,0.15625,0.1955556,-0.3555556,0,0.671875,0.1875,-0.1955556,0.1511111,0,0.328125,0.6328125,-0.1955556,-0.3911111,0,0.328125,0.15625],[6,4,12,5,12,4,17,16,14,2,14,16,0,14,2,6,14,0,12,14,6,11,14,12,13,14,11,15,14,13,12,5,11,10,8,9,7,9,8,3,7,8,6,7,3,4,6,3,5,4,3,2,1,0],-0.000100880861282349,-0.000208988785743713,0.99989914894104,0.999791026115417,0.328125,0.15625,0.671875,0.8984375,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,42.0129127502441,20.0267505645752]},{"id":24566,"path":"Assets/Content/Sprites/Tiles/Special/tile_unknown.png","assetBundleId":-1,"data":["tile_unknown",6,24564,[0,0,0,0.1955556,0.3466667,0],[0.1333333,0.3466667,0,0.6171875,0.8046875,0.1955556,-0.16,0,0.671875,0.359375,0.1955556,0.3288889,0,0.671875,0.7890625,0.1333333,-0.3466667,0,0.6171875,0.1953125,-0.08888889,-0.3466667,0,0.421875,0.1953125,-0.1688889,-0.32,0,0.3515625,0.21875,-0.1777778,0.3466667,0,0.34375,0.8046875,-0.1955556,0.3111111,0,0.328125,0.7734375,-0.1955556,0.07111111,0,0.328125,0.5625],[8,7,5,6,5,7,0,5,6,4,5,0,3,4,0,1,3,0,2,1,0],-0.00059470534324646,-0.000208988785743713,0.999405264854431,0.999791026115417,0.328125,0.1953125,0.671875,0.8046875,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,42.0761222839355,25.0267505645752]},{"id":24582,"path":"Assets/Content/Sprites/Tiles/tile_c2_t5.png","assetBundleId":-1,"data":["tile_c2_t5",6,24580,[0,0,0,1.2,1.2,0],[-1.2,1.2,0,0,1,1.2,-1.2,0,1,0,1.2,1.2,0,1,1,-1.2,-1.2,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-1.2,-1.2,1.2,1.2],53.3333320617676,128,128,128,128,64,64,0,0]},{"id":24586,"path":"Assets/Content/Sprites/Tiles/tile_c3_t2.png","assetBundleId":-1,"data":["tile_c3_t2",6,24584,[0,0,0,0.5688889,0.5688889,0],[-0.5688889,0.5688889,0,0,1,0.5688889,-0.5688889,0,1,0,0.5688889,0.5688889,0,1,1,-0.5688889,-0.5688889,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,0,0]},{"id":24570,"path":"Assets/Content/Sprites/Tiles/tile_c2_t1.png","assetBundleId":-1,"data":["tile_c2_t1",6,24568,[0,0,0,1.198889,1.198889,0],[-1.198889,1.198889,0,0,1,1.198889,-1.198889,0,1,0,1.198889,1.198889,0,1,1,-1.198889,-1.198889,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-1.198889,-1.198889,1.198889,1.198889],53.3827629089355,128,128,128,128,64,64,0,0]},{"id":24590,"path":"Assets/Content/Sprites/Tiles/tile_c3_t3.png","assetBundleId":-1,"data":["tile_c3_t3",6,24588,[0,0,0,1.2,1.2,0],[-1.2,1.2,0,0,1,1.2,-1.2,0,1,0,1.2,1.2,0,1,1,-1.2,-1.2,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-1.2,-1.2,1.2,1.2],53.3333320617676,128,128,128,128,64,64,0,0]},{"id":24578,"path":"Assets/Content/Sprites/Tiles/tile_c2_t3.png","assetBundleId":-1,"data":["tile_c2_t3",6,24576,[0,0,0,0.5688889,0.5688889,0],[-0.5688889,0.5688889,0,0,1,0.5688889,-0.5688889,0,1,0,0.5688889,0.5688889,0,1,1,-0.5688889,-0.5688889,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,0,0]},{"id":26604,"path":"Assets/Content/Sprites/Ingredients/vanila.png","assetBundleId":-1,"data":["vanila",6,26602,[0.002343744,-0.028125,0,0.5039063,0.2484375,0],[0.50625,-0.01875,0,0.921875,0.484375,0.459375,-0.1546875,0,0.8828125,0.3710938,0.50625,-0.1078125,0,0.921875,0.4101563,0.45,0.15,0,0.875,0.625,0.3984375,-0.13125,0,0.8320313,0.390625,0.084375,0.2203125,0,0.5703125,0.6835938,0.4078125,-0.1875,0,0.8398438,0.34375,0.421875,-0.15,0,0.8515625,0.375,-0.0796875,-0.2765625,0,0.4335938,0.2695313,-0.43125,-0.0703125,0,0.140625,0.4414063,-0.459375,0.2203125,0,0.1171875,0.6835938,-0.5015625,0.1265625,0,0.08203122,0.6054688,-0.5015625,-0.028125,0,0.08203122,0.4765625,-0.4734375,-0.2765625,0,0.1054688,0.2695313,-0.4875,-0.2390625,0,0.09375,0.3007813,-0.4921875,-0.1875,0,0.08984375,0.34375],[15,9,14,13,14,9,8,13,9,12,11,9,10,9,11,5,9,10,8,9,5,6,8,5,4,6,5,7,6,4,5,3,4,1,4,3,0,1,3,2,1,0],-0.000297375023365021,-0.00010448694229126,0.999702632427216,0.999895513057709,0.0820312201976776,0.26953125,0.921875,0.68359375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,21.0761203765869,69.0267486572266]},{"id":24574,"path":"Assets/Content/Sprites/Tiles/tile_c2_t2.png","assetBundleId":-1,"data":["tile_c2_t2",6,24572,[0,0,0,1.2,1.2,0],[-1.2,1.2,0,0,1,1.2,-1.2,0,1,0,1.2,1.2,0,1,1,-1.2,-1.2,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-1.2,-1.2,1.2,1.2],53.3333320617676,128,128,128,128,64,64,0,0]},{"id":26444,"path":"Assets/Content/Sprites/Ingredients/yeast.png","assetBundleId":-1,"data":["yeast",6,26442,[0,0.01875001,0,0.6,0.4640625,0],[0.2484375,-0.403125,0,0.7070313,0.1640625,0.234375,-0.4359375,0,0.6953125,0.1367188,0.253125,-0.4171875,0,0.7109375,0.1523438,0.178125,-0.4453125,0,0.6484375,0.1289063,0.1546875,-0.4453125,0,0.6289063,0.1289063,0.1453125,-0.403125,0,0.6210938,0.1640625,0.140625,-0.4125,0,0.6171875,0.15625,0.140625,-0.4359375,0,0.6171875,0.1367188,0.58125,-0.309375,0,0.984375,0.2421875,0.6,-0.4078125,0,1,0.1601563,0.6,-0.31875,0,1,0.234375,0.5296875,-0.309375,0,0.9414063,0.2421875,0.496875,-0.440625,0,0.9140625,0.1328125,0.4734375,-0.3703125,0,0.8945313,0.1914063,0.46875,-0.35625,0,0.890625,0.203125,0.4359375,-0.4171875,0,0.8632813,0.1523438,0.4359375,-0.440625,0,0.8632813,0.1328125,-0.4828125,-0.3375,0,0.09765625,0.21875,-0.4875,-0.4078125,0,0.09375,0.1601563,-0.4828125,-0.403125,0,0.09765625,0.1640625,-0.5203125,-0.309375,0,0.06640628,0.2421875,-0.534375,-0.4078125,0,0.0546875,0.1601563,-0.5578125,-0.309375,0,0.03515625,0.2421875,-0.6,-0.31875,0,0,0.234375,-0.6,-0.375,0,0,0.1875,-0.028125,-0.3046875,0,0.4765625,0.2460938,-0.0328125,-0.3375,0,0.4726563,0.21875,-0.028125,-0.3328125,0,0.4765625,0.2226563,-0.084375,-0.3515625,0,0.4296875,0.2070313,-0.09375,-0.3046875,0,0.421875,0.2460938,-0.1078125,-0.3515625,0,0.4101563,0.2070313,-0.1171875,-0.309375,0,0.4023438,0.2421875,-0.121875,-0.3234375,0,0.3984375,0.2304688,-0.121875,-0.3375,0,0.3984375,0.21875,0.1640625,-0.309375,0,0.6367188,0.2421875,0.16875,-0.3375,0,0.640625,0.21875,0.16875,-0.31875,0,0.640625,0.234375,0.1453125,-0.309375,0,0.6210938,0.2421875,0.140625,-0.31875,0,0.6171875,0.234375,0.140625,-0.3375,0,0.6171875,0.21875,-0.459375,-0.2578125,0,0.1171875,0.2851563,-0.4640625,-0.28125,0,0.1132813,0.265625,-0.4546875,-0.271875,0,0.1210938,0.2734375,-0.4875,-0.28125,0,0.09375,0.265625,-0.496875,-0.24375,0,0.0859375,0.296875,-0.5109375,-0.24375,0,0.07421875,0.296875,-0.515625,-0.2484375,0,0.0703125,0.2929688,-0.515625,-0.2625,0,0.0703125,0.28125,-0.4265625,0.1078125,0,0.1445313,0.5898438,-0.4125,0.0890625,0,0.15625,0.5742188,-0.4125,0.103125,0,0.15625,0.5859375,-0.4265625,0.084375,0,0.1445313,0.5703125,-0.4359375,0.0984375,0,0.1367188,0.5820313,-0.553125,0.0796875,0,0.0390625,0.5664063,-0.525,0.065625,0,0.06249997,0.5546875,-0.5296875,0.0796875,0,0.05859375,0.5664063,-0.553125,0.046875,0,0.0390625,0.5390625,-0.6,0.05625,0,0,0.546875,-0.6,0.028125,0,0,0.5234375,0.3140625,0.4546875,0,0.7617188,0.8789063,0.2859375,0.309375,0,0.7382813,0.7578125,0.290625,0.2203125,0,0.7421875,0.6835938,0.271875,0.3140625,0,0.7265625,0.7617188,0.2625,0.3046875,0,0.71875,0.7539063,0.2578125,0.2203125,0,0.7148438,0.6835938,0.24375,0.46875,0,0.703125,0.890625,0.2578125,0.215625,0,0.7148438,0.6796875,0.3375,0.24375,0,0.78125,0.703125,0.3328125,0.2484375,0,0.7773438,0.7070313,0.3328125,0.2484375,0,0.7773438,0.7070313,0.384375,0.24375,0,0.8203125,0.703125,0.3421875,0.24375,0,0.7851563,0.703125,0.328125,0.2484375,0,0.7734375,0.7070313,0.2765625,0.2015625,0,0.7304688,0.6679688,0.2671875,0.20625,0,0.7226563,0.671875,0.4640625,-0.215625,0,0.8867188,0.3203125,0.4640625,0.1546875,0,0.8867188,0.6289063,0.215625,0.440625,0,0.6796875,0.8671875,0.1921875,0.309375,0,0.6601563,0.7578125,0.1921875,0.2953125,0,0.6601563,0.7460938,0.178125,0.290625,0,0.6484375,0.7421875,0.1640625,0.3046875,0,0.6367188,0.7539063,0.15,0.28125,0,0.625,0.734375,0.15,0.2671875,0,0.625,0.7226563,0.1359375,0.2625,0,0.6132813,0.71875,0.1265625,0.271875,0,0.6054688,0.7265625,-0.0421875,0.4453125,0,0.4648438,0.8710938,-0.05625,0.440625,0,0.453125,0.8671875,-0.075,0.3046875,0,0.4375,0.7539063,-0.0609375,0.4640625,0,0.4492188,0.8867188,-0.0796875,0.2484375,0,0.4335938,0.7070313,-0.103125,0.2578125,0,0.4140625,0.7148438,-0.1171875,0.253125,0,0.4023438,0.7109375,-0.1171875,0.234375,0,0.4023438,0.6953125,-0.13125,0.3796875,0,0.390625,0.8164063,-0.121875,0.365625,0,0.3984375,0.8046875,-0.13125,0.365625,0,0.390625,0.8046875,-0.140625,0.35625,0,0.3828125,0.796875,-0.159375,0.35625,0,0.3671875,0.796875,-0.3703125,0.1171875,0,0.1914063,0.5976563,-0.159375,0.35625,0,0.3671875,0.796875,-0.3984375,0.0421875,0,0.1679688,0.5351563,-0.3984375,-0.215625,0,0.1679688,0.3203125,0.2859375,0.2953125,0,0.7382813,0.7460938,0.2859375,0.234375,0,0.7382813,0.6953125,0.271875,0.290625,0,0.7265625,0.7421875,0.271875,0.234375,0,0.7265625,0.6953125,0.1828125,0.31875,0,0.6523438,0.765625,0.1734375,0.31875,0,0.6445313,0.765625,0.1640625,0.39375,0,0.6367188,0.828125,0.1640625,0.309375,0,0.6367188,0.7578125,0.140625,0.290625,0,0.6171875,0.7421875,0.1265625,0.2859375,0,0.6054688,0.7382813,-0.1359375,0.384375,0,0.3867188,0.8203125,-0.13125,0.403125,0,0.390625,0.8359375,-0.1453125,0.4078125,0,0.3789063,0.8398438,-0.159375,0.4078125,0,0.3671875,0.8398438,-0.1640625,0.403125,0,0.3632813,0.8359375,-0.1640625,0.3703125,0,0.3632813,0.8085938,-0.1078125,0.3609375,0,0.4101563,0.8007813,-0.121875,0.3703125,0,0.3984375,0.8085938,-0.084375,0.3796875,0,0.4296875,0.8164063,-0.103125,0.35625,0,0.4140625,0.796875,-0.084375,0.35625,0,0.4296875,0.796875,-0.1078125,0.3890625,0,0.4101563,0.8242188,-0.121875,0.375,0,0.3984375,0.8125,-0.0796875,0.3328125,0,0.4335938,0.7773438,-0.084375,0.2765625,0,0.4296875,0.7304688,-0.0796875,0.3328125,0,0.4335938,0.7773438,-0.0984375,0.271875,0,0.4179688,0.7265625,-0.1171875,0.2671875,0,0.4023438,0.7226563,-0.0796875,0.3328125,0,0.4335938,0.7773438,-0.0796875,0.403125,0,0.4335938,0.8359375,-0.0796875,0.403125,0,0.4335938,0.8359375,-0.0796875,0.421875,0,0.4335938,0.8515625,-0.09375,0.4828125,0,0.421875,0.9023438,-0.09375,0.43125,0,0.421875,0.859375,-0.140625,0.4828125,0,0.3828125,0.9023438,-0.0796875,0.4125,0,0.4335938,0.84375,-0.0796875,0.4078125,0,0.4335938,0.8398438,-0.0890625,0.39375,0,0.4257813,0.828125,-0.15,0.4171875,0,0.375,0.8476563,-0.159375,0.4546875,0,0.3671875,0.8789063],[95,94,120,133,132,139,142,137,141,140,141,137,136,140,137,138,140,136,132,140,138,139,132,138,128,131,88,133,88,131,139,88,133,138,88,139,134,88,138,137,135,136,134,136,135,89,134,135,88,134,89,123,132,126,131,126,132,133,131,132,128,126,131,119,130,95,93,95,130,92,93,130,129,130,119,126,129,119,127,129,126,128,127,126,120,125,119,124,119,125,122,119,124,121,122,124,123,122,121,95,120,119,118,117,100,116,100,117,113,100,116,115,113,116,114,113,115,94,113,114,100,113,98,97,98,113,96,97,113,94,96,113,81,110,80,108,80,110,107,80,108,79,80,107,78,79,107,85,112,84,111,84,112,83,84,111,82,83,111,109,112,86,85,86,112,111,112,109,82,111,109,81,82,109,110,81,109,108,110,109,77,108,109,107,108,77,78,107,77,66,64,74,106,74,64,61,74,106,104,61,106,63,62,105,103,105,62,60,103,62,64,63,106,105,106,63,104,106,105,103,104,105,61,104,103,60,61,103,102,101,75,99,75,101,93,75,99,98,93,99,100,98,99,97,93,98,96,93,97,94,93,96,95,93,94,92,75,93,91,75,92,90,75,91,88,75,90,87,75,88,89,87,88,86,75,87,85,75,86,84,75,85,83,75,84,82,75,83,81,75,82,80,75,81,79,75,80,78,75,79,66,75,78,77,66,78,65,66,77,74,75,66,73,75,74,69,75,73,67,75,69,76,75,67,74,61,73,72,73,61,59,72,61,68,72,59,70,68,59,69,72,68,67,68,70,71,67,70,69,68,67,59,63,65,64,65,63,66,65,64,62,63,59,60,62,59,61,60,59,58,57,56,53,56,57,54,56,53,55,54,53,52,48,51,49,51,48,50,49,48,47,46,43,45,43,46,44,43,45,40,43,44,41,43,40,42,41,40,39,38,35,37,35,38,34,35,37,36,35,34,33,32,30,31,30,32,29,30,31,28,30,29,25,28,29,26,28,25,27,26,25,24,23,21,22,21,23,20,21,22,18,21,20,17,18,20,19,18,17,16,15,12,13,12,15,14,11,13,12,13,11,9,12,11,8,9,11,10,9,8,7,6,4,5,4,6,0,4,5,3,4,0,1,3,0,2,1,0],0,-0.0000560730695724487,1,0.999943912029266,0,0.12890625,1,0.90234375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,0,33.0143547058105]},{"id":24594,"path":"Assets/Content/Sprites/Tiles/tile_c3_t5.png","assetBundleId":-1,"data":["tile_c3_t5",6,24592,[0,0,0,0.5688889,0.5688889,0],[-0.5688889,0.5688889,0,0,1,0.5688889,-0.5688889,0,1,0,0.5688889,0.5688889,0,1,1,-0.5688889,-0.5688889,0,0,0],[3,0,1,2,1,0],0,0,1,1,0,0,1,1,0,0,0,0,[0,0,0,0],[-0.5688889,-0.5688889,0.5688889,0.5688889],112.5,128,128,128,128,64,64,0,0]},{"id":26628,"path":"Assets/Content/Sprites/Ingredients/eggplant.png","assetBundleId":-1,"data":["eggplant",6,26626,[0.01406252,-0.01171875,0,0.5578125,0.4007813,0],[0.4453125,0.084375,0,0.8710938,0.5703125,0.43125,0.0796875,0,0.859375,0.5664063,0.440625,0.0796875,0,0.8671875,0.5664063,0.4265625,0.1125,0,0.8554688,0.59375,0.4171875,0.1125,0,0.8476563,0.59375,0.4125,0.0984375,0,0.84375,0.5820313,0.45,0.09375,0,0.875,0.578125,0.45,0.0890625,0,0.875,0.5742188,0.43125,0.1125,0,0.859375,0.59375,0.534375,0.05625,0,0.9453125,0.546875,0.4828125,0.0375,0,0.9023438,0.53125,0.4921875,0.0140625,0,0.9101563,0.5117188,0.478125,0.0421875,0,0.8984375,0.5351563,0.4734375,0.0890625,0,0.8945313,0.5742188,0.46875,0.065625,0,0.890625,0.5546875,0.571875,-0.3140625,0,0.9765625,0.2382813,0.571875,0.028125,0,0.9765625,0.5234375,0.31875,-0.4125,0,0.765625,0.15625,-0.4359375,-0.2484375,0,0.1367188,0.2929688,-0.4265625,-0.28125,0,0.1445313,0.265625,-0.4171875,-0.24375,0,0.1523438,0.296875,-0.440625,-0.2625,0,0.1328125,0.28125,0.2859375,0.309375,0,0.7382813,0.7578125,-0.0703125,0.3890625,0,0.4414063,0.8242188,-0.346875,-0.4125,0,0.2109375,0.15625,-0.3609375,-0.2859375,0,0.1992188,0.2617188,-0.384375,-0.271875,0,0.1796875,0.2734375,-0.403125,-0.253125,0,0.1640625,0.2890625,-0.4125,-0.2484375,0,0.15625,0.2929688,-0.4171875,-0.24375,0,0.1523438,0.296875,-0.45,-0.225,0,0.125,0.3125,-0.4640625,-0.2296875,0,0.1132813,0.3085938,-0.5203125,0.3890625,0,0.06640628,0.8242188,-0.54375,0.365625,0,0.04687503,0.8046875,-0.54375,-0.1828125,0,0.04687503,0.3476563,-0.3703125,-0.2859375,0,0.1914063,0.2617188,-0.45,-0.2578125,0,0.125,0.2851563,-0.4734375,-0.2390625,0,0.1054688,0.3007813,-0.54375,-0.2625,0,0.04687503,0.28125,-0.54375,-0.309375,0,0.04687503,0.2421875],[20,29,28,39,38,24,37,24,38,36,24,37,19,24,36,20,24,19,28,24,20,35,24,28,25,24,35,34,33,31,32,31,33,23,31,32,30,31,23,20,30,23,29,20,23,28,29,23,27,28,23,26,27,23,25,26,23,24,25,23,17,24,23,22,17,23,5,17,22,4,5,22,3,4,22,21,18,19,20,19,18,12,10,11,17,5,15,1,15,5,2,15,1,0,15,2,12,15,0,11,15,12,9,15,11,16,15,9,14,13,12,9,12,13,10,12,9,11,10,9,3,8,0,6,0,8,7,0,6,5,4,1,3,1,4,0,1,3,2,1,0],-0.000104464590549469,-0.00029735267162323,0.999895513057709,0.999702632427216,0.0468750298023224,0.15625,0.9765625,0.82421875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,12.0267505645752,40.0761222839355]},{"id":26646,"path":"Assets/Content/Sprites/Ingredients/ham.png","assetBundleId":-1,"data":["ham",6,26644,[0.0234375,-0.004687503,0,0.4453125,0.3328125,0],[-0.3984375,0.2390625,0,0.1679688,0.6992188,-0.3890625,0.0890625,0,0.1757813,0.5742188,-0.3375,0.328125,0,0.21875,0.7734375,-0.3984375,0.09375,0,0.1679688,0.578125,0.065625,0.31875,0,0.5546875,0.765625,-0.0609375,-0.3375,0,0.4492188,0.21875,0.065625,0.309375,0,0.5546875,0.7578125,0.075,0.328125,0,0.5625,0.7734375,-0.3890625,0.0609375,0,0.1757813,0.5507813,-0.3984375,0.0609375,0,0.1679688,0.5507813,-0.3984375,-0.178125,0,0.1679688,0.3515625,0.46875,0.009375,0,0.890625,0.5078125,0.4546875,0.0046875,0,0.8789063,0.5039063,0.46875,-0.2859375,0,0.890625,0.2617188,0.43125,0.0328125,0,0.859375,0.5273438,0.365625,0.028125,0,0.8046875,0.5234375,0.103125,0.31875,0,0.5859375,0.765625,0.365625,0.01875,0,0.8046875,0.515625,0.3703125,0.0375,0,0.8085938,0.53125,0.3984375,0.0375,0,0.8320313,0.53125,0.0984375,0.328125,0,0.5820313,0.7734375,0.09375,0.328125,0,0.578125,0.7734375,0.4546875,-0.028125,0,0.8789063,0.4765625,0.4359375,-0.3375,0,0.8632813,0.21875,0.421875,-0.028125,0,0.8515625,0.4765625,0.4078125,-0.0234375,0,0.8398438,0.4804688,0.103125,0.3046875,0,0.5859375,0.7539063,0.0796875,0.2953125,0,0.5664063,0.7460938,-0.4171875,0.09375,0,0.1523438,0.578125,-0.4171875,0.0609375,0,0.1523438,0.5507813,-0.421875,0.0796875,0,0.1484375,0.5664063,-0.421875,0.0703125,0,0.1484375,0.5585938],[31,30,29,28,29,30,9,29,28,3,9,28,9,3,8,1,8,3,6,4,27,7,27,4,21,27,7,26,27,21,16,26,21,17,15,25,18,25,15,19,25,18,14,25,19,24,25,14,22,24,14,12,22,14,5,6,23,27,23,6,26,23,27,16,23,26,17,23,16,25,23,17,24,23,25,22,23,24,13,23,22,12,13,22,21,20,16,11,16,20,14,16,11,19,16,14,18,16,19,15,16,18,17,16,15,12,14,11,13,12,11,10,9,5,8,5,9,1,5,8,2,5,1,4,5,2,7,4,2,6,5,4,3,0,1,2,1,0],-0.00029735267162323,-0.00029735267162323,0.999702632427216,0.999702632427216,0.1484375,0.21875,0.890625,0.7734375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,38.0761222839355,56.0761222839355]},{"id":26734,"path":"Assets/Content/Sprites/Ingredients/cheddar cheese.png","assetBundleId":-1,"data":["cheddar cheese",6,26732,[-0.009374991,0.009374991,0,0.50625,0.2625,0],[0.496875,0.2109375,0,0.9140625,0.6757813,0.43125,-0.253125,0,0.859375,0.2890625,0.496875,-0.196875,0,0.9140625,0.3359375,0.4171875,0.271875,0,0.8476563,0.7265625,0.1078125,0.271875,0,0.5898438,0.7265625,-0.3796875,0.196875,0,0.1835938,0.6640625,-0.515625,-0.0515625,0,0.0703125,0.4570313,-0.515625,-0.253125,0,0.0703125,0.2890625],[7,6,1,5,1,6,4,1,5,3,1,4,0,1,3,2,1,0],-0.000104494392871857,-0.000297337770462036,0.999895513057709,0.99970269203186,0.0703125,0.2890625,0.9140625,0.7265625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,18.0267505645752,74.0761184692383]},{"id":26792,"path":"Assets/Content/Sprites/Ingredients/salmon fillets.png","assetBundleId":-1,"data":["salmon fillets",6,26790,[-0.02578126,-0.002343744,0,0.5039063,0.3398438,0],[-0.2109375,0.31875,0,0.3242188,0.765625,-0.20625,0.309375,0,0.328125,0.7578125,-0.2015625,0.309375,0,0.3320313,0.7578125,-0.215625,0.3,0,0.3203125,0.75,-0.2109375,0.328125,0,0.3242188,0.7734375,-0.2578125,-0.20625,0,0.2851563,0.328125,-0.24375,-0.2109375,0,0.296875,0.3242188,-0.2671875,0.328125,0,0.2773438,0.7734375,-0.2671875,-0.215625,0,0.2773438,0.3203125,-0.5296875,0.0796875,0,0.05859375,0.5664063,-0.1921875,0.3046875,0,0.3398438,0.7539063,-0.1921875,0.2953125,0,0.3398438,0.7460938,-0.20625,0.3375,0,0.328125,0.78125,-0.15,0.328125,0,0.375,0.7734375,-0.1546875,0.3375,0,0.3710938,0.78125,-0.2109375,0.3328125,0,0.3242188,0.7773438,0.478125,0.2109375,0,0.8984375,0.6757813,0.28125,-0.3421875,0,0.734375,0.2148438,0.478125,-0.0890625,0,0.8984375,0.4257813,0.1171875,0.328125,0,0.5976563,0.7734375,-0.0703125,-0.3421875,0,0.4414063,0.2148438,-0.1453125,0.31875,0,0.3789063,0.765625,-0.15,0.2953125,0,0.375,0.7460938,-0.1640625,0.290625,0,0.3632813,0.7421875,-0.1875,0.290625,0,0.34375,0.7421875,-0.1921875,0.290625,0,0.3398438,0.7421875,-0.20625,0.2859375,0,0.328125,0.7382813,-0.24375,-0.225,0,0.296875,0.3125,-0.2578125,-0.2296875,0,0.2851563,0.3085938,-0.5296875,-0.2390625,0,0.05859375,0.3007813],[8,5,28,27,28,5,6,27,5,3,1,26,25,26,1,2,25,1,11,25,2,11,10,24,0,4,2,13,2,4,10,2,13,24,10,13,23,24,13,22,23,13,21,22,13,9,28,29,20,29,28,8,28,9,27,20,28,6,20,27,3,20,6,26,20,3,25,20,26,11,20,25,24,20,11,23,20,24,22,20,23,21,20,22,13,19,21,20,21,19,17,20,19,16,17,19,18,17,16,4,15,13,12,13,15,14,13,12,11,2,10,9,7,8,5,8,7,3,5,7,4,3,7,6,5,3,0,3,4,3,0,1,2,1,0],-0.000297345221042633,-0.000104501843452454,0.999702632427216,0.999895513057709,0.05859375,0.21484375,0.8984375,0.78125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,15.0761203765869,55.0267524719238]},{"id":26652,"path":"Assets/Content/Sprites/Ingredients/makaroni noodle.png","assetBundleId":-1,"data":["makaroni noodle",6,26650,[-0.004687488,-0.002343759,0,0.39375,0.2601563,0],[0.3890625,0.2296875,0,0.8242188,0.6914063,0.35625,-0.2625,0,0.796875,0.28125,0.3890625,-0.159375,0,0.8242188,0.3671875,0.271875,0.2578125,0,0.7265625,0.7148438,-0.271875,0.2578125,0,0.2734375,0.7148438,-0.3796875,-0.2625,0,0.1835938,0.28125,-0.3984375,0.084375,0,0.1679688,0.5703125,-0.3984375,-0.1734375,0,0.1679688,0.3554688],[7,6,5,4,5,6,1,5,4,3,1,4,0,1,3,2,1,0],-0.00029735267162323,-0.000297337770462036,0.999702632427216,0.99970269203186,0.16796875,0.28125,0.82421875,0.71484375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,43.0761222839355,72.0761184692383]},{"id":26966,"path":"Assets/Content/Sprites/Ingredients/zucini.png","assetBundleId":-1,"data":["zucini",6,26964,[0.009375006,-0.0328125,0,0.3796875,0.178125,0],[0.3703125,0.1453125,0,0.8085938,0.6210938,0.3890625,-0.05625,0,0.8242188,0.453125,0.3890625,0.1171875,0,0.8242188,0.5976563,0.24375,-0.2109375,0,0.703125,0.3242188,-0.15,-0.2109375,0,0.375,0.3242188,-0.2109375,-0.1875,0,0.3242188,0.34375,-0.28125,-0.1125,0,0.265625,0.40625,-0.3421875,0.1453125,0,0.2148438,0.6210938,-0.3703125,0.0890625,0,0.1914063,0.5742188,-0.3703125,0.0046875,0,0.1914063,0.5039063],[9,8,6,7,6,8,0,6,7,5,6,0,4,5,0,3,4,0,1,3,0,2,1,0],-0.000104501843452454,-0.000297337770462036,0.999895513057709,0.99970269203186,0.19140625,0.32421875,0.82421875,0.62109375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,49.0267524719238,83.0761184692383]},{"id":26750,"path":"Assets/Content/Sprites/Ingredients/almond.png","assetBundleId":-1,"data":["almond",6,26748,[0.00467898,0.1131342,0,0.4476563,0.215625,0],[-0.1054773,-0.08842832,0,0.4179688,0.3125,-0.2554773,-0.09780332,0,0.2929688,0.3046875,-0.1007898,-0.09780332,0,0.421875,0.3046875,-0.1148523,0.3193842,0,0.4101563,0.6523438,-0.3351648,-0.06030332,0,0.2265625,0.3359375,-0.4054773,0.2021967,0,0.1679688,0.5546875,-0.4429773,0.1506342,0,0.1367188,0.5117188,-0.4429773,0.1178217,0,0.1367188,0.484375,-0.08203977,-0.09780332,0,0.4375,0.3046875,-0.09610227,-0.1024908,0,0.4257813,0.3007813,-0.09610227,-0.07905332,0,0.4257813,0.3203125,-0.08203977,-0.08374082,0,0.4375,0.3164063,0.03514774,-0.08842832,0,0.5351563,0.3125,0.02577274,-0.1024908,0,0.5273438,0.3007813,0.03514774,-0.09780332,0,0.5351563,0.3046875,-0.04922726,-0.1024908,0,0.4648438,0.3007813,-0.05391476,-0.08374082,0,0.4609375,0.3164063,-0.05391476,-0.08842832,0,0.4609375,0.3125,0.03046024,-0.07905332,0,0.53125,0.3203125,0.03514774,-0.08374082,0,0.5351563,0.3164063,-0.04922726,-0.07905332,0,0.4648438,0.3203125,0.4523352,0.1693842,0,0.8828125,0.5273438,0.4288977,0.04750918,0,0.8632813,0.4257813,0.4523352,0.08969668,0,0.8828125,0.4609375,0.3585852,-0.008740819,0,0.8046875,0.3789063,0.3351477,0.3100092,0,0.7851563,0.6445313,0.3257727,-0.02280332,0,0.7773438,0.3671875,0.2648352,0.2865717,0,0.7265625,0.625,0.2554602,0.3287592,0,0.71875,0.6601563,0.2507727,0.2912592,0,0.7148438,0.6289063,0.2413977,0.2818842,0,0.7070313,0.6210938,0.2226477,0.2537592,0,0.6914063,0.5976563,0.2367103,0.2490717,0,0.703125,0.59375,0.2132728,0.2443842,0,0.6835938,0.5898438,0.1570227,-0.06030332,0,0.6367188,0.3359375,0.1992102,-0.05561582,0,0.671875,0.3398438,0.1148352,0.3100092,0,0.6015625,0.6445313,0.1007727,0.3240717,0,0.5898438,0.65625,0.08671024,0.3193842,0,0.578125,0.6523438,0.08671024,0.3053217,0,0.578125,0.640625,-0.08672726,0.3287592,0,0.4335938,0.6601563,0.2648352,0.2725092,0,0.7265625,0.6132813,0.2507727,0.2678217,0,0.7148438,0.609375,0.2367103,0.2350092,0,0.703125,0.5820313,0.2367103,-0.04624082,0,0.703125,0.3476563,0.2226477,0.2303217,0,0.6914063,0.578125,0.2226477,-0.05092832,0,0.6914063,0.34375,0.4195228,-0.008740819,0,0.8554688,0.3789063,0.4195228,-0.09311582,0,0.8554688,0.3085938,0.4288977,-0.03686582,0,0.8632813,0.3554688,0.3867103,-0.09780332,0,0.828125,0.3046875,0.3773353,-0.01342832,0,0.8203125,0.375,0.2367103,-0.05092832,0,0.703125,0.34375,0.1148352,0.2959467,0,0.6015625,0.6328125,0.1007727,0.2912592,0,0.5898438,0.6289063],[39,38,54,37,54,38,53,54,37,36,53,37,12,19,50,34,50,19,39,34,19,54,34,39,53,34,54,36,34,53,35,50,34,52,50,35,51,50,52,47,50,51,48,50,47,49,48,47,33,31,45,43,45,31,32,43,31,30,29,42,41,42,29,27,41,29,35,33,46,45,46,33,44,46,45,43,44,45,26,44,43,32,26,43,30,26,32,42,26,30,41,26,42,27,26,41,3,40,0,10,0,40,11,10,40,38,11,40,37,38,40,28,37,40,16,11,38,20,16,38,18,20,38,19,18,38,39,19,38,36,37,28,33,36,28,34,36,33,35,34,33,31,33,28,30,31,28,32,31,30,29,30,28,27,29,28,25,27,28,26,27,25,24,26,25,21,24,25,22,24,21,23,22,21,16,20,12,18,12,20,19,12,18,17,16,15,12,15,16,13,15,12,14,13,12,0,10,2,8,2,10,11,8,10,9,2,8,7,6,4,5,4,6,3,4,5,1,4,3,0,1,3,2,1,0],-0.000104501843452454,-0.000200450420379639,0.999895513057709,0.99979954957962,0.13671875,0.30078125,0.8828125,0.66015625,0,0,0,0,[0,0,0,0],[-0.6070398,-0.4634283,0.5929602,0.7365717],213.33332824707,256,256,256,256,129.501815795898,98.8647079467773,35.0267524719238,77.0513153076172]},{"id":27006,"path":"Assets/Content/Sprites/Ingredients/pizza dough.png","assetBundleId":-1,"data":["pizza dough",6,27004,[0.01406249,0.007031254,0,0.3234375,0.2179688,0],[0.3375,0.159375,0,0.78125,0.6328125,0.271875,-0.2109375,0,0.7265625,0.3242188,0.3375,-0.1828125,0,0.78125,0.3476563,0.1734375,0.225,0,0.6445313,0.6875,-0.0515625,0.225,0,0.4570313,0.6875,-0.1546875,-0.2109375,0,0.3710938,0.3242188,-0.2390625,0.1921875,0,0.3007813,0.6601563,-0.309375,0.075,0,0.2421875,0.5625,-0.309375,-0.1453125,0,0.2421875,0.3789063],[8,7,5,6,5,7,4,5,6,1,5,4,3,1,4,0,1,3,2,1,0],-0.000104501843452454,-0.000297337770462036,0.999895513057709,0.99970269203186,0.2421875,0.32421875,0.78125,0.6875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,62.0267524719238,83.0761184692383]},{"id":26832,"path":"Assets/Content/Sprites/Ingredients/pastry dought.png","assetBundleId":-1,"data":["pastry dought",6,26830,[-0.01875001,0,0,0.4828125,0.3046875,0],[-0.1171875,0.225,0,0.4023438,0.6875,-0.1171875,0.2203125,0,0.4023438,0.6835938,-0.1125,0.225,0,0.40625,0.6875,-0.1265625,0.2296875,0,0.3945313,0.6914063,-0.140625,0.2296875,0,0.3828125,0.6914063,-0.140625,0.2203125,0,0.3828125,0.6835938,-0.1125,0.225,0,0.40625,0.6875,-0.1125,0.253125,0,0.40625,0.7109375,-0.1125,0.225,0,0.40625,0.6875,-0.1171875,0.2578125,0,0.4023438,0.7148438,-0.1359375,0.2578125,0,0.3867188,0.7148438,-0.103125,0.2203125,0,0.4140625,0.6835938,-0.0796875,0.234375,0,0.4335938,0.6953125,-0.0890625,0.2203125,0,0.4257813,0.6835938,-0.0796875,0.2296875,0,0.4335938,0.6914063,0.253125,0.3046875,0,0.7109375,0.7539063,-0.140625,0.3046875,0,0.3828125,0.7539063,-0.15,0.2859375,0,0.375,0.7382813,0.4640625,-0.3046875,0,0.8867188,0.2460938,0.4640625,0.009375,0,0.8867188,0.5078125,-0.0796875,0.2203125,0,0.4335938,0.6835938,-0.0984375,0.215625,0,0.4179688,0.6796875,-0.384375,-0.3046875,0,0.1796875,0.2460938,-0.140625,0.2578125,0,0.3828125,0.7148438,-0.440625,0.215625,0,0.1328125,0.6796875,-0.5015625,0.1078125,0,0.08203122,0.5898438,-0.5015625,-0.2765625,0,0.08203122,0.2695313],[26,25,22,24,22,25,4,22,24,5,22,4,4,23,3,10,3,23,0,3,10,22,5,18,1,18,5,2,18,1,21,18,2,20,18,21,14,18,20,12,18,14,15,18,12,19,18,15,17,16,10,15,10,16,9,10,15,7,9,15,12,7,15,11,7,12,13,11,12,14,13,12,6,8,11,7,11,8,10,9,0,6,0,9,7,6,9,8,6,7,2,0,6,5,4,1,3,1,4,0,1,3,2,1,0],-0.000104524195194244,-0.00029735267162323,0.999895453453064,0.999702632427216,0.0820312201976776,0.24609375,0.88671875,0.75390625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,21.0267505645752,63.0761222839355]},{"id":27066,"path":"Assets/Content/Sprites/Ingredients/milk.png","assetBundleId":-1,"data":["milk",6,27064,[0.007031247,0.07734376,0,0.2929688,0.4476563,0],[0.3,0.1734375,0,0.75,0.6445313,0.2296875,-0.3703125,0,0.6914063,0.1914063,0.3,-0.3515625,0,0.75,0.2070313,0.15,0.525,0,0.625,0.9375,-0.1546875,0.525,0,0.3710938,0.9375,-0.2859375,0.3796875,0,0.2617188,0.8164063,-0.2859375,-0.3703125,0,0.2617188,0.1914063],[6,5,1,4,1,5,3,1,4,0,1,3,2,1,0],-0.000284135341644287,-0.00029735267162323,0.999715864658356,0.999702632427216,0.26171875,0.19140625,0.75,0.9375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,67.0727386474609,49.0761222839355]},{"id":27096,"path":"Assets/Content/Sprites/Ingredients/ricotta cheese.png","assetBundleId":-1,"data":["ricotta cheese",6,27094,[0.03281251,0.02109376,0,0.4265625,0.2929688,0],[0.440625,-0.0328125,0,0.8671875,0.4726563,0.459375,-0.20625,0,0.8828125,0.328125,0.459375,-0.0375,0,0.8828125,0.46875,0.440625,-0.271875,0,0.8671875,0.2734375,0.1125,0.3,0,0.59375,0.75,0.0421875,0.3140625,0,0.5351563,0.7617188,-0.2671875,0.3140625,0,0.2773438,0.7617188,-0.309375,-0.271875,0,0.2421875,0.2734375,-0.3328125,0.2671875,0,0.2226563,0.7226563,-0.39375,0.178125,0,0.171875,0.6484375,-0.39375,-0.2296875,0,0.171875,0.3085938],[10,9,7,8,7,9,6,7,8,3,7,6,5,3,6,4,3,5,0,3,4,1,3,0,2,1,0],-0.00029735267162323,-0.0000504255294799805,0.999702632427216,0.99994957447052,0.171875,0.2734375,0.8828125,0.76171875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,44.0761222839355,70.0129089355469]},{"id":27040,"path":"Assets/Content/Sprites/Ingredients/pie crust.png","assetBundleId":-1,"data":["pie crust",6,27038,[-0.004687503,-0.0609375,0,0.403125,0.215625,0],[0.3984375,0.0421875,0,0.8320313,0.5351563,0.3421875,-0.2578125,0,0.7851563,0.2851563,0.3984375,-0.1265625,0,0.8320313,0.3945313,0.2578125,-0.2765625,0,0.7148438,0.2695313,0.24375,0.1546875,0,0.703125,0.6289063,-0.2484375,-0.2765625,0,0.2929688,0.2695313,-0.3046875,0.1546875,0,0.2460938,0.6289063,-0.4078125,0.065625,0,0.1601563,0.5546875,-0.4078125,-0.1640625,0,0.1601563,0.3632813],[8,7,5,6,5,7,4,5,6,3,5,4,0,3,4,1,3,0,2,1,0],-0.00029735267162323,-0.000297337770462036,0.999702632427216,0.99970269203186,0.16015625,0.26953125,0.83203125,0.62890625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,41.0761222839355,69.0761184692383]},{"id":27150,"path":"Assets/Content/Sprites/Ingredients/breadcrumbs.png","assetBundleId":-1,"data":["breadcrumbs",6,27148,[-0.04218751,-0.002343759,0,0.5578125,0.4007813,0],[0.4828125,-0.3,0,0.9023438,0.25,0.515625,-0.346875,0,0.9296875,0.2109375,0.515625,-0.3,0,0.9296875,0.25,0.3796875,-0.403125,0,0.8164063,0.1640625,0.2203125,-0.403125,0,0.6835938,0.1640625,0.2109375,-0.3703125,0,0.6757813,0.1914063,0.2109375,-0.39375,0,0.6757813,0.171875,-0.0984375,-0.2859375,0,0.4179688,0.2617188,-0.0890625,-0.3046875,0,0.4257813,0.2460938,-0.0890625,-0.2953125,0,0.4257813,0.2539063,-0.0984375,-0.3140625,0,0.4179688,0.2382813,-0.1078125,-0.2859375,0,0.4101563,0.2617188,-0.1078125,-0.3140625,0,0.4101563,0.2382813,-0.1171875,-0.2953125,0,0.4023438,0.2539063,-0.1171875,-0.3046875,0,0.4023438,0.2460938,0.1125,-0.290625,0,0.59375,0.2578125,0.1125,-0.309375,0,0.59375,0.2421875,0.1125,-0.3,0,0.59375,0.25,0.1078125,-0.28125,0,0.5898438,0.265625,0.084375,-0.28125,0,0.5703125,0.265625,0.084375,-0.309375,0,0.5703125,0.2421875,0.1734375,-0.2859375,0,0.6445313,0.2617188,0.16875,-0.309375,0,0.640625,0.2421875,0.1734375,-0.2953125,0,0.6445313,0.2539063,0.159375,-0.2765625,0,0.6328125,0.2695313,0.121875,-0.2765625,0,0.6015625,0.2695313,0.121875,-0.309375,0,0.6015625,0.2421875,0.1125,-0.2859375,0,0.59375,0.2617188,-0.39375,-0.215625,0,0.171875,0.3203125,-0.3984375,-0.253125,0,0.1679688,0.2890625,-0.39375,-0.24375,0,0.171875,0.296875,-0.4078125,-0.2578125,0,0.1601563,0.2851563,-0.43125,-0.2578125,0,0.140625,0.2851563,-0.4359375,-0.2015625,0,0.1367188,0.3320313,-0.4546875,-0.2015625,0,0.1210938,0.3320313,-0.459375,-0.2109375,0,0.1171875,0.3242188,-0.459375,-0.2390625,0,0.1171875,0.3007813,-0.5109375,-0.1546875,0,0.07421875,0.3710938,-0.5203125,-0.1734375,0,0.06640628,0.3554688,-0.5109375,-0.1640625,0,0.07421875,0.3632813,-0.5296875,-0.1734375,0,0.05859375,0.3554688,-0.534375,-0.13125,0,0.0546875,0.390625,-0.5484375,-0.1359375,0,0.04296872,0.3867188,-0.5484375,-0.1546875,0,0.04296872,0.3710938,-0.5578125,-0.1078125,0,0.03515625,0.4101563,-0.54375,-0.1265625,0,0.04687503,0.3945313,-0.54375,-0.1125,0,0.04687503,0.40625,-0.5578125,-0.13125,0,0.03515625,0.390625,-0.5671875,-0.1171875,0,0.02734378,0.4023438,-0.5765625,0.0046875,0,0.01953125,0.5039063,-0.5625,-0.009375,0,0.03125,0.4921875,-0.5625,0,0,0.03125,0.5,-0.5953125,-0.0421875,0,0.00390622,0.4648438,-0.6,-0.009375,0,0,0.4921875,-0.6,-0.0421875,0,0,0.4648438,0.3421875,0.0609375,0,0.7851563,0.5507813,0.3703125,-0.1125,0,0.8085938,0.40625,0.3703125,0.05625,0,0.8085938,0.546875,0.3375,0.065625,0,0.78125,0.5546875,0.2765625,0.2390625,0,0.7304688,0.6992188,0.3140625,0.225,0,0.7617188,0.6875,0.2765625,0.215625,0,0.7304688,0.6796875,0.2625,0.20625,0,0.71875,0.671875,0.2578125,-0.196875,0,0.7148438,0.3359375,0.253125,0.2109375,0,0.7109375,0.6757813,0.225,0.2484375,0,0.6875,0.7070313,0.225,0.234375,0,0.6875,0.6953125,0.2109375,0.2296875,0,0.6757813,0.6914063,0.2015625,0.24375,0,0.6679688,0.703125,0.178125,0.3984375,0,0.6484375,0.8320313,0.196875,0.3984375,0,0.6640625,0.8320313,0.140625,0.24375,0,0.6171875,0.703125,0.13125,0.234375,0,0.609375,0.6953125,0.1125,0.234375,0,0.59375,0.6953125,0.1078125,0.2296875,0,0.5898438,0.6914063,0.1078125,0.2484375,0,0.5898438,0.7070313,0.1078125,0.215625,0,0.5898438,0.6796875,0.09375,0.2109375,0,0.578125,0.6757813,0.084375,0.225,0,0.5703125,0.6875,-0.028125,0.3,0,0.4765625,0.75,-0.0375,0.3,0,0.46875,0.75,-0.0421875,0.3,0,0.4648438,0.75,-0.09375,0.271875,0,0.421875,0.7265625,-0.09375,0.2671875,0,0.421875,0.7226563,-0.09375,0.2625,0,0.421875,0.71875,-0.1359375,0.290625,0,0.3867188,0.7421875,-0.103125,0.2765625,0,0.4140625,0.7304688,-0.1453125,0.2859375,0,0.3789063,0.7382813,-0.15,0.290625,0,0.375,0.7421875,-0.225,-0.196875,0,0.3125,0.3359375,-0.3703125,-0.159375,0,0.1914063,0.3671875,-0.3890625,0.0515625,0,0.1757813,0.5429688,-0.43125,0.09375,0,0.140625,0.578125,-0.45,0.0421875,0,0.125,0.5351563,-0.46875,0.0421875,0,0.109375,0.5351563,-0.4734375,0.065625,0,0.1054688,0.5546875,-0.4734375,0.0515625,0,0.1054688,0.5429688,0.3703125,0.09375,0,0.8085938,0.578125,0.3375,0.09375,0,0.78125,0.578125,0.3703125,0.0984375,0,0.8085938,0.5820313,0.43125,0.0796875,0,0.859375,0.5664063,0.4265625,0.05625,0,0.8554688,0.546875,0.43125,0.0609375,0,0.859375,0.5507813,0.4171875,0.09375,0,0.8476563,0.578125,0.3796875,0.05625,0,0.8164063,0.546875,0.2671875,0.2484375,0,0.7226563,0.7070313,0.253125,0.24375,0,0.7109375,0.703125,0.1359375,0.2578125,0,0.6132813,0.7148438,0.1171875,0.2578125,0,0.5976563,0.7148438,0.09375,0.234375,0,0.578125,0.6953125,0.2671875,0.3234375,0,0.7226563,0.7695313,0.2109375,0.253125,0,0.6757813,0.7109375,-0.1453125,0.290625,0,0.3789063,0.7421875,-0.13125,0.3140625,0,0.390625,0.7617188,-0.13125,0.290625,0,0.390625,0.7421875,-0.140625,0.3328125,0,0.3828125,0.7773438,-0.15,0.3328125,0,0.375,0.7773438,-0.159375,0.328125,0,0.3671875,0.7734375,-0.159375,0.3,0,0.3671875,0.75,-0.1359375,0.3328125,0,0.3867188,0.7773438,-0.13125,0.3234375,0,0.390625,0.7695313,-0.1265625,0.3984375,0,0.3945313,0.8320313,-0.1453125,0.3375,0,0.3789063,0.78125,-0.15,0.3515625,0,0.375,0.7929688,-0.1546875,0.3703125,0,0.3710938,0.8085938,-0.0375,0.3609375,0,0.46875,0.8007813,-0.0234375,0.3046875,0,0.4804688,0.7539063,-0.103125,0.3984375,0,0.4140625,0.8320313,-0.1171875,0.290625,0,0.4023438,0.7421875],[84,86,83,113,120,128,121,128,120,127,128,121,82,128,127,125,82,127,81,82,125,80,81,125,79,80,125,126,79,125,124,121,123,122,123,121,115,122,121,119,115,121,120,119,121,115,119,113,120,113,119,118,117,88,116,88,117,115,88,116,112,88,115,85,112,115,113,85,115,114,85,113,88,112,87,85,87,112,75,108,73,72,73,108,107,72,108,71,72,107,68,111,67,66,67,111,65,66,111,70,110,68,111,68,110,65,111,110,106,65,110,64,65,106,105,106,110,59,105,110,60,59,110,78,109,77,76,77,109,74,76,109,79,69,78,109,78,69,75,109,69,74,109,75,108,75,69,107,108,69,71,107,69,64,106,62,105,62,106,61,62,105,59,61,105,57,97,104,103,104,97,101,104,103,100,101,103,102,101,100,99,98,60,58,60,98,97,98,99,58,98,55,97,55,98,57,55,97,96,95,94,92,94,95,93,94,92,91,93,92,88,91,92,90,91,88,89,90,88,63,89,88,87,63,88,85,63,87,84,63,85,86,84,85,83,63,84,82,63,83,81,63,82,80,63,81,79,63,80,78,63,79,77,63,78,76,63,77,74,63,76,73,63,74,75,73,74,72,63,73,71,63,72,69,63,71,68,63,69,70,68,69,67,63,68,66,63,67,65,63,66,64,63,65,62,63,64,56,63,62,61,56,62,59,56,61,58,56,59,60,58,59,55,56,58,57,56,55,54,53,52,49,52,53,50,52,49,51,50,49,48,44,47,45,47,44,46,45,44,43,42,40,41,40,42,37,40,41,38,40,37,39,38,37,36,35,32,34,32,35,33,32,34,28,32,33,31,32,28,29,31,28,30,29,28,17,15,26,27,26,15,25,26,27,22,26,25,24,22,25,21,22,24,23,22,21,20,19,16,18,16,19,15,16,18,17,16,15,14,13,12,11,12,13,10,12,11,7,10,11,8,10,7,9,8,7,6,5,4,0,4,5,3,4,0,1,3,0,2,1,0],0,-0.00029735267162323,1,0.999702632427216,0,0.1640625,0.9296875,0.83203125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,0,42.0761222839355]},{"id":26660,"path":"Assets/Content/Sprites/Ingredients/fajita seasoning.png","assetBundleId":-1,"data":["fajita seasoning",6,26658,[0.009375006,-0.02578124,0,0.5390625,0.4617188,0],[-0.0375,-0.4546875,0,0.46875,0.1210938,-0.0421875,-0.4875,0,0.4648438,0.09375,-0.0375,-0.4734375,0,0.46875,0.1054688,-0.046875,-0.4546875,0,0.4609375,0.1210938,-0.1359375,-0.45,0,0.3867188,0.125,-0.1453125,-0.4875,0,0.3789063,0.09375,-0.1734375,-0.45,0,0.3554688,0.125,-0.1734375,-0.46875,0,0.3554688,0.109375,0.1828125,-0.440625,0,0.6523438,0.1328125,0.1828125,-0.4546875,0,0.6523438,0.1210938,0.1828125,-0.4453125,0,0.6523438,0.1289063,0.1640625,-0.478125,0,0.6367188,0.1015625,0.159375,-0.4828125,0,0.6328125,0.09765625,-0.009375,-0.440625,0,0.4921875,0.1328125,-0.0140625,-0.459375,0,0.4882813,0.1171875,-0.0140625,-0.4828125,0,0.4882813,0.09765625,0.2765625,0.1125,0,0.7304688,0.59375,0.2578125,0.1171875,0,0.7148438,0.5976563,0.2765625,0.103125,0,0.7304688,0.5859375,0.346875,0.4359375,0,0.7890625,0.8632813,0.328125,0.196875,0,0.7734375,0.6640625,0.346875,0.20625,0,0.7890625,0.671875,0.28125,0.215625,0,0.734375,0.6796875,0.2671875,0.253125,0,0.7226563,0.7109375,0.28125,0.2015625,0,0.734375,0.6679688,0.2625,0.2671875,0,0.71875,0.7226563,0.2484375,0.2671875,0,0.7070313,0.7226563,0.2390625,0.2578125,0,0.6992188,0.7148438,0.2390625,0.16875,0,0.6992188,0.640625,0.2390625,0.1828125,0,0.6992188,0.6523438,0.16875,0.2671875,0,0.640625,0.7226563,0.1546875,0.271875,0,0.6289063,0.7265625,-0.075,0.225,0,0.4375,0.6875,0.1453125,0.2625,0,0.6210938,0.71875,-0.09375,0.375,0,0.421875,0.8125,-0.103125,0.3796875,0,0.4140625,0.8164063,-0.1078125,0.384375,0,0.4101563,0.8203125,-0.1125,0.384375,0,0.40625,0.8203125,-0.1265625,0.403125,0,0.3945313,0.8359375,-0.15,0.4359375,0,0.375,0.8632813,0.290625,0.196875,0,0.7421875,0.6640625,0.2953125,0.1921875,0,0.7460938,0.6601563,0.31875,0.1125,0,0.765625,0.59375,0.309375,0.103125,0,0.7578125,0.5859375,0.309375,0.0984375,0,0.7578125,0.5820313,0.3234375,0.1875,0,0.7695313,0.65625,0.3234375,0.121875,0,0.7695313,0.6015625,0.3140625,0.196875,0,0.7617188,0.6640625,0.3046875,0.0890625,0,0.7539063,0.5742188,0.290625,0.178125,0,0.7421875,0.6484375,0.2859375,0.09375,0,0.7382813,0.578125,0.2578125,0.1640625,0,0.7148438,0.6367188,0.24375,0.1640625,0,0.703125,0.6367188,0.375,0.1125,0,0.8125,0.59375,0.3890625,0.084375,0,0.8242188,0.5703125,0.3890625,0.103125,0,0.8242188,0.5859375,0.328125,0.084375,0,0.7734375,0.5703125,0.31875,0.1125,0,0.765625,0.59375,0.309375,0.0890625,0,0.7578125,0.5742188,0.43125,0.0140625,0,0.859375,0.5117188,0.3984375,-0.253125,0,0.8320313,0.2890625,0.43125,-0.1640625,0,0.859375,0.3632813,0.28125,0.0890625,0,0.734375,0.5742188,0.16875,0.253125,0,0.640625,0.7109375,0.1546875,0.2484375,0,0.6289063,0.7070313,-0.121875,0.2109375,0,0.3984375,0.6757813,-0.13125,0.2015625,0,0.390625,0.6679688,-0.13125,0.1875,0,0.390625,0.65625,-0.215625,-0.253125,0,0.3203125,0.2890625,-0.1453125,0.3,0,0.3789063,0.75,-0.225,0.3328125,0,0.3125,0.7773438,-0.35625,0.0703125,0,0.203125,0.5585938,-0.35625,0.0609375,0,0.203125,0.5507813,-0.375,0.046875,0,0.1875,0.5390625,-0.3984375,0.0421875,0,0.1679688,0.5351563,-0.4125,0.0234375,0,0.15625,0.5195313,-0.4125,-0.16875,0,0.15625,0.359375,0.2671875,0.2015625,0,0.7226563,0.6679688,0.2578125,0.24375,0,0.7148438,0.703125,0.24375,0.24375,0,0.703125,0.703125,0.1921875,-0.4359375,0,0.6601563,0.1367188,0.20625,-0.4546875,0,0.671875,0.1210938,0.20625,-0.440625,0,0.671875,0.1328125,0.1921875,-0.459375,0,0.6601563,0.1171875,-0.3421875,-0.3984375,0,0.2148438,0.1679688,-0.346875,-0.4359375,0,0.2109375,0.1367188,-0.3375,-0.4171875,0,0.21875,0.1523438,-0.4125,-0.4359375,0,0.15625,0.1367188,-0.43125,-0.375,0,0.140625,0.1875,-0.4546875,-0.375,0,0.1210938,0.1875,-0.459375,-0.3796875,0,0.1171875,0.1835938,-0.459375,-0.3984375,0,0.1171875,0.1679688,-0.103125,-0.3609375,0,0.4140625,0.1992188,-0.1125,-0.3890625,0,0.40625,0.1757813,-0.0984375,-0.375,0,0.4179688,0.1875,-0.1171875,-0.3609375,0,0.4023438,0.1992188,-0.1171875,-0.3890625,0,0.4023438,0.1757813,-0.1265625,-0.3703125,0,0.3945313,0.1914063,-0.1265625,-0.3796875,0,0.3945313,0.1835938,-0.496875,-0.2765625,0,0.0859375,0.2695313,-0.459375,-0.31875,0,0.1171875,0.234375,-0.459375,-0.2953125,0,0.1171875,0.2539063,-0.496875,-0.31875,0,0.0859375,0.234375,-0.525,-0.2765625,0,0.06249997,0.2695313,-0.525,-0.309375,0,0.06249997,0.2421875,-0.5296875,-0.290625,0,0.05859375,0.2578125,0.5484375,0.0375,0,0.9570313,0.53125,0.54375,0.0234375,0,0.953125,0.5195313,0.5484375,0.0328125,0,0.9570313,0.5273438,0.5390625,0.0609375,0,0.9492188,0.5507813,0.5203125,0.0234375,0,0.9335938,0.5195313,0.459375,0.075,0,0.8828125,0.5625,0.4171875,0.0421875,0,0.8476563,0.5351563,0.4078125,0.075,0,0.8398438,0.5625,0.4078125,0.0609375,0,0.8398438,0.5507813,-0.375,0.084375,0,0.1875,0.5703125,-0.4078125,0.0421875,0,0.1601563,0.5351563,-0.4171875,0.084375,0,0.1523438,0.5703125,-0.440625,0.0421875,0,0.1328125,0.5351563,-0.4453125,0.0609375,0,0.1289063,0.5507813,-0.4453125,0.046875,0,0.1289063,0.5390625,-0.3703125,0.084375,0,0.1914063,0.5703125,-0.103125,0.2765625,0,0.4140625,0.7304688,-0.1125,0.2203125,0,0.40625,0.6835938,-0.0984375,0.2484375,0,0.4179688,0.7070313,-0.1171875,0.2953125,0,0.4023438,0.7460938,-0.121875,0.225,0,0.3984375,0.6875,-0.13125,0.290625,0,0.390625,0.7421875,-0.13125,0.2390625,0,0.390625,0.6992188,-0.1078125,0.3796875,0,0.4101563,0.8164063,-0.0984375,0.3328125,0,0.4179688,0.7773438,-0.1171875,0.309375,0,0.4023438,0.7578125,-0.0984375,0.309375,0,0.4179688,0.7578125,-0.121875,0.3421875,0,0.3984375,0.7851563,-0.1359375,0.328125,0,0.3867188,0.7734375,-0.1359375,0.31875,0,0.3867188,0.765625,-0.09375,0.365625,0,0.421875,0.8046875,-0.09375,0.3609375,0,0.421875,0.8007813,-0.09375,0.35625,0,0.421875,0.796875,-0.09375,0.2671875,0,0.421875,0.7226563,-0.09375,0.35625,0,0.421875,0.796875,-0.103125,0.346875,0,0.4140625,0.7890625,-0.1125,0.346875,0,0.40625,0.7890625,-0.121875,0.3890625,0,0.3984375,0.8242188,-0.1828125,0.3796875,0,0.3476563,0.8164063,-0.1546875,0.35625,0,0.3710938,0.796875,-0.1453125,0.31875,0,0.3789063,0.765625,-0.1453125,0.3328125,0,0.3789063,0.7773438,-0.1546875,0.309375,0,0.3710938,0.7578125,-0.1640625,0.309375,0,0.3632813,0.7578125,-0.1734375,0.35625,0,0.3554688,0.796875,-0.178125,0.346875,0,0.3515625,0.7890625,-0.178125,0.31875,0,0.3515625,0.765625],[152,151,149,150,149,151,145,149,150,148,149,145,146,148,145,147,146,145,138,140,137,144,39,142,38,142,39,143,142,38,37,142,143,129,142,37,141,142,129,35,141,129,140,141,35,136,140,35,137,140,136,132,140,139,138,139,140,32,139,138,137,32,138,136,32,137,34,32,136,28,29,52,77,52,29,51,52,77,49,51,77,24,49,77,40,49,24,135,134,131,133,131,134,130,131,133,132,131,130,37,36,129,35,129,36,69,127,67,66,67,127,128,66,127,126,128,127,125,126,127,123,126,125,122,123,125,124,123,122,33,31,64,63,64,31,30,63,31,27,26,79,78,79,26,25,78,26,23,78,25,74,115,73,121,73,115,72,73,121,71,72,121,115,70,121,71,121,70,120,119,118,117,118,119,116,118,117,115,116,117,74,116,115,114,113,112,111,112,113,110,112,111,109,110,111,107,110,109,106,107,109,108,107,106,105,103,104,102,104,103,99,102,103,100,102,99,101,100,99,98,97,96,95,96,97,93,96,95,92,93,95,94,93,92,91,90,87,89,87,90,88,87,89,84,87,88,85,87,84,86,85,84,10,80,83,81,83,80,82,81,80,27,79,29,77,29,79,78,77,79,23,77,78,24,77,23,76,75,68,74,68,75,73,68,74,72,68,73,71,68,72,70,68,71,69,68,70,67,68,69,60,68,67,66,60,67,65,60,66,32,60,65,33,60,32,64,60,33,63,60,64,30,60,63,17,60,30,28,17,30,52,17,28,62,60,17,18,62,17,59,60,62,61,60,59,18,16,50,58,44,56,42,56,44,57,56,42,53,56,57,54,56,53,55,54,53,52,51,17,16,17,51,49,16,51,50,16,49,48,50,49,40,48,49,41,48,40,47,48,41,43,48,47,44,48,43,42,43,47,45,42,47,46,42,45,44,43,42,24,22,40,41,40,22,39,19,38,37,38,19,36,37,19,35,36,19,34,35,19,32,34,19,31,32,19,33,32,31,30,31,19,27,30,19,28,30,27,29,28,27,26,27,19,25,26,19,23,25,19,22,23,19,24,23,22,20,22,19,21,20,19,18,17,16,15,14,12,13,12,14,8,12,13,11,12,8,9,11,8,10,9,8,7,6,5,4,5,6,1,5,4,3,1,4,0,1,3,2,1,0],-0.0000504404306411743,-0.000297345221042633,0.99994957447052,0.999702632427216,0.05859375,0.09375,0.95703125,0.86328125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,15.0129127502441,24.0761203765869]},{"id":27170,"path":"Assets/Content/Sprites/Ingredients/pepperoni.png","assetBundleId":-1,"data":["pepperoni",6,27168,[-0.01875,-0.03281251,0,0.421875,0.290625,0],[0.2859375,0.2578125,0,0.7382813,0.7148438,0.403125,-0.13125,0,0.8359375,0.390625,0.403125,0.1921875,0,0.8359375,0.6601563,0.0421875,0.2578125,0,0.5351563,0.7148438,0.0421875,-0.309375,0,0.5351563,0.2421875,-0.0375,-0.3234375,0,0.46875,0.2304688,-0.1921875,0.1078125,0,0.3398438,0.5898438,-0.24375,0.09375,0,0.296875,0.578125,-0.2625,0.0984375,0,0.28125,0.5820313,-0.2765625,0.1640625,0,0.2695313,0.6367188,-0.2390625,0.09375,0,0.3007813,0.578125,-0.253125,0.09375,0,0.2890625,0.578125,-0.3234375,-0.3234375,0,0.2304688,0.2304688,-0.3421875,0.0796875,0,0.2148438,0.5664063,-0.39375,-0.0234375,0,0.171875,0.4804688,-0.39375,-0.0375,0,0.171875,0.46875,-0.39375,-0.2484375,0,0.171875,0.2929688,-0.403125,-0.084375,0,0.1640625,0.4296875,-0.421875,-0.0234375,0,0.1484375,0.4804688,-0.4265625,-0.103125,0,0.1445313,0.4140625,-0.4359375,-0.028125,0,0.1367188,0.4765625,-0.4359375,-0.103125,0,0.1367188,0.4140625,-0.440625,-0.065625,0,0.1328125,0.4453125,-0.440625,-0.0984375,0,0.1328125,0.4179688,-0.4265625,-0.140625,0,0.1445313,0.3828125,-0.421875,-0.1828125,0,0.1484375,0.3476563,-0.4078125,-0.1734375,0,0.1601563,0.3554688,-0.440625,-0.1453125,0,0.1328125,0.3789063,-0.440625,-0.159375,0,0.1328125,0.3671875],[28,27,25,24,25,27,26,25,24,23,22,21,20,21,22,19,21,20,18,19,20,17,19,18,14,17,18,15,17,14,16,15,12,14,12,15,13,12,14,11,12,13,5,12,11,7,5,11,10,5,7,6,5,10,9,3,8,7,8,3,6,7,3,5,6,3,4,5,3,1,4,3,0,1,3,2,1,0],-0.000167608261108398,-0.000200450420379639,0.999832391738892,0.99979954957962,0.1328125,0.23046875,0.8359375,0.71484375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,34.0429077148438,59.0513153076172]},{"id":27178,"path":"Assets/Content/Sprites/Ingredients/lasagna noodle.png","assetBundleId":-1,"data":["lasagna noodle",6,27176,[0,-0.002343751,0,0.4078125,0.2414063,0],[0.3984375,0.1453125,0,0.8320313,0.6210938,0.4078125,-0.0140625,0,0.8398438,0.4882813,0.4078125,0.1171875,0,0.8398438,0.5976563,0.375,-0.2015625,0,0.8125,0.3320313,0.196875,0.2390625,0,0.6640625,0.6992188,-0.0046875,-0.24375,0,0.4960938,0.296875,-0.215625,0.2390625,0,0.3203125,0.6992188,-0.4078125,0.103125,0,0.1601563,0.5859375,-0.4078125,-0.24375,0,0.1601563,0.296875],[8,7,5,6,5,7,4,5,6,3,5,4,0,3,4,1,3,0,2,1,0],-0.0000504404306411743,-0.000297337770462036,0.99994957447052,0.99970269203186,0.16015625,0.296875,0.83984375,0.69921875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,41.0129127502441,76.0761184692383]},{"id":27360,"path":"Assets/Content/Sprites/Ingredients/phyllo dough.png","assetBundleId":-1,"data":["phyllo dough",6,27358,[-0.0421875,0.046875,0,0.4359375,0.3328125,0],[0.35625,0.2859375,0,0.796875,0.7382813,0.39375,-0.0890625,0,0.828125,0.4257813,0.39375,0.2109375,0,0.828125,0.6757813,0.1875,-0.2859375,0,0.65625,0.2617188,0.1828125,0.2859375,0,0.6523438,0.7382813,0.0984375,0.2859375,0,0.5820313,0.7382813,-0.478125,0.2859375,0,0.1015625,0.7382813,-0.478125,-0.2859375,0,0.1015625,0.2617188,0.1921875,0.31875,0,0.6601563,0.765625,0.196875,0.3046875,0,0.6640625,0.7539063,0.1265625,0.3515625,0,0.6054688,0.7929688,0.084375,0.3515625,0,0.5703125,0.7929688,0.084375,0.3140625,0,0.5703125,0.7617188,0.0234375,0.3796875,0,0.5195313,0.8164063,0.01875,0.31875,0,0.515625,0.765625,0.0234375,0.3234375,0,0.5195313,0.7695313,-0.065625,0.309375,0,0.4453125,0.7578125,-0.159375,0.3375,0,0.3671875,0.78125,-0.16875,0.3421875,0,0.359375,0.7851563,-0.1921875,0.3421875,0,0.3398438,0.7851563,-0.234375,0.309375,0,0.3046875,0.7578125,-0.196875,0.3328125,0,0.3359375,0.7773438,-0.271875,0.3328125,0,0.2734375,0.7773438,-0.2765625,0.3796875,0,0.2695313,0.8164063,-0.2765625,0.346875,0,0.2695313,0.7890625,-0.159375,0.3234375,0,0.3671875,0.7695313,-0.1734375,0.31875,0,0.3554688,0.765625,-0.1921875,0.31875,0,0.3398438,0.765625],[21,19,27,26,27,19,18,26,19,25,26,18,17,25,18,21,27,20,16,20,27,26,16,27,25,16,26,17,16,25,24,23,22,13,22,23,19,22,13,20,22,19,21,20,19,18,19,13,17,18,13,16,17,13,14,16,13,15,14,13,12,11,5,10,5,11,4,5,10,8,4,10,9,4,8,7,6,3,5,3,6,4,3,5,0,3,4,1,3,0,2,1,0],-0.000297345221042633,-0.000297337770462036,0.999702632427216,0.99970269203186,0.1015625,0.26171875,0.828125,0.81640625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,26.0761203765869,67.0761184692383]},{"id":27336,"path":"Assets/Content/Sprites/Ingredients/berrie.png","assetBundleId":-1,"data":["berrie",6,27334,[0.06093749,-0.002343744,0,0.4546875,0.3914063,0],[0.45,0.0421875,0,0.875,0.5351563,0.3984375,-0.3421875,0,0.8320313,0.2148438,0.45,-0.2390625,0,0.875,0.3007813,0.3,0.3328125,0,0.75,0.7773438,0.2484375,-0.39375,0,0.7070313,0.171875,0.084375,-0.39375,0,0.5703125,0.171875,0.0421875,-0.1875,0,0.5351563,0.34375,-0.0140625,0.3890625,0,0.4882813,0.8242188,0.0140625,-0.2484375,0,0.5117188,0.2929688,-0.0375,-0.3609375,0,0.46875,0.1992188,-0.39375,0.3890625,0,0.171875,0.8242188,-0.39375,-0.2296875,0,0.171875,0.3085938,0.5015625,-0.084375,0,0.9179688,0.4296875,0.515625,-0.140625,0,0.9296875,0.3828125,0.515625,-0.121875,0,0.9296875,0.3984375,0.4921875,-0.140625,0,0.9101563,0.3828125,0.4875,-0.075,0,0.90625,0.4375,0.478125,-0.13125,0,0.8984375,0.390625,0.4734375,-0.0796875,0,0.8945313,0.4335938,0.4734375,-0.1078125,0,0.8945313,0.4101563],[19,18,17,16,17,18,15,17,16,12,15,16,13,15,12,14,13,12,11,10,9,7,9,10,8,9,7,6,8,7,3,6,7,5,6,3,4,5,3,1,4,3,0,1,3,2,1,0],-0.00029735267162323,-0.000104501843452454,0.999702632427216,0.999895513057709,0.171875,0.171875,0.9296875,0.82421875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,44.0761222839355,44.0267524719238]},{"id":27166,"path":"Assets/Content/Sprites/Ingredients/brie cheese.png","assetBundleId":-1,"data":["brie cheese",6,27164,[0.04218751,-0.03984375,0,0.4171875,0.2601563,0],[0.43125,0.2203125,0,0.859375,0.6835938,0.459375,-0.2953125,0,0.8828125,0.2539063,0.459375,0.1078125,0,0.8828125,0.5898438,0.4125,-0.3,0,0.84375,0.25,-0.1265625,-0.3,0,0.3945313,0.25,-0.20625,-0.2859375,0,0.328125,0.2617188,-0.375,0.2203125,0,0.1875,0.6835938,-0.375,-0.2390625,0,0.1875,0.3007813],[7,6,5,0,5,6,4,5,0,3,4,0,1,3,0,2,1,0],-0.00029735267162323,-0.000297337770462036,0.999702632427216,0.99970269203186,0.1875,0.25,0.8828125,0.68359375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,48.0761222839355,64.0761184692383]},{"id":27364,"path":"Assets/Content/Sprites/Ingredients/ground beef.png","assetBundleId":-1,"data":["ground beef",6,27362,[0.007031262,0.007031247,0,0.3726563,0.3117188,0],[0.3796875,0.3,0,0.8164063,0.75,0.3234375,-0.3046875,0,0.7695313,0.2460938,0.3796875,-0.2203125,0,0.8164063,0.3164063,0.3140625,0.31875,0,0.7617188,0.765625,-0.31875,-0.3046875,0,0.234375,0.2460938,-0.365625,0.31875,0,0.1953125,0.765625,-0.365625,-0.290625,0,0.1953125,0.2578125],[6,5,4,3,4,5,1,4,3,0,1,3,2,1,0],-0.000104501843452454,-0.000104501843452454,0.999895513057709,0.999895513057709,0.1953125,0.24609375,0.81640625,0.765625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,50.0267524719238,63.0267524719238]},{"id":27396,"path":"Assets/Content/Sprites/Ingredients/coriander seed.png","assetBundleId":-1,"data":["coriander seed",6,27394,[0,-0.0515625,0,0.6,0.5484375,0],[-0.365625,-0.515625,0,0.1953125,0.0703125,-0.3609375,-0.553125,0,0.1992188,0.0390625,-0.3609375,-0.525,0,0.1992188,0.06249997,-0.4078125,-0.6,0,0.1601563,0,-0.5015625,-0.6,0,0.08203122,0,-0.571875,-0.4640625,0,0.02343747,0.1132813,-0.6,-0.459375,0,0,0.1171875,-0.6,-0.58125,0,0,0.015625,0.4359375,-0.4921875,0,0.8632813,0.08984375,0.3515625,-0.6,0,0.7929688,0,0.4359375,-0.525,0,0.8632813,0.06249997,0.1359375,-0.4921875,0,0.6132813,0.08984375,-0.103125,-0.534375,0,0.4140625,0.0546875,-0.103125,-0.6,0,0.4140625,0,-0.1171875,-0.43125,0,0.4023438,0.140625,-0.1125,-0.45,0,0.40625,0.125,-0.1125,-0.4359375,0,0.40625,0.1367188,-0.1640625,-0.4828125,0,0.3632813,0.09765625,-0.20625,-0.4828125,0,0.328125,0.09765625,-0.2203125,-0.43125,0,0.3164063,0.140625,-0.225,-0.440625,0,0.3125,0.1328125,-0.225,-0.4640625,0,0.3125,0.1132813,-0.2484375,0.3140625,0,0.2929688,0.7617188,-0.4171875,0.065625,0,0.1523438,0.5546875,-0.403125,0.065625,0,0.1640625,0.5546875,-0.4265625,0.075,0,0.1445313,0.5625,-0.4359375,0.0890625,0,0.1367188,0.5742188,-0.4125,0.05625,0,0.15625,0.546875,-0.3703125,-0.178125,0,0.1914063,0.3515625,-0.178125,-0.1921875,0,0.3515625,0.3398438,-0.478125,-0.028125,0,0.1015625,0.4765625,-0.478125,-0.0890625,0,0.1015625,0.4257813,-0.4359375,0.0796875,0,0.1367188,0.5664063,-0.571875,-0.103125,0,0.02343747,0.4140625,-0.58125,0.0796875,0,0.015625,0.5664063,-0.6,0.0703125,0,0,0.5585938,-0.6,-0.075,0,0,0.4375,-0.0140625,-0.253125,0,0.4882813,0.2890625,-0.0046875,-0.271875,0,0.4960938,0.2734375,-0.0046875,-0.2625,0,0.4960938,0.28125,-0.0140625,-0.28125,0,0.4882813,0.265625,-0.1078125,-0.253125,0,0.4101563,0.2890625,-0.1078125,-0.28125,0,0.4101563,0.265625,-0.1171875,-0.2625,0,0.4023438,0.28125,-0.1171875,-0.271875,0,0.4023438,0.2734375,0.3140625,0.365625,0,0.7617188,0.8046875,0.3328125,0.2109375,0,0.7773438,0.6757813,0.346875,0.271875,0,0.7890625,0.7265625,0.3140625,0.2203125,0,0.7617188,0.6835938,0.290625,0.215625,0,0.7421875,0.6796875,0.2765625,0.2203125,0,0.7304688,0.6835938,0.2625,0.2859375,0,0.71875,0.7382813,0.2484375,0.3,0,0.7070313,0.75,0.24375,0.3,0,0.703125,0.75,0.2390625,0.46875,0,0.6992188,0.890625,0.234375,0.290625,0,0.6953125,0.7421875,0.2296875,0.1921875,0,0.6914063,0.6601563,0.234375,0.28125,0,0.6953125,0.734375,0.178125,0.4546875,0,0.6484375,0.8789063,0.58125,0.046875,0,0.984375,0.5390625,0.440625,-0.1078125,0,0.8671875,0.4101563,0.50625,-0.05625,0,0.921875,0.453125,0.290625,0.2015625,0,0.7421875,0.6679688,0.253125,-0.1828125,0,0.7109375,0.3476563,0.2484375,0.178125,0,0.7070313,0.6484375,0.234375,0.178125,0,0.6953125,0.6484375,0.1453125,0.290625,0,0.6210938,0.7421875,0.1453125,0.2859375,0,0.6210938,0.7382813,0.1453125,-0.2203125,0,0.6210938,0.3164063,0.1359375,0.2765625,0,0.6132813,0.7304688,0.1265625,0.2765625,0,0.6054688,0.7304688,0.1171875,0.2859375,0,0.5976563,0.7382813,-0.121875,0.4546875,0,0.3984375,0.8789063,-0.15,0.4453125,0,0.375,0.8710938,-0.1546875,0.45,0,0.3710938,0.875,-0.1640625,0.2953125,0,0.3632813,0.7460938,-0.1734375,0.225,0,0.3554688,0.6875,-0.2109375,0.234375,0,0.3242188,0.6953125,-0.2109375,0.2015625,0,0.3242188,0.6679688,-0.215625,0.1828125,0,0.3203125,0.6523438,-0.2390625,0.3375,0,0.3007813,0.78125,-0.225,0.3375,0,0.3125,0.78125,-0.2484375,0.328125,0,0.2929688,0.7734375,0.6,-0.0796875,0,1,0.4335938,0.6,0.0328125,0,1,0.5273438,0.39375,-0.15,0,0.828125,0.375,0.309375,-0.2765625,0,0.7578125,0.2695313,0.3234375,-0.1640625,0,0.7695313,0.3632813,0.24375,-0.1921875,0,0.703125,0.3398438,0.1265625,-0.24375,0,0.6054688,0.296875,0.121875,-0.2578125,0,0.6015625,0.2851563,0.121875,-0.253125,0,0.6015625,0.2890625,0.2625,0.28125,0,0.71875,0.734375,0.253125,0.271875,0,0.7109375,0.7265625,0.24375,0.271875,0,0.703125,0.7265625,0.103125,-0.2765625,0,0.5859375,0.2695313,0.1171875,-0.28125,0,0.5976563,0.265625,0.121875,-0.2765625,0,0.6015625,0.2695313,0.05625,-0.2578125,0,0.546875,0.2851563,0.0609375,-0.2484375,0,0.5507813,0.2929688,0.05625,-0.28125,0,0.546875,0.265625,0.13125,0.3046875,0,0.609375,0.7539063,0.1265625,0.3046875,0,0.6054688,0.7539063,0.1171875,0.2953125,0,0.5976563,0.7460938,-0.20625,0.3375,0,0.328125,0.78125,-0.1828125,0.253125,0,0.3476563,0.7109375,-0.1828125,0.328125,0,0.3476563,0.7734375,-0.20625,0.24375,0,0.328125,0.703125,-0.215625,0.31875,0,0.3203125,0.765625,-0.215625,0.3140625,0,0.3203125,0.7617188,-0.215625,0.309375,0,0.3203125,0.7578125,-0.215625,0.2625,0,0.3203125,0.71875,-0.215625,0.2203125,0,0.3203125,0.6835938,-0.1359375,-0.28125,0,0.3867188,0.265625,-0.1359375,-0.2390625,0,0.3867188,0.3007813,-0.3046875,-0.28125,0,0.2460938,0.265625,-0.459375,-0.234375,0,0.1171875,0.3046875,-0.1546875,0.478125,0,0.3710938,0.8984375,-0.16875,0.43125,0,0.359375,0.859375,-0.178125,0.4359375,0,0.3515625,0.8632813,-0.1875,0.496875,0,0.34375,0.9140625,-0.2015625,0.45,0,0.3320313,0.875,-0.2390625,0.4078125,0,0.3007813,0.8398438,-0.2390625,0.496875,0,0.3007813,0.9140625,-0.2390625,0.4078125,0,0.3007813,0.8398438,-0.2390625,0.4078125,0,0.3007813,0.8398438,-0.253125,0.4125,0,0.2890625,0.84375,-0.2625,0.4734375,0,0.28125,0.8945313,0.1171875,-0.2484375,0,0.5976563,0.2929688,-0.16875,0.421875,0,0.359375,0.8515625,-0.16875,0.4125,0,0.359375,0.84375,-0.16875,0.3984375,0,0.359375,0.8320313,-0.16875,0.3984375,0,0.359375,0.8320313,-0.1734375,0.346875,0,0.3554688,0.7890625,-0.1921875,0.3890625,0,0.3398438,0.8242188,-0.234375,0.35625,0,0.3046875,0.796875,-0.234375,0.384375,0,0.3046875,0.8203125,-0.24375,0.3515625,0,0.296875,0.7929688,-0.2578125,0.3515625,0,0.2851563,0.7929688,-0.2625,0.4078125,0,0.28125,0.8398438,-0.2671875,0.403125,0,0.2773438,0.8359375,-0.2671875,0.365625,0,0.2773438,0.8046875,-0.1828125,0.384375,0,0.3476563,0.8203125,-0.178125,0.3515625,0,0.3515625,0.7929688,-0.178125,0.3796875,0,0.3515625,0.8164063,-0.2109375,0.3515625,0,0.3242188,0.7929688,-0.215625,0.384375,0,0.3203125,0.8203125,-0.215625,0.35625,0,0.3203125,0.796875],[147,146,145,142,145,146,143,145,142,144,143,142,141,140,138,139,138,140,125,138,139,137,138,125,135,137,125,122,135,125,136,135,122,125,124,122,131,132,130,122,121,134,129,134,121,132,134,129,130,132,129,133,132,75,131,75,132,130,75,131,129,75,130,118,75,129,99,128,95,91,95,128,127,123,126,125,126,123,124,125,123,122,124,123,120,122,123,121,122,120,119,121,120,117,119,120,118,119,117,75,118,117,74,75,117,33,31,116,28,116,31,115,116,28,29,115,28,113,115,29,114,113,29,78,112,77,81,109,79,112,79,109,111,112,109,110,111,109,111,110,107,109,107,110,108,107,109,104,107,108,105,107,104,106,105,104,71,103,70,102,70,103,69,70,102,101,69,102,66,69,101,67,69,66,58,103,72,71,72,103,102,103,58,101,102,58,66,101,58,95,91,97,90,97,91,98,95,100,96,100,95,99,95,98,97,96,95,56,50,65,64,65,50,62,64,50,49,62,50,57,55,94,53,94,55,93,94,53,52,93,53,51,93,52,92,93,51,56,57,50,94,50,57,93,50,94,92,50,93,51,50,92,91,89,90,86,90,89,88,86,89,87,86,88,85,86,87,83,86,85,61,83,85,59,83,61,84,83,59,27,24,29,22,29,24,82,29,22,80,29,82,79,29,80,81,79,80,78,29,79,77,29,78,76,29,77,68,29,76,75,68,76,74,68,75,73,68,74,72,68,73,71,68,72,70,68,71,69,68,70,67,68,69,63,68,67,66,63,67,58,63,66,56,63,58,65,63,56,64,63,65,62,63,64,60,63,62,49,60,62,48,60,49,59,60,48,61,60,59,58,54,56,55,56,54,57,56,55,53,55,54,45,53,54,52,53,45,51,52,45,50,51,45,49,50,45,48,49,45,46,48,45,47,46,45,44,43,42,41,42,43,40,42,41,37,40,41,38,40,37,39,38,37,36,35,33,34,33,35,32,33,34,30,33,32,31,33,30,27,30,32,31,30,28,27,28,30,29,28,27,26,22,25,23,25,22,24,23,22,21,20,18,19,18,20,14,18,19,17,18,14,15,17,14,16,15,14,13,12,9,11,9,12,8,9,11,10,9,8,7,6,4,5,4,6,0,4,5,3,4,0,1,3,0,2,1,0],0,0,1,1,0,0,1,0.9140625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,0,0]},{"id":27410,"path":"Assets/Content/Sprites/Ingredients/ziti noodle.png","assetBundleId":-1,"data":["ziti noodle",6,27408,[0.01171876,0.009375006,0,0.3773438,0.253125,0],[0.3140625,0.2625,0,0.7617188,0.71875,0.3890625,-0.084375,0,0.8242188,0.4296875,0.3890625,0.178125,0,0.8242188,0.6484375,0.2484375,-0.24375,0,0.7070313,0.296875,-0.1125,0.2625,0,0.40625,0.71875,-0.1875,-0.24375,0,0.34375,0.296875,-0.365625,0.1734375,0,0.1953125,0.6445313,-0.365625,-0.13125,0,0.1953125,0.390625],[7,6,5,4,5,6,3,5,4,0,3,4,1,3,0,2,1,0],-0.000104501843452454,-0.000297337770462036,0.999895513057709,0.99970269203186,0.1953125,0.296875,0.82421875,0.71875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,50.0267524719238,76.0761184692383]},{"id":27454,"path":"Assets/Content/Sprites/Ingredients/raspberry jam.png","assetBundleId":-1,"data":["raspberry jam",6,27452,[-0.01640625,0.007031262,0,0.4101563,0.4054688,0],[0.39375,0.1921875,0,0.828125,0.6601563,0.35625,-0.1640625,0,0.796875,0.3632813,0.39375,-0.0046875,0,0.828125,0.4960938,0.2671875,-0.3796875,0,0.7226563,0.1835938,0.24375,0.4125,0,0.703125,0.84375,0.1640625,-0.3984375,0,0.6367188,0.1679688,-0.2203125,-0.3984375,0,0.3164063,0.1679688,-0.28125,0.4125,0,0.265625,0.84375,-0.4265625,0.1875,0,0.1445313,0.65625,-0.4265625,-0.2203125,0,0.1445313,0.3164063],[9,8,6,7,6,8,4,6,7,5,6,4,3,5,4,0,3,4,1,3,0,2,1,0],-0.0000233203172683716,-0.00029735267162323,0.999976694583893,0.999702632427216,0.14453125,0.16796875,0.828125,0.84375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,37.0059700012207,43.0761222839355]},{"id":27416,"path":"Assets/Content/Sprites/Ingredients/permasan.png","assetBundleId":-1,"data":["permasan",6,27414,[0.01406251,-0.004687496,0,0.4828125,0.253125,0],[0.4875,-0.13125,0,0.90625,0.390625,0.496875,-0.1828125,0,0.9140625,0.3476563,0.496875,-0.1453125,0,0.9140625,0.3789063,0.478125,-0.2203125,0,0.8984375,0.3164063,0.346875,-0.2578125,0,0.7890625,0.2851563,0.3140625,0.1875,0,0.7617188,0.65625,-0.196875,0.2484375,0,0.3359375,0.7070313,-0.2859375,-0.2578125,0,0.2617188,0.2851563,-0.459375,-0.065625,0,0.1171875,0.4453125,-0.46875,0.2484375,0,0.109375,0.7070313,-0.46875,0.009375,0,0.109375,0.5078125],[10,9,8,6,8,9,7,8,6,4,7,6,5,4,6,0,4,5,3,4,0,1,3,0,2,1,0],-0.000297345221042633,-0.000200450420379639,0.999702632427216,0.99979954957962,0.109375,0.28515625,0.9140625,0.70703125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,28.0761203765869,73.0513153076172]},{"id":27662,"path":"Assets/Content/Sprites/Ingredients/tortillas.png","assetBundleId":-1,"data":["tortillas",6,27660,[0.02109374,0.0140625,0,0.4101563,0.234375,0],[0.009375,0.24375,0,0.5078125,0.703125,-0.1734375,0.2484375,0,0.3554688,0.7070313,0.009375,0.2296875,0,0.5078125,0.6914063,0.01875,0.2484375,0,0.515625,0.7070313,0.1453125,0.2484375,0,0.6210938,0.7070313,0.075,0.2484375,0,0.5625,0.7070313,0.0796875,0.234375,0,0.5664063,0.6953125,0.43125,0.0796875,0,0.859375,0.5664063,0.421875,-0.2109375,0,0.8515625,0.3242188,0.43125,-0.178125,0,0.859375,0.3515625,0.346875,-0.2203125,0,0.7890625,0.3164063,0.0703125,0.225,0,0.5585938,0.6875,0.0421875,0.215625,0,0.5351563,0.6796875,0.0140625,0.215625,0,0.5117188,0.6796875,-0.2859375,-0.2203125,0,0.2617188,0.3164063,-0.346875,0.20625,0,0.2109375,0.671875,-0.3890625,0.1078125,0,0.1757813,0.5898438,-0.3890625,-0.121875,0,0.1757813,0.3984375],[2,0,13,3,13,0,12,13,3,5,12,3,11,12,5,6,11,5,17,16,14,15,14,16,1,14,15,10,14,1,13,10,1,2,13,1,12,10,13,11,10,12,6,10,11,4,10,6,7,10,4,8,10,7,9,8,7,6,5,4,3,0,1,2,1,0],-0.00029735267162323,-0.000297337770462036,0.999702632427216,0.99970269203186,0.17578125,0.31640625,0.859375,0.70703125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,45.0761222839355,81.0761184692383]},{"id":27612,"path":"Assets/Content/Sprites/Ingredients/sour cream.png","assetBundleId":-1,"data":["sour cream",6,27610,[0.028125,0.09375001,0,0.4125,0.4078125,0],[-0.253125,-0.2578125,0,0.2890625,0.2851563,-0.2671875,-0.2625,0,0.2773438,0.28125,-0.253125,-0.2578125,0,0.2890625,0.2851563,-0.28125,-0.2390625,0,0.265625,0.3007813,-0.28125,-0.2390625,0,0.265625,0.3007813,-0.2625,-0.2203125,0,0.28125,0.3164063,-0.253125,-0.2296875,0,0.2890625,0.3085938,-0.2671875,-0.2203125,0,0.2773438,0.3164063,-0.28125,-0.234375,0,0.265625,0.3046875,-0.159375,-0.3140625,0,0.3671875,0.2382813,0.140625,0.3609375,0,0.6171875,0.8007813,0.1359375,0.3609375,0,0.6132813,0.8007813,0.1359375,0.3609375,0,0.6132813,0.8007813,0.140625,0.3890625,0,0.6171875,0.8242188,0.15,0.365625,0,0.625,0.8046875,0.15,0.3796875,0,0.625,0.8164063,0.13125,0.3890625,0,0.609375,0.8242188,0.121875,0.3796875,0,0.6015625,0.8164063,0.121875,0.375,0,0.6015625,0.8125,0.440625,0.1875,0,0.8671875,0.65625,0.3984375,-0.1078125,0,0.8320313,0.4101563,0.440625,0.046875,0,0.8671875,0.5390625,0.31875,-0.290625,0,0.765625,0.2578125,0.2671875,0.3421875,0,0.7226563,0.7851563,0.2296875,-0.3140625,0,0.6914063,0.2382813,0.084375,0.3703125,0,0.5703125,0.8085938,-0.15,0.3703125,0,0.375,0.8085938,-0.3328125,-0.20625,0,0.2226563,0.328125,-0.384375,0.2109375,0,0.1796875,0.6757813,-0.384375,-0.0046875,0,0.1796875,0.4960938,0.01875,0.5015625,0,0.515625,0.9179688,0.0234375,0.4546875,0,0.5195313,0.8789063,0.0234375,0.496875,0,0.5195313,0.9140625,-0.01875,0.5015625,0,0.484375,0.9179688,-0.046875,0.403125,0,0.4609375,0.8359375,-0.075,0.440625,0,0.4375,0.8671875,-0.075,0.403125,0,0.4375,0.8359375],[36,35,34,33,34,35,31,34,33,30,31,33,32,31,30,29,28,27,26,27,28,8,27,26,3,27,8,7,8,26,5,7,26,6,5,26,9,6,26,24,9,26,25,24,26,11,24,25,12,24,11,10,24,12,23,24,10,22,24,23,19,22,23,20,22,19,21,20,19,18,17,11,16,11,17,13,11,16,10,11,13,14,10,13,15,14,13,12,11,10,0,6,9,3,8,0,7,0,8,5,0,7,6,0,5,4,3,1,0,1,3,2,1,0],-0.000104501843452454,-0.00029735267162323,0.999895513057709,0.999702632427216,0.1796875,0.23828125,0.8671875,0.91796875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,46.0267524719238,61.0761222839355]},{"id":27574,"path":"Assets/Content/Sprites/Ingredients/béchamel sauce.png","assetBundleId":-1,"data":["béchamel sauce",6,27572,[-0.07499999,-0.103125,0,0.4640625,0.384375,0],[0.0234375,-0.4546875,0,0.5195313,0.1210938,0.0328125,-0.478125,0,0.5273438,0.1015625,0.0328125,-0.4640625,0,0.5273438,0.1132813,0.0234375,-0.4875,0,0.5195313,0.09375,0.0140625,-0.4546875,0,0.5117188,0.1210938,0.0140625,-0.4875,0,0.5117188,0.09375,0.0046875,-0.4640625,0,0.5039063,0.1132813,0.0046875,-0.478125,0,0.5039063,0.1015625,0.3890625,0.1359375,0,0.8242188,0.6132813,0.24375,-0.3375,0,0.703125,0.21875,0.3890625,-0.0796875,0,0.8242188,0.4335938,0.1875,0.28125,0,0.65625,0.734375,-0.2625,-0.3375,0,0.28125,0.21875,-0.3890625,0.28125,0,0.1757813,0.734375,-0.39375,0.2625,0,0.171875,0.71875,-0.39375,-0.1546875,0,0.171875,0.3710938,-0.496875,-0.2296875,0,0.0859375,0.3085938,-0.5109375,-0.2671875,0,0.07421875,0.2773438,-0.496875,-0.2578125,0,0.0859375,0.2851563,-0.5296875,-0.2671875,0,0.05859375,0.2773438,-0.534375,-0.2296875,0,0.0546875,0.3085938,-0.5390625,-0.2390625,0,0.05078125,0.3007813,-0.5390625,-0.2625,0,0.05078125,0.28125],[22,21,19,20,19,21,16,19,20,17,19,16,18,17,16,15,14,12,13,12,14,11,12,13,9,12,11,8,9,11,10,9,8,7,6,5,4,5,6,3,5,4,0,3,4,1,3,0,2,1,0],-0.000297345221042633,-0.000297345221042633,0.999702632427216,0.999702632427216,0.05078125,0.09375,0.82421875,0.734375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,13.0761203765869,24.0761203765869]},{"id":27700,"path":"Assets/Content/Sprites/Ingredients/mustard.png","assetBundleId":-1,"data":["mustard",6,27698,[0,0.01406251,0,0.3234375,0.4828125,0],[-0.271875,-0.4265625,0,0.2734375,0.1445313,-0.253125,-0.4546875,0,0.2890625,0.1210938,-0.253125,-0.4453125,0,0.2890625,0.1289063,-0.271875,-0.46875,0,0.2734375,0.109375,-0.2859375,-0.46875,0,0.2617188,0.109375,-0.2953125,-0.4265625,0,0.2539063,0.1445313,-0.2953125,-0.45,0,0.2539063,0.125,0.290625,-0.4359375,0,0.7421875,0.1367188,0.271875,-0.46875,0,0.7265625,0.109375,0.290625,-0.459375,0,0.7421875,0.1171875,0.2484375,-0.46875,0,0.7070313,0.109375,0.2390625,-0.4359375,0,0.6992188,0.1367188,0.2296875,-0.4640625,0,0.6914063,0.1132813,0.225,-0.45,0,0.6875,0.125,0.2015625,-0.440625,0,0.6679688,0.1328125,0.1921875,-0.46875,0,0.6601563,0.109375,0.20625,-0.4546875,0,0.671875,0.1210938,0.1359375,-0.4359375,0,0.6132813,0.1367188,0.0703125,-0.4359375,0,0.5585938,0.1367188,0.0703125,-0.46875,0,0.5585938,0.109375,0.065625,-0.4453125,0,0.5546875,0.1289063,0.065625,-0.4640625,0,0.5546875,0.1132813,-0.121875,-0.4265625,0,0.3984375,0.1445313,-0.1078125,-0.4453125,0,0.4101563,0.1289063,-0.1078125,-0.43125,0,0.4101563,0.140625,-0.121875,-0.45,0,0.3984375,0.125,-0.13125,-0.4359375,0,0.390625,0.1367188,0.2390625,0.496875,0,0.6992188,0.9140625,0.3234375,-0.4265625,0,0.7695313,0.1445313,0.3234375,0.1734375,0,0.7695313,0.6445313,-0.09375,-0.4265625,0,0.421875,0.1445313,-0.140625,-0.421875,0,0.3828125,0.1484375,-0.215625,0.496875,0,0.3203125,0.9140625,-0.215625,-0.2625,0,0.3203125,0.28125,-0.2625,-0.3984375,0,0.28125,0.1679688,-0.2671875,-0.421875,0,0.2773438,0.1484375,-0.2578125,-0.4125,0,0.2851563,0.15625,-0.3140625,-0.3984375,0,0.2382813,0.1679688,-0.31875,-0.421875,0,0.234375,0.1484375,-0.3234375,-0.4078125,0,0.2304688,0.1601563],[39,37,38,35,38,37,34,35,37,36,35,34,33,32,31,27,31,32,30,31,27,28,30,27,29,28,27,26,22,25,23,25,22,24,23,22,21,20,19,18,19,20,15,19,18,17,15,18,14,15,17,16,15,14,13,11,12,10,12,11,7,10,11,8,10,7,9,8,7,6,5,4,0,4,5,3,4,0,1,3,0,2,1,0],-0.0000504404306411743,-0.000104494392871857,0.99994957447052,0.999895513057709,0.23046875,0.109375,0.76953125,0.9140625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,59.0129127502441,28.0267505645752]},{"id":27860,"path":"Assets/Content/Sprites/Ingredients/mashed potatoes.png","assetBundleId":-1,"data":["mashed potatoes",6,27858,[0,-0.03515625,0,0.6,0.5648438,0],[0.6,-0.440625,0,1,0.1328125,0.54375,-0.6,0,0.953125,0,0.6,-0.590625,0,1,0.00781253,0.45,-0.440625,0,0.875,0.1328125,-0.3328125,-0.6,0,0.2226563,0,-0.3609375,-0.4875,0,0.1992188,0.09375,-0.3703125,-0.496875,0,0.1914063,0.0859375,-0.3703125,-0.5203125,0,0.1914063,0.06640628,-0.075,0.4875,0,0.4375,0.90625,-0.075,0.459375,0,0.4375,0.8828125,-0.075,0.46875,0,0.4375,0.890625,-0.0984375,0.3890625,0,0.4179688,0.8242188,-0.103125,0.4640625,0,0.4140625,0.8867188,-0.1078125,0.5296875,0,0.4101563,0.9414063,-0.1359375,0.4828125,0,0.3867188,0.9023438,-0.1546875,0.5296875,0,0.3710938,0.9414063,0.0515625,-0.1921875,0,0.5429688,0.3398438,0.0375,-0.2109375,0,0.53125,0.3242188,0.0515625,-0.20625,0,0.5429688,0.328125,0.028125,-0.196875,0,0.5234375,0.3359375,0.028125,-0.196875,0,0.5234375,0.3359375,0.0375,-0.1875,0,0.53125,0.34375,0.0515625,-0.1921875,0,0.5429688,0.3398438,0.0984375,-0.1921875,0,0.5820313,0.3398438,0.084375,-0.1875,0,0.5703125,0.34375,0.0796875,-0.1921875,0,0.5664063,0.3398438,0.0984375,-0.20625,0,0.5820313,0.328125,0.0984375,-0.1921875,0,0.5820313,0.3398438,0.084375,-0.2109375,0,0.5703125,0.3242188,0.075,-0.196875,0,0.5625,0.3359375,-0.103125,0.4453125,0,0.4140625,0.8710938,-0.1125,0.4265625,0,0.40625,0.8554688,-0.103125,0.4359375,0,0.4140625,0.8632813,-0.121875,0.4265625,0,0.3984375,0.8554688,-0.1828125,0.45,0,0.3476563,0.875,-0.196875,0.5109375,0,0.3359375,0.9257813,-0.15,-0.43125,0,0.375,0.140625,-0.1546875,-0.45,0,0.3710938,0.125,-0.15,-0.4453125,0,0.375,0.1289063,-0.159375,-0.421875,0,0.3671875,0.1484375,-0.16875,-0.421875,0,0.359375,0.1484375,-0.178125,-0.4265625,0,0.3515625,0.1445313,-0.178125,-0.45,0,0.3515625,0.125,0.159375,0.28125,0,0.6328125,0.734375,0.1359375,0.2859375,0,0.6132813,0.7382813,0.159375,0.2765625,0,0.6328125,0.7304688,0.15,0.290625,0,0.625,0.7421875,0.159375,0.28125,0,0.6328125,0.734375,0.1546875,0.290625,0,0.6289063,0.7421875,0.16875,0.2953125,0,0.640625,0.7460938,0.1453125,0.3046875,0,0.6210938,0.7539063,0.2390625,0.5015625,0,0.6992188,0.9179688,0.196875,0.31875,0,0.6640625,0.765625,0.20625,0.309375,0,0.671875,0.7578125,0.1875,0.31875,0,0.65625,0.765625,0.178125,0.309375,0,0.6484375,0.7578125,0.16875,0.309375,0,0.640625,0.7578125,0.178125,0.3046875,0,0.6484375,0.7539063,0.1546875,0.3140625,0,0.6289063,0.7617188,0.1359375,0.271875,0,0.6132813,0.7265625,-0.0703125,0.4828125,0,0.4414063,0.9023438,-0.1125,0.3515625,0,0.40625,0.7929688,-0.1171875,-0.2015625,0,0.4023438,0.3320313,-0.13125,0.3609375,0,0.390625,0.8007813,-0.1453125,0.365625,0,0.3789063,0.8046875,-0.178125,0.3796875,0,0.3515625,0.8164063,-0.290625,0.09375,0,0.2578125,0.578125,-0.3046875,0.0890625,0,0.2460938,0.5742188,-0.3328125,0.0796875,0,0.2226563,0.5664063,-0.3515625,-0.140625,0,0.2070313,0.3828125,-0.3515625,-0.140625,0,0.2070313,0.3828125,0.1453125,-0.4171875,0,0.6210938,0.1523438,0.140625,-0.440625,0,0.6171875,0.1328125,0.15,-0.43125,0,0.625,0.140625,0.13125,-0.4171875,0,0.609375,0.1523438,0.1265625,-0.440625,0,0.6054688,0.1328125,0.121875,-0.4265625,0,0.6015625,0.1445313,-0.5765625,-0.3328125,0,0.01953125,0.2226563,-0.5859375,-0.346875,0,0.01171875,0.2109375,-0.5765625,-0.3421875,0,0.01953125,0.2148438,-0.590625,-0.31875,0,0.00781253,0.234375,-0.6,-0.31875,0,0,0.234375,-0.6,-0.346875,0,0,0.2109375,-0.009375,-0.253125,0,0.4921875,0.2890625,0,-0.2765625,0,0.5,0.2695313,0,-0.2625,0,0.5,0.28125,-0.0140625,-0.28125,0,0.4882813,0.265625,-0.01875,-0.253125,0,0.484375,0.2890625,-0.028125,-0.2625,0,0.4765625,0.28125,-0.028125,-0.2671875,0,0.4765625,0.2773438,-0.0796875,-0.2484375,0,0.4335938,0.2929688,-0.0703125,-0.271875,0,0.4414063,0.2734375,-0.0703125,-0.2578125,0,0.4414063,0.2851563,-0.0796875,-0.2765625,0,0.4335938,0.2695313,-0.09375,-0.2484375,0,0.421875,0.2929688,-0.0984375,-0.2765625,0,0.4179688,0.2695313,-0.103125,-0.2578125,0,0.4140625,0.2851563,-0.103125,-0.2625,0,0.4140625,0.28125,-0.15,-0.2390625,0,0.375,0.3007813,-0.140625,-0.2625,0,0.3828125,0.28125,-0.140625,-0.24375,0,0.3828125,0.296875,-0.1546875,-0.2671875,0,0.3710938,0.2773438,-0.1734375,-0.2390625,0,0.3554688,0.3007813,-0.1734375,-0.2625,0,0.3554688,0.28125,-0.1828125,-0.24375,0,0.3476563,0.296875,-0.1828125,-0.2484375,0,0.3476563,0.2929688,-0.2015625,-0.234375,0,0.3320313,0.3046875,-0.1875,-0.253125,0,0.34375,0.2890625,-0.1875,-0.2390625,0,0.34375,0.3007813,-0.2015625,-0.2578125,0,0.3320313,0.2851563,-0.2109375,-0.24375,0,0.3242188,0.296875,-0.2765625,-0.20625,0,0.2695313,0.328125,-0.2625,-0.225,0,0.28125,0.3125,-0.2625,-0.2109375,0,0.28125,0.3242188,-0.2765625,-0.2296875,0,0.2695313,0.3085938,-0.2859375,-0.215625,0,0.2617188,0.3203125,0.225,-0.1875,0,0.6875,0.34375,0.215625,-0.1875,0,0.6796875,0.34375,0.215625,-0.1921875,0,0.6796875,0.3398438,0.290625,-0.1828125,0,0.7421875,0.3476563,0.2671875,-0.1828125,0,0.7226563,0.3476563,0.271875,-0.1921875,0,0.7265625,0.3398438,0.2859375,0.2109375,0,0.7382813,0.6757813,0.2859375,0.196875,0,0.7382813,0.6640625,0.3046875,0.2203125,0,0.7539063,0.6835938,0.159375,0.2671875,0,0.6328125,0.7226563,0.1453125,0.2625,0,0.6210938,0.71875,0.2953125,0.1875,0,0.7460938,0.65625,0.3421875,0.20625,0,0.7851563,0.671875,0.3515625,-0.16875,0,0.7929688,0.359375,0.346875,-0.196875,0,0.7890625,0.3359375,0.35625,-0.1828125,0,0.796875,0.3476563,0.3234375,-0.16875,0,0.7695313,0.359375,0.31875,-0.196875,0,0.765625,0.3359375,0.309375,-0.1828125,0,0.7578125,0.3476563,0.309375,-0.1921875,0,0.7578125,0.3398438,0.2390625,-0.178125,0,0.6992188,0.3515625,0.2671875,-0.178125,0,0.7226563,0.3515625,0.2671875,-0.2015625,0,0.7226563,0.3320313,0.24375,-0.20625,0,0.703125,0.328125,0.2203125,-0.20625,0,0.6835938,0.328125,0.496875,-0.1453125,0,0.9140625,0.3789063,0.496875,-0.178125,0,0.9140625,0.3515625,0.496875,-0.159375,0,0.9140625,0.3671875,0.3703125,-0.1453125,0,0.8085938,0.3789063,0.3046875,-0.2859375,0,0.7539063,0.2617188,0.5953125,-0.046875,0,0.9960938,0.4609375,0.6,-0.1078125,0,1,0.4101563,0.6,-0.0515625,0,1,0.4570313,0.5671875,-0.046875,0,0.9726563,0.4609375,0.525,-0.159375,0,0.9375,0.3671875,0.496875,-0.1359375,0,0.9140625,0.3867188,0.5484375,0.028125,0,0.9570313,0.5234375,0.5578125,-0.0140625,0,0.9648438,0.4882813,0.571875,0.0046875,0,0.9765625,0.5039063,0.534375,0.0234375,0,0.9453125,0.5195313,0.534375,0.009375,0,0.9453125,0.5078125,0.571875,0.0703125,0,0.9765625,0.5585938,0.5765625,-0.0140625,0,0.9804688,0.4882813,0.5765625,0,0,0.9804688,0.5,0.5625,-0.01875,0,0.96875,0.484375,0.5015625,-0.084375,0,0.9179688,0.4296875,0.4734375,0.0796875,0,0.8945313,0.5664063,0.440625,0.084375,0,0.8671875,0.5703125,0.4265625,0.0890625,0,0.8554688,0.5742188,0.4125,0.0890625,0,0.84375,0.5742188,0.365625,0.0984375,0,0.8046875,0.5820313,0.35625,-0.1453125,0,0.796875,0.3789063,-0.571875,0.09375,0,0.02343747,0.578125,-0.5765625,0.0703125,0,0.01953125,0.5585938,-0.5671875,0.0796875,0,0.02734378,0.5664063,-0.5859375,0.09375,0,0.01171875,0.578125,-0.590625,0.0703125,0,0.00781253,0.5585938,-0.5953125,0.084375,0,0.00390622,0.5703125,-0.515625,0.13125,0,0.0703125,0.609375,-0.4921875,0.0796875,0,0.08984375,0.5664063,-0.4921875,0.13125,0,0.08984375,0.609375,-0.5484375,0.1265625,0,0.04296872,0.6054688,-0.5578125,0.1125,0,0.03515625,0.59375,-0.5578125,0.0796875,0,0.03515625,0.5664063,-0.3703125,-0.159375,0,0.1914063,0.3671875,-0.3515625,-0.15,0,0.2070313,0.375,-0.375,-0.1359375,0,0.1875,0.3867188,-0.384375,-0.16875,0,0.1796875,0.359375,-0.3890625,-0.1078125,0,0.1757813,0.4101563,-0.534375,-0.084375,0,0.0546875,0.4296875,-0.5390625,-0.0046875,0,0.05078125,0.4960938,-0.5578125,-0.0046875,0,0.03515625,0.4960938,-0.5625,-0.0140625,0,0.03125,0.4882813,-0.5625,-0.0421875,0,0.03125,0.4648438,-0.35625,-0.13125,0,0.203125,0.390625,-0.3703125,0.05625,0,0.1914063,0.546875,-0.39375,0.028125,0,0.171875,0.5234375,-0.4125,-0.065625,0,0.15625,0.4453125,-0.2953125,0.09375,0,0.2539063,0.578125,-0.309375,0.0890625,0,0.2421875,0.5742188,-0.3703125,0.0796875,0,0.1914063,0.5664063,-0.3984375,0.13125,0,0.1679688,0.609375,-0.4921875,0.1640625,0,0.08984375,0.6367188,-0.3984375,0.1125,0,0.1679688,0.59375,-0.4265625,0.0890625,0,0.1445313,0.5742188,-0.45,0.0515625,0,0.125,0.5429688,-0.46875,0.0796875,0,0.109375,0.5664063,-0.4875,0.046875,0,0.09375,0.5390625,-0.4921875,0.0515625,0,0.08984375,0.5429688,0.346875,0.2296875,0,0.7890625,0.6914063,0.346875,0.2296875,0,0.7890625,0.6914063,0.3421875,0.2296875,0,0.7851563,0.6914063,0.4078125,0.28125,0,0.8398438,0.734375,0.3796875,0.2203125,0,0.8164063,0.6835938,0.3984375,0.2203125,0,0.8320313,0.6835938,0.375,0.2203125,0,0.8125,0.6835938,0.3703125,0.39375,0,0.8085938,0.828125,0.3421875,0.4640625,0,0.7851563,0.8867188,0.3234375,0.2953125,0,0.7695313,0.7460938,0.31875,0.309375,0,0.765625,0.7578125,0.3046875,0.309375,0,0.7539063,0.7578125,0.2953125,0.3,0,0.7460938,0.75,0.290625,-0.1546875,0,0.7421875,0.3710938,0.065625,-0.2484375,0,0.5546875,0.2929688,0.065625,-0.2859375,0,0.5546875,0.2617188,0.4171875,0.0890625,0,0.8476563,0.5742188,0.4734375,0.1125,0,0.8945313,0.59375,0.45,0.084375,0,0.875,0.5703125,0.4640625,0.0984375,0,0.8867188,0.5820313,0.3890625,0.2109375,0,0.8242188,0.6757813,0.3703125,0.2203125,0,0.8085938,0.6835938,0.3515625,0.215625,0,0.7929688,0.6796875,0.328125,0.2296875,0,0.7734375,0.6914063,0.3140625,0.2859375,0,0.7617188,0.7382813,0.3,0.2859375,0,0.75,0.7382813,0.20625,0.2953125,0,0.671875,0.7460938,0.1921875,0.290625,0,0.6601563,0.7421875,-0.1078125,0.403125,0,0.4101563,0.8359375,-0.1125,0.384375,0,0.40625,0.8203125,-0.1078125,0.39375,0,0.4101563,0.828125,-0.121875,0.4125,0,0.3984375,0.84375,-0.1359375,0.384375,0,0.3867188,0.8203125,-0.140625,0.4171875,0,0.3828125,0.8476563,-0.15,0.4078125,0,0.375,0.8398438,-0.15,0.39375,0,0.375,0.828125,-0.16875,0.4265625,0,0.359375,0.8554688,-0.1734375,0.384375,0,0.3554688,0.8203125,-0.16875,0.39375,0,0.359375,0.828125,-0.1828125,0.440625,0,0.3476563,0.8671875,-0.1921875,0.384375,0,0.3398438,0.8203125,-0.196875,0.4359375,0,0.3359375,0.8632813,-0.2015625,0.4125,0,0.3320313,0.84375,-0.2015625,0.3890625,0,0.3320313,0.8242188],[248,247,245,246,245,247,244,245,246,242,245,244,241,242,244,243,242,241,240,239,237,238,237,239,236,237,238,234,237,236,233,234,236,235,234,233,57,55,232,54,232,55,52,232,54,231,232,52,53,231,52,217,216,230,229,230,216,215,229,216,214,229,215,43,47,207,49,207,47,232,207,49,56,232,49,57,232,56,231,207,232,53,207,231,230,207,53,217,230,53,51,217,53,229,207,230,214,207,229,124,228,128,207,128,228,205,128,207,227,128,205,161,156,153,117,123,218,127,218,123,167,218,127,128,167,127,226,167,128,166,167,226,221,166,226,211,221,226,209,221,211,225,221,209,222,221,225,164,221,222,223,164,222,224,223,222,166,221,165,164,165,221,220,219,145,140,145,219,118,140,219,117,118,219,139,145,140,138,145,139,121,145,138,119,145,121,134,145,119,132,134,119,144,132,119,135,145,134,129,132,144,131,129,144,218,136,117,116,117,136,137,136,218,120,137,218,119,120,218,144,119,218,167,144,218,51,213,217,216,217,213,215,216,213,214,215,213,207,214,213,206,207,213,212,206,213,205,206,212,211,205,212,208,211,212,209,211,208,210,209,208,207,206,205,50,58,48,49,48,58,56,49,58,59,44,126,45,126,44,125,126,45,175,176,202,197,202,176,200,202,197,199,200,197,204,175,203,202,203,175,201,203,202,200,201,202,196,201,200,199,196,200,197,196,199,67,194,66,176,198,197,65,197,198,196,197,65,195,196,65,67,195,65,194,67,65,66,194,65,193,192,184,191,184,192,190,184,191,68,190,191,69,190,68,184,190,182,70,182,190,69,70,190,189,188,185,187,185,188,186,185,187,184,185,186,183,185,184,182,183,184,180,183,182,70,180,182,181,180,70,179,178,175,177,175,178,174,175,177,176,175,174,173,171,172,169,172,171,168,169,171,170,169,168,167,166,144,165,144,166,161,144,165,164,161,165,163,161,164,162,161,163,155,161,162,157,155,162,156,161,155,152,155,157,154,152,157,153,154,160,158,160,154,157,158,154,159,158,157,156,155,153,152,153,155,154,153,152,143,141,150,151,150,141,149,150,151,147,150,149,146,147,149,148,147,146,135,133,145,130,145,133,142,145,130,131,142,130,144,142,131,141,142,144,143,142,141,118,116,140,139,140,116,120,139,116,138,139,120,121,138,120,116,136,120,137,120,136,135,134,133,132,133,134,130,133,132,129,130,132,131,130,129,123,122,127,124,127,122,128,127,124,23,59,117,126,117,59,125,117,126,45,117,125,122,117,45,124,122,45,123,117,122,121,120,119,118,117,116,115,111,114,112,114,111,113,112,111,110,106,109,107,109,106,108,107,106,105,104,103,102,103,104,101,103,102,98,101,102,99,101,98,100,99,98,97,96,95,94,95,96,93,95,94,90,93,94,91,93,90,92,91,90,89,88,86,87,86,88,83,86,87,84,86,83,85,84,83,82,81,78,80,78,81,77,78,80,79,78,77,76,74,75,72,75,74,71,72,74,73,72,71,70,69,62,68,62,69,67,62,68,66,62,67,65,62,66,64,62,65,63,62,64,61,62,63,19,62,61,11,19,61,9,19,11,10,19,9,60,19,10,44,19,60,51,44,60,21,19,44,22,21,44,25,22,44,24,25,44,23,24,44,59,23,44,50,44,51,58,50,51,56,58,51,55,56,51,57,56,55,54,55,51,52,54,51,53,52,51,44,50,46,48,46,50,47,46,48,49,47,48,44,46,43,47,43,46,45,44,43,42,41,37,40,37,41,39,37,40,36,37,39,38,37,36,35,15,34,33,34,15,14,33,15,30,33,14,31,33,30,32,31,30,16,22,25,29,25,28,23,28,25,26,28,23,27,26,23,25,24,23,19,21,16,22,16,21,20,19,17,16,17,19,18,17,16,15,13,14,12,14,13,8,12,13,11,12,8,9,11,8,10,9,8,7,6,4,5,4,6,3,4,5,1,4,3,0,1,3,2,1,0],0,0,1,1,0,0,1,0.94140625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,0,0]},{"id":27750,"path":"Assets/Content/Sprites/Ingredients/mushroom.png","assetBundleId":-1,"data":["mushroom",6,27748,[-0.0234375,-0.007031254,0,0.45,0.2414063,0],[0.3703125,0.234375,0,0.8085938,0.6953125,0.4265625,-0.1828125,0,0.8554688,0.3476563,0.4265625,0.196875,0,0.8554688,0.6640625,0.215625,-0.2484375,0,0.6796875,0.2929688,-0.3515625,0.234375,0,0.2070313,0.6953125,-0.3984375,-0.2484375,0,0.1679688,0.2929688,-0.4734375,0.1828125,0,0.1054688,0.6523438,-0.4734375,-0.1875,0,0.1054688,0.34375],[7,6,5,4,5,6,3,5,4,0,3,4,1,3,0,2,1,0],-0.000297345221042633,-0.000297337770462036,0.999702632427216,0.99970269203186,0.10546875,0.29296875,0.85546875,0.6953125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,27.0761203765869,75.0761184692383]},{"id":27632,"path":"Assets/Content/Sprites/Ingredients/walnut.png","assetBundleId":-1,"data":["walnut",6,27630,[0,-0.0234375,0,0.6,0.5578125,0],[0.50625,-0.525,0,0.921875,0.06249997,0.4921875,-0.5625,0,0.9101563,0.03125,0.5109375,-0.5390625,0,0.9257813,0.05078125,0.3796875,-0.58125,0,0.8164063,0.015625,0.375,-0.525,0,0.8125,0.06249997,0.328125,-0.5578125,0,0.7734375,0.03515625,0.328125,-0.58125,0,0.7734375,0.015625,0.5625,-0.46875,0,0.96875,0.109375,0.6,-0.5015625,0,1,0.08203122,0.6,-0.46875,0,1,0.109375,0.5578125,-0.5015625,0,0.9648438,0.08203122,0.553125,-0.4875,0,0.9609375,0.09375,0.6,-0.4078125,0,1,0.1601563,0.5953125,-0.43125,0,0.9960938,0.140625,0.6,-0.43125,0,1,0.140625,0.590625,-0.4078125,0,0.9921875,0.1601563,0.5859375,-0.421875,0,0.9882813,0.1484375,-0.103125,-0.2484375,0,0.4140625,0.2929688,-0.09375,-0.2671875,0,0.421875,0.2773438,-0.09375,-0.2578125,0,0.421875,0.2851563,-0.103125,-0.2765625,0,0.4140625,0.2695313,-0.1171875,-0.2765625,0,0.4023438,0.2695313,-0.121875,-0.2484375,0,0.3984375,0.2929688,-0.13125,-0.2578125,0,0.390625,0.2851563,-0.13125,-0.2625,0,0.390625,0.28125,-0.0234375,-0.253125,0,0.4804688,0.2890625,-0.028125,-0.2765625,0,0.4765625,0.2695313,-0.01875,-0.2671875,0,0.484375,0.2773438,-0.0609375,-0.253125,0,0.4492188,0.2890625,-0.065625,-0.2765625,0,0.4453125,0.2695313,-0.0703125,-0.2625,0,0.4414063,0.28125,0.1828125,-0.24375,0,0.6523438,0.296875,0.196875,-0.2625,0,0.6640625,0.28125,0.196875,-0.2484375,0,0.6640625,0.2929688,0.1828125,-0.2671875,0,0.6523438,0.2773438,0.1734375,-0.253125,0,0.6445313,0.2890625,0.16875,-0.24375,0,0.640625,0.296875,0.1734375,-0.2671875,0,0.6445313,0.2773438,0.159375,-0.2765625,0,0.6328125,0.2695313,0.0609375,-0.24375,0,0.5507813,0.296875,0.0515625,-0.2765625,0,0.5429688,0.2695313,0.046875,-0.2625,0,0.5390625,0.28125,0.6,0.075,0,1,0.5625,0.590625,0.0375,0,0.9921875,0.53125,0.6,0.0375,0,1,0.53125,0.5671875,0.0890625,0,0.9726563,0.5742188,0.5390625,0.0421875,0,0.9492188,0.5351563,0.515625,0.0890625,0,0.9296875,0.5742188,0.5109375,0.0796875,0,0.9257813,0.5664063,0.5109375,0.0703125,0,0.9257813,0.5585938,-0.01875,0.328125,0,0.484375,0.7734375,0,0.3140625,0,0.5,0.7617188,-0.0046875,0.328125,0,0.4960938,0.7734375,-0.0234375,0.3,0,0.4804688,0.75,-0.0328125,0.3140625,0,0.4726563,0.7617188,-0.0328125,0.309375,0,0.4726563,0.7578125,-0.1640625,0.3703125,0,0.3632813,0.8085938,-0.1875,0.2859375,0,0.34375,0.7382813,-0.1734375,0.290625,0,0.3554688,0.7421875,-0.1921875,0.2859375,0,0.3398438,0.7382813,-0.20625,0.3,0,0.328125,0.75,-0.20625,0.24375,0,0.328125,0.703125,-0.20625,0.2578125,0,0.328125,0.7148438,-0.215625,0.16875,0,0.3203125,0.640625,-0.225,0.384375,0,0.3125,0.8203125,-0.2296875,0.1546875,0,0.3085938,0.6289063,-0.2390625,0.1546875,0,0.3007813,0.6289063,-0.24375,0.3703125,0,0.296875,0.8085938,-0.2484375,0.1640625,0,0.2929688,0.6367188,-0.225,0.4359375,0,0.3125,0.8632813,-0.2390625,0.384375,0,0.3007813,0.8203125,-0.225,0.39375,0,0.3125,0.828125,-0.24375,0.4453125,0,0.296875,0.8710938,-0.24375,0.384375,0,0.296875,0.8203125,-0.2578125,0.440625,0,0.2851563,0.8671875,-0.2578125,0.403125,0,0.2851563,0.8359375,-0.159375,0.459375,0,0.3671875,0.8828125,-0.1828125,0.4265625,0,0.3476563,0.8554688,-0.159375,0.4359375,0,0.3671875,0.8632813,-0.1921875,0.4875,0,0.3398438,0.90625,-0.2296875,0.534375,0,0.3085938,0.9453125,-0.24375,0.4546875,0,0.296875,0.8789063,-0.253125,0.50625,0,0.2890625,0.921875,-0.1546875,-0.1734375,0,0.3710938,0.3554688,-0.375,-0.16875,0,0.1875,0.359375,-0.1453125,-0.1921875,0,0.3789063,0.3398438,-0.4359375,-0.084375,0,0.1367188,0.4296875,-0.15,0.2625,0,0.375,0.71875,-0.159375,0.2109375,0,0.3671875,0.6757813,-0.15,0.1828125,0,0.375,0.6523438,-0.1828125,0.271875,0,0.3476563,0.7265625,-0.159375,0.2015625,0,0.3671875,0.6679688,-0.1921875,0.16875,0,0.3398438,0.640625,-0.196875,0.2671875,0,0.3359375,0.7226563,-0.2015625,0.234375,0,0.3320313,0.6953125,-0.103125,-0.196875,0,0.4140625,0.3359375,-0.1359375,-0.20625,0,0.3867188,0.328125,-0.1125,-0.20625,0,0.40625,0.328125,-0.1453125,-0.1921875,0,0.3789063,0.3398438,-0.1453125,-0.196875,0,0.3789063,0.3359375,-0.103125,-0.1875,0,0.4140625,0.34375,-0.103125,-0.196875,0,0.4140625,0.3359375,-0.1125,-0.178125,0,0.40625,0.3515625,-0.1359375,-0.178125,0,0.3867188,0.3515625,-0.1453125,-0.1875,0,0.3789063,0.34375,-0.0703125,-0.2015625,0,0.4414063,0.3320313,-0.075,-0.1921875,0,0.4375,0.3398438,-0.028125,-0.20625,0,0.4765625,0.328125,-0.065625,-0.20625,0,0.4453125,0.328125,-0.0140625,-0.1828125,0,0.4882813,0.3476563,-0.01875,-0.20625,0,0.484375,0.328125,-0.009375,-0.196875,0,0.4921875,0.3359375,-0.0703125,-0.1828125,0,0.4414063,0.3476563,0.0890625,0.3046875,0,0.5742188,0.7539063,0.084375,0.3046875,0,0.5703125,0.7539063,0.084375,0.3,0,0.5703125,0.75,0.103125,0.3234375,0,0.5859375,0.7695313,0.0984375,0.328125,0,0.5820313,0.7734375,0.1078125,0.3375,0,0.5898438,0.78125,0.1171875,0.3328125,0,0.5976563,0.7773438,0.234375,-0.159375,0,0.6953125,0.3671875,0.215625,-0.159375,0,0.6796875,0.3671875,0.215625,-0.159375,0,0.6796875,0.3671875,0.2390625,0.2296875,0,0.6992188,0.6914063,0.2390625,0.2109375,0,0.6992188,0.6757813,0.1828125,-0.1640625,0,0.6523438,0.3632813,0.178125,-0.16875,0,0.6484375,0.359375,0.16875,-0.16875,0,0.640625,0.359375,0.1546875,-0.16875,0,0.6289063,0.359375,0.15,-0.16875,0,0.625,0.359375,0.1453125,-0.1734375,0,0.6210938,0.3554688,0.15,-0.1734375,0,0.625,0.3554688,0.13125,-0.1734375,0,0.609375,0.3554688,0.1125,0.2765625,0,0.59375,0.7304688,0.271875,0.253125,0,0.7265625,0.7109375,0.271875,0.253125,0,0.7265625,0.7109375,0.253125,-0.159375,0,0.7109375,0.3671875,0.271875,-0.1828125,0,0.7265625,0.3476563,0.2625,-0.16875,0,0.71875,0.359375,0.2109375,-0.1640625,0,0.6757813,0.3632813,0.1921875,-0.1640625,0,0.6601563,0.3632813,0.1734375,-0.1734375,0,0.6445313,0.3554688,0.1734375,-0.20625,0,0.6445313,0.328125,0.0984375,0.2765625,0,0.5820313,0.7304688,0.0890625,-0.2015625,0,0.5742188,0.3320313,0.0703125,0.2765625,0,0.5585938,0.7304688,0.065625,0.271875,0,0.5546875,0.7265625,0.065625,-0.2015625,0,0.5546875,0.3320313,0.0609375,-0.1921875,0,0.5507813,0.3398438,0.05625,-0.1828125,0,0.546875,0.3476563,0.0375,0.2671875,0,0.53125,0.7226563,0.05625,-0.215625,0,0.546875,0.3203125,0.1546875,0.3328125,0,0.6289063,0.7773438,0.15,0.3375,0,0.625,0.78125,0.1453125,0.3375,0,0.6210938,0.78125,0.253125,0.2859375,0,0.7109375,0.7382813,0.2484375,0.2953125,0,0.7070313,0.7460938,0.2765625,0.3234375,0,0.7304688,0.7695313,0.2671875,0.309375,0,0.7226563,0.7578125,0.2765625,0.31875,0,0.7304688,0.765625,0.2625,0.3375,0,0.71875,0.78125,0.2578125,0.3375,0,0.7148438,0.78125,0.2578125,0.309375,0,0.7148438,0.7578125,0.2484375,0.328125,0,0.7070313,0.7734375,0.2484375,0.31875,0,0.7070313,0.765625,0.2625,0.28125,0,0.71875,0.734375,0.2578125,0.28125,0,0.7148438,0.734375,0.271875,0.3,0,0.7265625,0.75,0.271875,0.2859375,0,0.7265625,0.7382813,0.2578125,0.3046875,0,0.7148438,0.7539063,0.4078125,0.3140625,0,0.8398438,0.7617188,0.328125,0.253125,0,0.7734375,0.7109375,0.3515625,0.2484375,0,0.7929688,0.7070313,0.2578125,0.534375,0,0.7148438,0.9453125,0.1265625,0.346875,0,0.6054688,0.7890625,0.065625,0.28125,0,0.5546875,0.734375,0.05625,0.271875,0,0.546875,0.7265625,-0.159375,0.46875,0,0.3671875,0.890625,-0.16875,0.4734375,0,0.359375,0.8945313,0.3,0.2484375,0,0.75,0.7070313,0.3,0.253125,0,0.75,0.7109375,0.3046875,0.2484375,0,0.7539063,0.7070313,0.3046875,0.2390625,0,0.7539063,0.6992188,0.440625,0.1453125,0,0.8671875,0.6210938,0.3703125,-0.16875,0,0.8085938,0.359375,0.3890625,-0.1640625,0,0.8242188,0.3632813,0.3328125,-0.178125,0,0.7773438,0.3515625,0.3,0.225,0,0.75,0.6875,0.2625,0.2109375,0,0.71875,0.6757813,0.253125,-0.1546875,0,0.7109375,0.3710938,0.5625,0.0234375,0,0.96875,0.5195313,0.5765625,-0.0796875,0,0.9804688,0.4335938,0.5765625,-0.0140625,0,0.9804688,0.4882813,0.5390625,0.0046875,0,0.9492188,0.5039063,0.534375,-0.1453125,0,0.9453125,0.3789063,0.4828125,0.103125,0,0.9023438,0.5859375,0.290625,-0.253125,0,0.7421875,0.2890625,0.234375,-0.2296875,0,0.6953125,0.3085938,0.225,-0.2390625,0,0.6875,0.3007813,0.2203125,-0.253125,0,0.6835938,0.2890625,0.159375,0.3140625,0,0.6328125,0.7617188,0.159375,0.328125,0,0.6328125,0.7734375,0.1453125,0.309375,0,0.6210938,0.7578125,0.140625,0.3375,0,0.6171875,0.78125,0.13125,0.328125,0,0.609375,0.7734375,0.13125,0.3234375,0,0.609375,0.7695313,0.121875,0.31875,0,0.6015625,0.765625,0.121875,0.3328125,0,0.6015625,0.7773438,0.1078125,0.3140625,0,0.5898438,0.7617188,0.0984375,0.309375,0,0.5820313,0.7578125,0.1125,0.28125,0,0.59375,0.734375,0.1125,0.2953125,0,0.59375,0.7460938,0.084375,0.290625,0,0.5703125,0.7421875,-0.1734375,-0.2390625,0,0.3554688,0.3007813,-0.2765625,-0.2765625,0,0.2695313,0.2695313,-0.5625,-0.0421875,0,0.03125,0.4648438,-0.5859375,-0.1078125,0,0.01171875,0.4101563,-0.6,-0.0421875,0,0,0.4648438,-0.6,-0.0703125,0,0,0.4414063,-0.16875,0.1828125,0,0.359375,0.6523438,-0.215625,0.1546875,0,0.3203125,0.6289063,-0.271875,0.1546875,0,0.2734375,0.6289063,-0.3140625,0.16875,0,0.2382813,0.640625,-0.534375,0.121875,0,0.0546875,0.6015625,-0.534375,0.0515625,0,0.0546875,0.5429688,-0.159375,0.365625,0,0.3671875,0.8046875,-0.140625,-0.2765625,0,0.3828125,0.2695313,-0.140625,-0.253125,0,0.3828125,0.2890625,-0.1734375,0.421875,0,0.3554688,0.8515625,-0.16875,0.3890625,0,0.359375,0.8242188,-0.16875,0.4171875,0,0.359375,0.8476563,-0.2015625,0.3890625,0,0.3320313,0.8242188,-0.20625,0.421875,0,0.328125,0.8515625,-0.20625,0.39375,0,0.328125,0.828125],[233,232,231,228,231,232,229,231,228,230,229,228,214,213,226,227,226,213,94,62,93,225,78,87,76,87,78,177,87,76,224,223,86,222,86,223,83,86,222,221,83,222,66,83,221,65,83,66,220,83,65,92,83,220,219,83,92,89,83,219,85,83,89,87,85,89,218,217,216,215,216,217,214,216,215,84,214,215,86,84,215,85,214,84,213,214,85,99,213,85,151,149,148,212,115,143,113,143,115,209,143,113,210,143,209,211,210,209,116,119,208,206,208,119,207,206,119,205,204,202,203,202,204,154,202,203,200,202,154,152,200,154,201,200,152,124,123,188,134,188,123,187,188,134,135,187,134,179,187,135,182,187,179,199,198,196,197,196,198,184,196,197,194,196,184,185,194,184,183,194,185,195,194,183,193,194,195,191,194,193,190,191,193,192,191,190,120,124,136,189,136,124,188,189,124,138,189,188,137,138,188,187,137,188,186,137,187,182,186,187,181,186,182,172,186,181,184,186,172,183,184,172,185,184,183,182,179,181,135,180,179,165,168,171,167,171,168,159,171,167,157,171,159,80,173,79,178,79,173,177,178,173,87,177,173,50,87,173,54,87,50,104,87,54,85,87,104,98,85,104,103,104,54,102,103,54,100,102,54,106,100,54,112,106,54,55,112,54,52,50,173,51,52,173,150,51,173,117,150,173,176,150,117,175,176,117,114,175,117,115,175,114,113,114,117,118,117,173,119,118,173,174,119,173,154,174,173,153,154,173,152,153,173,163,152,173,156,152,163,164,156,163,161,163,173,160,161,173,170,160,173,157,160,170,171,157,170,172,171,170,156,164,169,162,169,164,167,169,162,158,167,162,159,167,158,156,169,155,165,155,169,167,165,169,168,165,167,166,155,165,164,163,162,161,162,163,158,162,161,160,158,161,157,158,160,159,158,157,152,156,155,154,153,152,107,110,151,111,151,110,51,151,111,150,151,51,149,151,150,146,149,150,148,149,146,147,148,146,144,147,146,145,144,146,143,144,145,132,144,143,142,144,132,133,132,143,130,142,132,131,142,130,128,142,131,127,142,128,141,142,127,137,142,141,140,137,141,139,137,140,122,137,139,120,137,122,136,137,120,138,137,136,135,134,133,123,133,134,132,133,123,130,132,123,129,130,123,131,130,129,128,129,123,127,128,123,126,127,123,125,126,123,122,125,123,121,122,123,120,121,123,124,120,123,122,121,120,117,118,116,119,116,118,113,117,116,115,114,113,112,55,109,53,109,55,51,109,53,111,109,51,106,112,105,109,105,112,107,105,109,110,107,109,111,110,109,108,105,107,95,101,105,100,105,101,106,105,100,98,104,95,103,95,104,102,95,103,100,95,102,101,95,100,99,98,96,95,96,98,97,96,95,63,61,92,94,92,61,93,92,94,90,92,93,91,92,90,88,91,90,87,88,90,89,88,87,86,83,84,85,84,83,82,80,81,77,81,80,79,77,80,76,77,79,78,77,76,75,74,73,72,73,74,70,73,72,69,70,72,71,70,69,68,67,66,64,66,67,65,66,64,63,65,64,60,63,64,56,60,64,61,63,60,62,61,60,59,60,56,57,59,56,58,57,56,55,54,53,50,53,54,51,53,50,52,51,50,49,48,46,47,46,48,45,46,47,43,46,45,42,43,45,44,43,42,41,39,40,38,40,39,36,38,39,37,38,36,35,37,36,35,31,34,32,34,31,33,32,31,30,28,29,26,29,28,25,26,28,27,26,25,24,23,21,22,21,23,17,21,22,20,21,17,18,20,17,19,18,17,16,15,13,12,13,15,14,13,12,11,7,10,8,10,7,9,8,7,6,5,3,4,3,5,0,3,4,1,3,0,2,1,0],-0.000104496255517006,-0.000297345221042633,0.999895513057709,0.999702632427216,0,0.015625,1,0.9453125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,0.0267510414123535,4.07612037658691]},{"id":27728,"path":"Assets/Content/Sprites/Ingredients/rosemary.png","assetBundleId":-1,"data":["rosemary",6,27726,[0.004687503,0.05390626,0,0.4453125,0.3726563,0],[-0.2484375,0.234375,0,0.2929688,0.6953125,-0.2953125,0,0,0.2539063,0.5,-0.28125,0,0,0.265625,0.5,-0.3140625,0,0,0.2382813,0.5,-0.3984375,0.234375,0,0.1679688,0.6953125,-0.43125,0.0140625,0,0.140625,0.5117188,0.2203125,0.4265625,0,0.6835938,0.8554688,-0.234375,0.2390625,0,0.3046875,0.6992188,-0.1921875,0.215625,0,0.3398438,0.6796875,-0.2578125,0.4265625,0,0.2851563,0.8554688,-0.271875,0.3140625,0,0.2734375,0.7617188,0.4125,0.1125,0,0.84375,0.59375,0.45,-0.3046875,0,0.875,0.2460938,0.45,-0.0421875,0,0.875,0.4648438,0.3421875,-0.31875,0,0.7851563,0.234375,-0.225,0.2296875,0,0.3125,0.6914063,-0.440625,-0.0046875,0,0.1328125,0.4960938,-0.440625,-0.31875,0,0.1328125,0.234375],[17,16,14,1,14,16,2,14,1,0,14,2,15,14,0,8,14,15,6,14,8,11,14,6,12,14,11,13,12,11,10,9,7,6,7,9,8,7,6,5,4,3,0,3,4,1,3,0,2,1,0],-0.00029735267162323,-0.00029735267162323,0.999702632427216,0.999702632427216,0.1328125,0.234375,0.875,0.85546875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,34.0761222839355,60.0761222839355]},{"id":27944,"path":"Assets/Content/Sprites/Ingredients/tomato.png","assetBundleId":-1,"data":["tomato",6,27942,[0.01171875,-0.03515625,0,0.3914063,0.2882813,0],[0.0796875,0.2484375,0,0.5664063,0.7070313,0.05625,0.1734375,0,0.546875,0.6445313,0.0703125,0.1828125,0,0.5585938,0.6523438,0.0421875,0.253125,0,0.5351563,0.7109375,0.365625,0.1546875,0,0.8046875,0.6289063,0.403125,-0.3234375,0,0.8359375,0.2304688,0.403125,0.0046875,0,0.8359375,0.5039063,0.0984375,0.196875,0,0.5820313,0.6640625,0.0796875,0.1921875,0,0.5664063,0.6601563,0.065625,0.178125,0,0.5546875,0.6484375,0.065625,0.16875,0,0.5546875,0.640625,-0.1171875,-0.3234375,0,0.4023438,0.2304688,-0.3421875,-0.3046875,0,0.2148438,0.2460938,-0.375,0.253125,0,0.1875,0.7109375,-0.3796875,0.24375,0,0.1835938,0.703125,-0.3796875,-0.178125,0,0.1835938,0.3515625],[15,14,12,13,12,14,3,12,13,11,12,3,1,11,3,5,11,1,10,5,1,9,5,10,2,5,9,8,5,2,7,5,8,4,5,7,6,5,4,3,0,1,2,1,0],-0.000104501843452454,-0.00029735267162323,0.999895513057709,0.999702632427216,0.18359375,0.23046875,0.8359375,0.7109375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,47.0267524719238,59.0761222839355]},{"id":27738,"path":"Assets/Content/Sprites/Ingredients/bacon.png","assetBundleId":-1,"data":["bacon",6,27736,[0.03749999,-0.09843752,0,0.5484375,0.4734375,0],[0.45,-0.5203125,0,0.875,0.06640628,0.4734375,-0.534375,0,0.8945313,0.0546875,0.46875,-0.5203125,0,0.890625,0.06640628,0.45,-0.553125,0,0.875,0.0390625,0.4359375,-0.553125,0,0.8632813,0.0390625,0.43125,-0.534375,0,0.859375,0.0546875,0.43125,-0.54375,0,0.859375,0.04687503,-0.4265625,-0.4640625,0,0.1445313,0.1132813,-0.4171875,-0.54375,0,0.1523438,0.04687503,-0.4171875,-0.4875,0,0.1523438,0.09375,-0.43125,-0.5484375,0,0.140625,0.04296872,-0.4359375,-0.4640625,0,0.1367188,0.1132813,-0.4453125,-0.46875,0,0.1289063,0.109375,-0.4546875,-0.5484375,0,0.1210938,0.04296872,-0.459375,-0.525,0,0.1171875,0.06249997,-0.459375,-0.5390625,0,0.1171875,0.05078125,-0.3140625,-0.50625,0,0.2382813,0.078125,-0.3140625,-0.515625,0,0.2382813,0.0703125,-0.309375,-0.50625,0,0.2421875,0.078125,-0.3328125,-0.515625,0,0.2226563,0.0703125,-0.3421875,-0.5015625,0,0.2148438,0.08203122,-0.3421875,-0.5109375,0,0.2148438,0.07421875,-0.309375,-0.4875,0,0.2421875,0.09375,-0.3234375,-0.4828125,0,0.2304688,0.09765625,-0.3375,-0.4828125,0,0.21875,0.09765625,-0.3421875,-0.4921875,0,0.2148438,0.08984375,-0.225,-0.384375,0,0.3125,0.1796875,-0.2296875,-0.384375,0,0.3085938,0.1796875,-0.2296875,-0.384375,0,0.3085938,0.1796875,-0.215625,-0.5015625,0,0.3203125,0.08203122,-0.24375,-0.5015625,0,0.296875,0.08203122,-0.2203125,-0.50625,0,0.3164063,0.078125,-0.15,-0.515625,0,0.375,0.0703125,-0.1546875,-0.571875,0,0.3710938,0.02343747,-0.15,-0.5625,0,0.375,0.03125,-0.1640625,-0.5015625,0,0.3632813,0.08203122,-0.2109375,-0.571875,0,0.3242188,0.02343747,-0.271875,-0.5015625,0,0.2734375,0.08203122,-0.271875,-0.54375,0,0.2734375,0.04687503,-0.1734375,-0.4359375,0,0.3554688,0.1367188,-0.1453125,-0.50625,0,0.3789063,0.078125,-0.15,-0.39375,0,0.375,0.171875,-0.1734375,-0.4640625,0,0.3554688,0.1132813,-0.16875,-0.3984375,0,0.359375,0.1679688,-0.178125,-0.4734375,0,0.3515625,0.1054688,-0.20625,-0.384375,0,0.328125,0.1796875,-0.24375,-0.3984375,0,0.296875,0.1679688,-0.3,-0.3890625,0,0.25,0.1757813,-0.2953125,-0.50625,0,0.2539063,0.078125,-0.2859375,-0.5296875,0,0.2617188,0.05859375,-0.2859375,-0.515625,0,0.2617188,0.0703125,-0.3,-0.534375,0,0.25,0.0546875,-0.3046875,-0.50625,0,0.2460938,0.078125,-0.3140625,-0.5203125,0,0.2382813,0.06640628,-0.3609375,-0.496875,0,0.1992188,0.0859375,-0.35625,-0.5015625,0,0.203125,0.08203122,-0.35625,-0.496875,0,0.203125,0.0859375,-0.375,-0.5015625,0,0.1875,0.08203122,-0.3796875,-0.46875,0,0.1835938,0.109375,-0.384375,-0.478125,0,0.1796875,0.1015625,-0.384375,-0.496875,0,0.1796875,0.0859375,-0.3515625,-0.4734375,0,0.2070313,0.1054688,-0.3515625,-0.4921875,0,0.2070313,0.08984375,-0.365625,-0.46875,0,0.1953125,0.109375,-0.3796875,-0.46875,0,0.1835938,0.109375,0.5765625,-0.3421875,0,0.9804688,0.2148438,0.5859375,-0.4265625,0,0.9882813,0.1445313,0.5859375,-0.365625,0,0.9882813,0.1953125,0.5671875,-0.459375,0,0.9726563,0.1171875,0.5484375,-0.2859375,0,0.9570313,0.2617188,0.534375,-0.459375,0,0.9453125,0.1171875,0.525,-0.2859375,0,0.9375,0.2617188,0.5109375,-0.3234375,0,0.9257813,0.2304688,0.5109375,-0.4453125,0,0.9257813,0.1289063,-0.45,-0.421875,0,0.125,0.1484375,-0.4546875,-0.4453125,0,0.1210938,0.1289063,-0.45,-0.4359375,0,0.125,0.1367188,-0.478125,-0.3609375,0,0.1015625,0.1992188,-0.4875,-0.4453125,0,0.09375,0.1289063,-0.5015625,-0.3609375,0,0.08203122,0.1992188,-0.5109375,-0.3796875,0,0.07421875,0.1835938,-0.5109375,-0.4171875,0,0.07421875,0.1523438,0.4359375,0.2671875,0,0.8632813,0.7226563,0.3984375,0.103125,0,0.8320313,0.5859375,0.4265625,0.103125,0,0.8554688,0.5859375,0.375,0.065625,0,0.8125,0.5546875,0.3421875,-0.3234375,0,0.7851563,0.2304688,0.375,0.0328125,0,0.8125,0.5273438,0.328125,-0.31875,0,0.7734375,0.234375,0.3140625,-0.3328125,0,0.7617188,0.2226563,0.2625,0.375,0,0.71875,0.8125,0.3140625,-0.3375,0,0.7617188,0.21875,0.4828125,0.1171875,0,0.9023438,0.5976563,0.4828125,-0.4265625,0,0.9023438,0.1445313,0.4828125,-0.2484375,0,0.9023438,0.2929688,0.4265625,0.0328125,0,0.8554688,0.5273438,0.4171875,0.0234375,0,0.8476563,0.5195313,0.3984375,0.0234375,0,0.8320313,0.5195313,0.3421875,-0.3328125,0,0.7851563,0.2226563,0.328125,-0.346875,0,0.7734375,0.2109375,0.3234375,-0.346875,0,0.7695313,0.2109375,0.2390625,-0.50625,0,0.6992188,0.078125,0.103125,0.375,0,0.5859375,0.8125,-0.178125,-0.384375,0,0.3515625,0.1796875,-0.43125,0.290625,0,0.140625,0.7421875,-0.43125,-0.403125,0,0.140625,0.1640625,0.5109375,-0.2390625,0,0.9257813,0.3007813,0.50625,-0.2625,0,0.921875,0.28125,0.515625,-0.253125,0,0.9296875,0.2890625,0.4921875,-0.2390625,0,0.9101563,0.3007813,0.4875,-0.2625,0,0.90625,0.28125],[94,109,110,107,110,109,106,107,109,108,107,106,91,89,100,88,100,89,99,100,88,98,99,88,86,98,88,87,85,97,83,97,85,96,97,83,84,96,83,95,96,84,105,104,58,64,58,104,102,64,104,63,64,102,61,63,102,47,61,102,25,61,47,20,61,25,24,25,47,23,24,47,22,23,47,28,47,102,27,28,102,26,27,102,45,26,102,103,45,102,41,103,102,40,41,102,101,40,102,90,101,102,91,101,90,100,101,91,93,101,100,99,93,100,98,93,99,86,93,98,87,93,86,97,93,87,96,93,97,95,93,96,84,93,95,82,93,84,92,93,82,94,93,92,82,85,90,89,90,85,91,90,89,88,89,85,86,88,85,87,86,85,83,85,82,84,83,82,81,80,78,79,78,80,77,78,79,75,78,77,74,75,77,76,75,74,73,72,70,71,70,72,69,70,71,68,70,69,65,68,69,66,68,65,67,66,65,56,62,20,61,20,62,58,64,54,63,54,64,61,54,63,56,54,61,62,56,61,60,59,57,58,57,59,54,57,58,55,57,54,56,55,54,53,17,51,52,51,17,48,51,52,49,51,48,50,49,48,22,47,30,46,30,47,28,30,46,29,30,28,26,29,28,45,29,26,44,29,45,43,44,45,39,44,43,42,39,40,41,40,39,38,37,36,30,36,37,31,36,30,29,36,31,35,36,29,33,36,35,32,33,35,34,33,32,31,30,29,28,27,26,20,25,16,24,16,25,23,16,24,22,16,23,18,16,22,21,20,19,16,19,20,17,19,16,18,17,16,15,14,13,12,13,14,10,13,12,11,10,12,7,10,11,8,10,7,9,8,7,6,5,4,0,4,5,3,4,0,1,3,0,2,1,0],-0.000104494392871857,-2.98023223876953e-8,0.999895513057709,1,0.07421875,0.0234374701976776,0.98828125,0.8125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,19.0267505645752,6]},{"id":28166,"path":"Assets/Content/Sprites/Ingredients/bread.png","assetBundleId":-1,"data":["bread",6,28164,[0.05859376,-0.002343744,0,0.4664063,0.3117188,0],[0.178125,0.140625,0,0.6484375,0.6171875,0.16875,0.2203125,0,0.640625,0.6835938,0.178125,0.0609375,0,0.6484375,0.5507813,0.525,-0.0796875,0,0.9375,0.4335938,0.4734375,-0.2203125,0,0.8945313,0.3164063,0.525,-0.1734375,0,0.9375,0.3554688,0.421875,0.084375,0,0.8515625,0.5703125,0.3140625,-0.3140625,0,0.7617188,0.2382813,0.2015625,0.065625,0,0.6679688,0.5546875,0.1171875,-0.3140625,0,0.5976563,0.2382813,-0.121875,-0.2671875,0,0.3984375,0.2773438,-0.13125,0.309375,0,0.390625,0.7578125,-0.4078125,0.309375,0,0.1601563,0.7578125,-0.4078125,-0.1640625,0,0.1601563,0.3632813],[13,12,10,11,10,12,1,10,11,9,10,1,2,9,1,7,9,2,8,7,2,6,7,8,4,7,6,3,4,6,5,4,3,2,1,0],-0.000104501843452454,-0.000118523836135864,0.999895513057709,0.999881505966187,0.16015625,0.23828125,0.9375,0.7578125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,41.0267524719238,61.0303421020508]},{"id":27964,"path":"Assets/Content/Sprites/Ingredients/tofu.png","assetBundleId":-1,"data":["tofu",6,27962,[-0.009374991,0.02109376,0,0.3421875,0.2648438,0],[0.328125,0.2109375,0,0.7734375,0.6757813,0.3328125,-0.009375,0,0.7773438,0.4921875,0.3328125,0.1875,0,0.7773438,0.65625,0.1265625,0.2859375,0,0.6054688,0.7382813,-0.05625,-0.24375,0,0.453125,0.296875,-0.15,-0.24375,0,0.375,0.296875,-0.2671875,0.2859375,0,0.2773438,0.7382813,-0.3515625,0.05625,0,0.2070313,0.546875,-0.3515625,-0.1734375,0,0.2070313,0.3554688],[8,7,5,6,5,7,3,5,6,4,5,3,1,4,3,0,1,3,2,1,0],-0.000104501843452454,0,0.999895513057709,1,0.20703125,0.296875,0.77734375,0.73828125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,53.0267524719238,76]},{"id":27744,"path":"Assets/Content/Sprites/Ingredients/ginger.png","assetBundleId":-1,"data":["ginger",6,27742,[0.07265624,-0.04218751,0,0.4898438,0.3609375,0],[-0.1640625,0.3140625,0,0.3632813,0.7617188,-0.178125,0.2296875,0,0.3515625,0.6914063,-0.1640625,0.2390625,0,0.3632813,0.6992188,-0.1828125,0.2296875,0,0.3476563,0.6914063,-0.1875,0.234375,0,0.34375,0.6953125,-0.196875,0.3140625,0,0.3359375,0.7617188,-0.20625,0.3,0,0.328125,0.75,-0.20625,0.2625,0,0.328125,0.71875,-0.1921875,0.31875,0,0.3398438,0.765625,-0.1640625,0.31875,0,0.3632813,0.765625,0.5625,0.178125,0,0.96875,0.6484375,0.5578125,0.1125,0,0.9648438,0.59375,0.5625,0.1078125,0,0.96875,0.5898438,0.515625,0.1125,0,0.9296875,0.59375,0.2859375,-0.403125,0,0.7382813,0.1640625,0.515625,0.0609375,0,0.9296875,0.5507813,0.215625,0.13125,0,0.6796875,0.609375,0.2015625,0.1359375,0,0.6679688,0.6132813,0.1734375,0.3140625,0,0.6445313,0.7617188,0.1921875,0.1265625,0,0.6601563,0.6054688,0.5625,0.0515625,0,0.96875,0.5429688,0.534375,0.0515625,0,0.9453125,0.5429688,0.5625,-0.3046875,0,0.96875,0.2460938,0.215625,0.1171875,0,0.6796875,0.5976563,0.2015625,0.1125,0,0.6679688,0.59375,0.0796875,0.234375,0,0.5664063,0.6953125,0.0796875,0.2203125,0,0.5664063,0.6835938,0.065625,0.215625,0,0.5546875,0.6796875,0.0375,0.24375,0,0.53125,0.703125,-0.271875,0.1828125,0,0.2734375,0.6523438,-0.271875,0.1734375,0,0.2734375,0.6445313,-0.3234375,0.13125,0,0.2304688,0.609375,-0.3328125,-0.403125,0,0.2226563,0.1640625,-0.3421875,0.1265625,0,0.2148438,0.6054688,-0.3515625,0.140625,0,0.2070313,0.6171875,-0.4171875,0.1875,0,0.1523438,0.65625,-0.4171875,-0.1828125,0,0.1523438,0.3476563,-0.2765625,0.3140625,0,0.2695313,0.7617188,-0.2859375,0.1875,0,0.2617188,0.65625,-0.3234375,0.16875,0,0.2304688,0.640625,0.0515625,0.2625,0,0.5429688,0.71875,0.0375,0.2578125,0,0.53125,0.7148438],[28,41,27,40,27,41,25,27,40,26,27,25,18,41,0,28,0,41,40,41,18,25,40,18,34,39,33,31,33,39,30,31,39,38,30,39,29,30,38,35,37,34,39,34,37,38,39,37,29,38,37,6,29,37,5,6,37,7,29,6,19,17,24,23,24,17,16,23,17,36,35,32,34,32,35,33,32,34,31,32,33,14,32,31,30,14,31,29,14,30,4,14,29,7,4,29,3,14,4,1,14,3,2,14,1,0,14,2,28,14,0,27,14,28,26,14,27,25,14,26,19,14,25,18,19,25,24,14,19,23,14,24,16,14,23,14,15,22,21,22,15,20,22,21,15,13,21,11,21,13,20,21,11,12,20,11,10,17,18,19,18,17,16,17,10,13,16,10,14,16,13,15,14,13,11,13,10,12,11,10,5,8,0,9,0,8,7,6,4,5,4,6,0,4,5,3,4,0,1,3,0,2,1,0],-0.000167608261108398,-0.00029735267162323,0.999832391738892,0.999702632427216,0.15234375,0.1640625,0.96875,0.765625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,39.0429077148438,42.0761222839355]},{"id":28106,"path":"Assets/Content/Sprites/Ingredients/butter.png","assetBundleId":-1,"data":["butter",6,28104,[-0.01171875,0.002343744,0,0.4289063,0.2554688,0],[0.4171875,0.1125,0,0.8476563,0.59375,0.3796875,-0.253125,0,0.8164063,0.2890625,0.4171875,-0.1125,0,0.8476563,0.40625,0.2203125,0.2578125,0,0.6835938,0.7148438,0.028125,-0.253125,0,0.5234375,0.2890625,-0.0375,-0.234375,0,0.46875,0.3046875,-0.2296875,0.2578125,0,0.3085938,0.7148438,-0.365625,-0.1453125,0,0.1953125,0.3789063,-0.4171875,-0.121875,0,0.1523438,0.3984375,-0.440625,0.1359375,0,0.1328125,0.6132813,-0.440625,-0.0421875,0,0.1328125,0.4648438],[10,9,8,6,8,9,7,8,6,5,7,6,3,5,6,4,5,3,1,4,3,0,1,3,2,1,0],-0.00013086199760437,-0.000297337770462036,0.999869108200073,0.99970269203186,0.1328125,0.2890625,0.84765625,0.71484375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,34.0335006713867,74.0761184692383]},{"id":28006,"path":"Assets/Content/Sprites/Ingredients/ygrt.png","assetBundleId":-1,"data":["ygrt",6,28004,[0.1289063,0.009375006,0,0.4710938,0.4078125,0],[0.346875,0.0890625,0,0.7890625,0.5742188,0.346875,-0.1734375,0,0.7890625,0.3554688,0.346875,-0.1546875,0,0.7890625,0.3710938,0.3421875,0.0890625,0,0.7851563,0.5742188,0.3421875,-0.215625,0,0.7851563,0.3203125,0.3421875,0.0984375,0,0.7851563,0.5820313,0.346875,0.121875,0,0.7890625,0.6015625,0.346875,0.2765625,0,0.7890625,0.7304688,0.2484375,-0.1640625,0,0.7070313,0.3632813,0.234375,-0.159375,0,0.6953125,0.3671875,0.225,-0.16875,0,0.6875,0.359375,0.1453125,0.4171875,0,0.6210938,0.8476563,0.43125,0.20625,0,0.859375,0.671875,0.4265625,0.1828125,0,0.8554688,0.6523438,0.4359375,0.1921875,0,0.8632813,0.6601563,0.403125,0.178125,0,0.8359375,0.6484375,0.3984375,0.20625,0,0.8320313,0.671875,0.39375,0.196875,0,0.828125,0.6640625,0.39375,0.1828125,0,0.828125,0.6523438,0.4875,0.084375,0,0.90625,0.5703125,0.4734375,0.05625,0,0.8945313,0.546875,0.4875,0.0609375,0,0.90625,0.5507813,0.46875,0.1125,0,0.890625,0.59375,0.4546875,0.0703125,0,0.8789063,0.5585938,0.45,0.1125,0,0.875,0.59375,0.45,0.0890625,0,0.875,0.5742188,0.39375,0.1640625,0,0.828125,0.6367188,0.3890625,0.1265625,0,0.8242188,0.6054688,0.39375,0.1453125,0,0.828125,0.6210938,0.3796875,0.178125,0,0.8164063,0.6484375,0.3703125,0.178125,0,0.8085938,0.6484375,0.365625,0.084375,0,0.8046875,0.5703125,0.35625,0.1734375,0,0.796875,0.6445313,0.3515625,0.084375,0,0.7929688,0.5703125,0.2484375,-0.178125,0,0.7070313,0.3515625,0.234375,-0.1828125,0,0.6953125,0.3476563,0.234375,-0.3984375,0,0.6953125,0.1679688,-0.1359375,0.4171875,0,0.3867188,0.8476563,-0.2015625,-0.3984375,0,0.3320313,0.1679688,-0.3375,-0.3515625,0,0.21875,0.2070313,-0.3421875,0.225,0,0.2148438,0.6875,-0.3421875,-0.3375,0,0.2148438,0.21875,0.459375,-0.1546875,0,0.8828125,0.3710938,0.4640625,-0.1734375,0,0.8867188,0.3554688,0.4640625,-0.1640625,0,0.8867188,0.3632813,0.440625,-0.1828125,0,0.8671875,0.3476563,0.4359375,-0.15,0,0.8632813,0.375,0.35625,-0.15,0,0.796875,0.375,0.3515625,-0.1828125,0,0.7929688,0.3476563,0.346875,-0.178125,0,0.7890625,0.3515625,0.6,-0.140625,0,1,0.3828125,0.4828125,-0.178125,0,0.9023438,0.3515625,0.6,-0.178125,0,1,0.3515625,0.478125,-0.140625,0,0.8984375,0.3828125,0.478125,-0.16875,0,0.8984375,0.359375,0.4265625,-0.075,0,0.8554688,0.4375,0.421875,-0.0984375,0,0.8515625,0.4179688,0.43125,-0.0890625,0,0.859375,0.4257813,0.3890625,-0.075,0,0.8242188,0.4375,0.384375,-0.0984375,0,0.8203125,0.4179688,0.3796875,-0.084375,0,0.8164063,0.4296875,0.6,0.0421875,0,1,0.5351563,0.58125,0,0,0.984375,0.5,0.6,0.009375,0,1,0.5078125,0.5578125,0.028125,0,0.9648438,0.5234375,0.5390625,0,0,0.9492188,0.5,0.534375,0.0140625,0,0.9453125,0.5117188,0.5859375,0.159375,0,0.9882813,0.6328125,0.6,0.084375,0,1,0.5703125,0.6,0.1640625,0,1,0.6367188,0.58125,0.0515625,0,0.984375,0.5429688,0.553125,0.0515625,0,0.9609375,0.5429688,0.5390625,0.0796875,0,0.9492188,0.5664063,0.5390625,0.05625,0,0.9492188,0.546875],[73,72,71,67,71,72,70,71,67,68,70,67,69,68,67,66,64,65,62,65,64,61,62,64,63,62,61,60,58,59,56,59,58,55,56,58,57,56,55,54,53,51,50,51,53,52,51,50,49,1,48,2,48,1,47,48,2,45,48,47,46,45,47,42,45,46,43,45,42,44,43,42,10,9,35,34,35,9,8,34,9,41,40,39,37,39,40,38,39,37,36,38,37,11,36,37,10,36,11,35,36,10,4,36,35,34,4,35,8,4,34,0,6,33,32,33,6,31,33,32,30,31,32,27,31,30,29,27,30,26,27,29,28,27,26,25,24,23,22,23,24,20,23,22,19,20,22,21,20,19,18,17,15,16,15,17,12,15,16,13,15,12,14,13,12,11,7,10,9,10,7,8,9,7,5,8,7,4,8,5,3,4,5,6,5,7,3,5,0,6,0,5,4,3,1,0,1,3,2,1,0],-0.000141739845275879,-0.000104501843452454,0.999858260154724,0.999895513057709,0.21484375,0.16796875,1,0.84765625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,55.0362854003906,43.0267524719238]},{"id":27828,"path":"Assets/Content/Sprites/Ingredients/chiken broth.png","assetBundleId":-1,"data":["chiken broth",6,27826,[0,-0.09609374,0,0.5578125,0.3726563,0],[-0.121875,-0.31875,0,0.3984375,0.234375,-0.1265625,-0.3421875,0,0.3945313,0.2148438,-0.121875,-0.3328125,0,0.3984375,0.2226563,-0.1921875,-0.3421875,0,0.3398438,0.2148438,-0.225,-0.3,0,0.3125,0.25,-0.2578125,-0.28125,0,0.2851563,0.265625,-0.271875,-0.31875,0,0.2734375,0.234375,-0.2953125,-0.28125,0,0.2539063,0.265625,-0.2953125,-0.3046875,0,0.2539063,0.2460938,-0.13125,-0.3140625,0,0.390625,0.2382813,-0.121875,-0.31875,0,0.3984375,0.234375,-0.2390625,-0.28125,0,0.3007813,0.265625,-0.075,-0.31875,0,0.4375,0.234375,-0.0796875,-0.328125,0,0.4335938,0.2265625,-0.075,-0.31875,0,0.4375,0.234375,-0.1078125,-0.31875,0,0.4101563,0.234375,-0.1125,-0.3234375,0,0.40625,0.2304688,0.1828125,-0.4359375,0,0.6523438,0.1367188,0.1828125,-0.43125,0,0.6523438,0.140625,0.1640625,-0.43125,0,0.6367188,0.140625,0.1875,-0.4546875,0,0.65625,0.1210938,0.1875,-0.440625,0,0.65625,0.1328125,0.178125,-0.459375,0,0.6484375,0.1171875,0.16875,-0.459375,0,0.640625,0.1171875,0.1640625,-0.43125,0,0.6367188,0.140625,0.159375,-0.440625,0,0.6328125,0.1328125,0.159375,-0.4546875,0,0.6328125,0.1210938,0.2296875,-0.28125,0,0.6914063,0.265625,0.1875,-0.28125,0,0.65625,0.265625,0.2296875,-0.290625,0,0.6914063,0.2578125,0.4078125,-0.178125,0,0.8398438,0.3515625,0.4359375,-0.1453125,0,0.8632813,0.3789063,0.4359375,-0.1453125,0,0.8632813,0.3789063,0.4078125,-0.215625,0,0.8398438,0.3203125,0.50625,0.2765625,0,0.921875,0.7304688,0.46875,-0.1453125,0,0.890625,0.3789063,0.4828125,-0.16875,0,0.9023438,0.359375,0.440625,-0.1453125,0,0.8671875,0.3789063,0.4359375,-0.1453125,0,0.8632813,0.3789063,0.4125,-0.1546875,0,0.84375,0.3710938,0.4078125,-0.16875,0,0.8398438,0.359375,0.346875,-0.2484375,0,0.7890625,0.2929688,0.3,-0.28125,0,0.75,0.265625,0.290625,-0.290625,0,0.7421875,0.2578125,0.2859375,-0.2296875,0,0.7382813,0.3085938,0.1359375,-0.2859375,0,0.6132813,0.2617188,0.0421875,-0.3046875,0,0.5351563,0.2460938,-0.0234375,-0.3046875,0,0.4804688,0.2460938,-0.065625,-0.3046875,0,0.4453125,0.2460938,-0.31875,0.2765625,0,0.234375,0.7304688,-0.328125,-0.24375,0,0.2265625,0.296875,-0.3375,-0.3515625,0,0.21875,0.2070313,-0.54375,-0.2015625,0,0.04687503,0.3320313,-0.5578125,0.09375,0,0.03515625,0.578125,-0.5578125,-0.1734375,0,0.03515625,0.3554688,0.5578125,-0.328125,0,0.9648438,0.2265625,0.5578125,0.0328125,0,0.9648438,0.5273438,0.4828125,-0.20625,0,0.9023438,0.328125,0.46875,-0.234375,0,0.890625,0.3046875,0.45,-0.24375,0,0.875,0.296875,0.421875,-0.24375,0,0.8515625,0.296875,0.3984375,-0.4359375,0,0.8320313,0.1367188,0.4078125,-0.2203125,0,0.8398438,0.3164063,0.39375,-0.253125,0,0.828125,0.2890625,0.3,-0.290625,0,0.75,0.2578125,0.2625,-0.290625,0,0.71875,0.2578125,0.1875,-0.4359375,0,0.65625,0.1367188,0.084375,-0.31875,0,0.5703125,0.234375,-0.0515625,-0.3234375,0,0.4570313,0.2304688,-0.0984375,-0.375,0,0.4179688,0.1875,0.2625,-0.253125,0,0.71875,0.2890625,0.2484375,-0.2859375,0,0.7070313,0.2617188,-0.065625,-0.3375,0,0.4453125,0.21875,-0.065625,-0.328125,0,0.4453125,0.2265625,-0.075,-0.346875,0,0.4375,0.2109375,-0.1078125,-0.346875,0,0.4101563,0.2109375,-0.1171875,-0.328125,0,0.4023438,0.2265625,-0.1171875,-0.3375,0,0.4023438,0.21875,-0.3,-0.2625,0,0.25,0.28125,-0.3,-0.3328125,0,0.25,0.2226563,-0.2953125,-0.3328125,0,0.2539063,0.2226563,-0.3046875,-0.346875,0,0.2460938,0.2109375,-0.3046875,-0.3609375,0,0.2460938,0.1992188,-0.01875,-0.4171875,0,0.484375,0.1523438,-0.0140625,-0.46875,0,0.4882813,0.109375,-0.0140625,-0.4359375,0,0.4882813,0.1367188,-0.225,-0.3328125,0,0.3125,0.2226563,-0.28125,-0.46875,0,0.265625,0.109375,-0.2953125,-0.3421875,0,0.2539063,0.2148438,-0.3046875,-0.4640625,0,0.2460938,0.1132813],[82,81,88,79,88,81,80,88,79,89,82,87,88,87,82,80,86,88,87,88,86,84,87,86,83,84,86,85,84,83,51,50,82,81,82,50,78,81,50,79,81,78,80,79,78,0,10,16,77,76,75,16,75,76,13,75,16,74,75,13,14,74,13,72,74,14,73,72,14,71,70,65,43,65,70,44,43,70,69,68,19,47,19,68,67,19,47,28,19,67,18,19,28,17,18,28,66,17,28,61,66,28,29,61,28,65,61,29,43,61,65,64,61,43,42,61,64,63,61,42,33,61,63,62,61,33,30,40,32,39,32,40,62,33,60,31,60,33,59,60,31,37,59,31,35,59,37,58,59,35,57,58,35,36,57,35,31,38,37,62,60,61,55,61,60,59,55,60,58,55,59,57,55,58,36,55,57,34,55,36,56,55,34,54,53,52,49,52,53,51,52,49,50,51,49,5,50,49,34,5,49,11,5,34,9,11,34,10,9,34,15,10,34,16,10,15,48,15,34,12,15,48,14,12,48,47,48,34,46,47,34,45,46,34,44,45,34,43,44,34,42,43,34,41,42,34,40,41,34,30,41,40,39,40,34,32,39,34,38,32,34,37,38,34,35,37,34,36,35,34,33,30,31,32,31,30,29,28,27,26,25,23,24,23,25,19,23,24,17,23,19,22,23,17,20,22,17,21,20,17,19,18,17,16,15,13,12,13,15,14,13,12,5,11,4,9,4,11,0,4,9,10,0,9,8,7,6,5,6,7,3,6,5,4,3,5,0,3,4,1,3,0,2,1,0],-0.00022512674331665,-0.000104494392871857,0.999774873256683,0.999895513057709,0.03515625,0.109375,0.96484375,0.73046875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,9.05763244628906,28.0267505645752]},{"id":28116,"path":"Assets/Content/Sprites/Ingredients/cream.png","assetBundleId":-1,"data":["cream",6,28114,[0.08906251,0.075,0,0.5109375,0.43125,0],[0.43125,-0.328125,0,0.859375,0.2265625,0.421875,-0.35625,0,0.8515625,0.203125,0.4359375,-0.3421875,0,0.8632813,0.2148438,0.4125,-0.328125,0,0.84375,0.2265625,0.4078125,-0.35625,0,0.8398438,0.203125,0.403125,-0.3328125,0,0.8359375,0.2226563,0.403125,-0.346875,0,0.8359375,0.2109375,0.6,0.1640625,0,1,0.6367188,0.590625,0.1078125,0,0.9921875,0.5898438,0.6,0.1171875,0,1,0.5976563,0.58125,0.1640625,0,0.984375,0.6367188,0.5625,0.13125,0,0.96875,0.609375,0.5625,0.1078125,0,0.96875,0.5898438,0.4734375,-0.3328125,0,0.8945313,0.2226563,0.46875,-0.35625,0,0.890625,0.203125,0.4734375,-0.346875,0,0.8945313,0.2109375,0.4640625,-0.328125,0,0.8867188,0.2265625,0.4546875,-0.35625,0,0.8789063,0.203125,0.45,-0.328125,0,0.875,0.2265625,0.4453125,-0.3375,0,0.8710938,0.21875,0.4453125,-0.3515625,0,0.8710938,0.2070313,-0.159375,-0.309375,0,0.3671875,0.2421875,-0.1734375,-0.3421875,0,0.3554688,0.2148438,-0.1546875,-0.3234375,0,0.3710938,0.2304688,-0.3046875,-0.3421875,0,0.2460938,0.2148438,-0.3140625,-0.309375,0,0.2382813,0.2421875,-0.0609375,0.50625,0,0.4492188,0.921875,-0.253125,-0.2296875,0,0.2890625,0.3085938,-0.2625,-0.2203125,0,0.28125,0.3164063,-0.2765625,-0.225,0,0.2695313,0.3125,-0.2765625,-0.2484375,0,0.2695313,0.2929688,-0.384375,0.28125,0,0.1796875,0.734375,-0.384375,-0.05625,0,0.1796875,0.453125,-0.253125,-0.253125,0,0.2890625,0.2890625,-0.2671875,-0.2578125,0,0.2773438,0.2851563,0.196875,-0.3328125,0,0.6640625,0.2226563,0.2953125,-0.3140625,0,0.7460938,0.2382813,0.20625,-0.3140625,0,0.671875,0.2382813,0.196875,-0.3375,0,0.6640625,0.21875,0.375,-0.16875,0,0.8125,0.359375,0.3140625,-0.309375,0,0.7617188,0.2421875,0.3796875,-0.16875,0,0.8164063,0.359375,0.3703125,-0.1546875,0,0.8085938,0.3710938,0.346875,-0.3140625,0,0.7890625,0.2382813,0.3609375,-0.3515625,0,0.8007813,0.2070313,0.3609375,-0.3234375,0,0.8007813,0.2304688,0.196875,-0.3515625,0,0.6640625,0.2070313,0.009375,-0.31875,0,0.5078125,0.234375,0.0140625,-0.3515625,0,0.5117188,0.2070313,0.0140625,-0.3375,0,0.5117188,0.21875,-0.1875,-0.3515625,0,0.34375,0.2070313,-0.3375,-0.3421875,0,0.21875,0.2148438,-0.3421875,-0.309375,0,0.2148438,0.2421875,-0.3515625,-0.31875,0,0.2070313,0.234375,-0.3515625,-0.328125,0,0.2070313,0.2265625,-0.3890625,-0.3,0,0.1757813,0.25,-0.3984375,-0.328125,0,0.1679688,0.2265625,-0.384375,-0.3140625,0,0.1796875,0.2382813,-0.4078125,-0.328125,0,0.1601563,0.2265625,-0.4171875,-0.3,0,0.1523438,0.25,-0.421875,-0.3140625,0,0.1484375,0.2382813,-0.3796875,-0.1734375,0,0.1835938,0.3554688,-0.384375,-0.196875,0,0.1796875,0.3359375,-0.375,-0.1875,0,0.1875,0.34375,-0.39375,-0.1734375,0,0.171875,0.3554688,-0.3984375,-0.196875,0,0.1679688,0.3359375,-0.403125,-0.1828125,0,0.1640625,0.3476563,0.3796875,-0.1453125,0,0.8164063,0.3789063,0.3890625,-0.1453125,0,0.8242188,0.3789063,0.440625,0.253125,0,0.8671875,0.7109375,0.440625,-0.0375,0,0.8671875,0.46875,0.140625,-0.3515625,0,0.6171875,0.2070313,0.0984375,0.50625,0,0.5820313,0.921875,0.028125,-0.3515625,0,0.5234375,0.2070313,0.0140625,-0.3328125,0,0.5117188,0.2226563,0.421875,-0.1453125,0,0.8515625,0.3789063,0.4171875,-0.16875,0,0.8476563,0.359375,0.4265625,-0.159375,0,0.8554688,0.3671875],[41,68,76,75,76,68,77,76,75,26,72,47,74,47,72,73,74,72,71,73,72,69,71,72,35,71,69,38,71,35,37,35,69,36,37,69,40,36,69,42,40,69,67,42,69,68,67,69,70,68,69,42,67,39,41,39,67,68,41,67,66,64,65,62,65,64,61,62,64,63,62,61,30,29,34,28,34,29,33,34,28,27,33,28,60,59,58,55,58,59,56,58,55,57,56,55,54,53,51,52,51,53,25,51,52,24,51,25,24,22,50,48,50,22,23,48,22,47,48,23,26,47,23,49,48,47,46,38,44,36,44,38,43,44,36,45,44,43,42,39,40,41,40,39,38,35,36,37,36,35,30,34,25,21,25,34,33,21,34,27,21,33,32,31,25,26,25,31,29,25,26,30,25,29,28,29,26,27,28,26,21,27,26,23,21,26,25,21,24,22,24,21,23,22,21,20,19,17,18,17,19,16,17,18,14,17,16,13,14,16,15,14,13,12,11,8,10,8,11,7,8,10,9,8,7,6,5,4,3,4,5,1,4,3,0,1,3,2,1,0],-0.0000504404306411743,-0.00029735267162323,0.99994957447052,0.999702632427216,0.1484375,0.203125,1,0.921875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,38.0129127502441,52.0761222839355]},{"id":28182,"path":"Assets/Content/Sprites/Ingredients/lemon juice.png","assetBundleId":-1,"data":["lemon juice",6,28180,[-0.0234375,0,0,0.2578125,0.4125,0],[0.1828125,0.39375,0,0.6523438,0.828125,0.234375,-0.13125,0,0.6953125,0.390625,0.234375,0.2765625,0,0.6953125,0.7304688,0.1546875,-0.4125,0,0.6289063,0.15625,0.1171875,0.4125,0,0.5976563,0.84375,0.0515625,0.4125,0,0.5429688,0.84375,-0.196875,-0.4125,0,0.3359375,0.15625,-0.2390625,0.384375,0,0.3007813,0.8203125,-0.28125,0.1640625,0,0.265625,0.6367188,-0.28125,-0.2953125,0,0.265625,0.2539063],[9,8,6,7,6,8,5,6,7,3,6,5,4,3,5,0,3,4,1,3,0,2,1,0],-0.000297337770462036,-0.00029735267162323,0.99970269203186,0.999702632427216,0.265625,0.15625,0.6953125,0.84375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,68.0761184692383,40.0761222839355]},{"id":28198,"path":"Assets/Content/Sprites/Ingredients/tilapia fillets.png","assetBundleId":-1,"data":["tilapia fillets",6,28196,[0.002343744,-0.046875,0,0.5273438,0.2765625,0],[0.5296875,0.1265625,0,0.9414063,0.6054688,0.4359375,-0.3234375,0,0.8632813,0.2304688,0.5296875,-0.3046875,0,0.9414063,0.2460938,0.3609375,0.2296875,0,0.8007813,0.6914063,-0.0609375,0.2296875,0,0.4492188,0.6914063,-0.525,0.0421875,0,0.06249997,0.5351563,-0.525,-0.3234375,0,0.06249997,0.2304688],[6,5,1,4,1,5,3,1,4,0,1,3,2,1,0],-0.000297375023365021,-0.000200450420379639,0.999702632427216,0.99979954957962,0.0624999701976776,0.23046875,0.94140625,0.69140625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,16.0761203765869,59.0513153076172]},{"id":28244,"path":"Assets/Content/Sprites/Ingredients/cream cheese.png","assetBundleId":-1,"data":["cream cheese",6,28242,[-0.07499999,-0.0234375,0,0.4640625,0.4640625,0],[0.0234375,-0.4546875,0,0.5195313,0.1210938,0.0328125,-0.478125,0,0.5273438,0.1015625,0.0328125,-0.4640625,0,0.5273438,0.1132813,0.0234375,-0.4875,0,0.5195313,0.09375,0.0140625,-0.4546875,0,0.5117188,0.1210938,0.0140625,-0.4875,0,0.5117188,0.09375,0.0046875,-0.4640625,0,0.5039063,0.1132813,0.0046875,-0.478125,0,0.5039063,0.1015625,0.3890625,0.16875,0,0.8242188,0.640625,0.2625,-0.3375,0,0.71875,0.21875,0.3890625,-0.2578125,0,0.8242188,0.2851563,0.178125,0.3890625,0,0.6484375,0.8242188,-0.196875,0.3890625,0,0.3359375,0.8242188,-0.234375,-0.3375,0,0.3046875,0.21875,-0.39375,0.2296875,0,0.171875,0.6914063,-0.39375,-0.1640625,0,0.171875,0.3632813,-0.496875,-0.2296875,0,0.0859375,0.3085938,-0.5109375,-0.2671875,0,0.07421875,0.2773438,-0.496875,-0.2578125,0,0.0859375,0.2851563,-0.5296875,-0.2671875,0,0.05859375,0.2773438,-0.534375,-0.2296875,0,0.0546875,0.3085938,-0.5390625,-0.2390625,0,0.05078125,0.3007813,-0.5390625,-0.2625,0,0.05078125,0.28125,0.0375,0.440625,0,0.53125,0.8671875,0.046875,0.4171875,0,0.5390625,0.8476563,0.046875,0.43125,0,0.5390625,0.859375,0.0328125,0.4125,0,0.5273438,0.84375,0.0234375,0.4359375,0,0.5195313,0.8632813,0.0234375,0.421875,0,0.5195313,0.8515625],[28,27,26,23,26,27,24,26,23,25,24,23,22,21,19,20,19,21,16,19,20,17,19,16,18,17,16,15,14,13,12,13,14,9,13,12,11,9,12,8,9,11,10,9,8,7,6,5,4,5,6,3,5,4,0,3,4,1,3,0,2,1,0],-0.000297345221042633,-0.000297345221042633,0.999702632427216,0.999702632427216,0.05078125,0.09375,0.82421875,0.8671875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,13.0761203765869,24.0761203765869]},{"id":28296,"path":"Assets/Content/Sprites/Particles/cloud_blurry.png","assetBundleId":-1,"data":["cloud_blurry",6,28294,[0,0,0,2.56,2.52,0],[2.52,2.52,0,0.9921875,0.9921875,2.56,-1.92,0,1,0.125,2.56,2.48,0,1,0.984375,2.32,-2.52,0,0.953125,0.0078125,-1.68,2.52,0,0.171875,0.9921875,-1.92,-2.52,0,0.125,0.0078125,-2.56,2.24,0,0,0.9375,-2.56,-1.88,0,0,0.1328125],[7,6,5,4,5,6,3,5,4,0,3,4,1,3,0,2,1,0],0,-0.000208992511034012,1,0.999791026115417,0,0.0078125,1,0.9921875,0,0,0,0,[0,0,0,0],[-2.56,-2.56,2.56,2.56],25,128,128,128,128,64,64,0,1.02675104141235]},{"id":28348,"path":"Assets/Content/Sprites/Ingredients/Worcestershire sauce.png","assetBundleId":-1,"data":["Worcestershire sauce",6,28346,[0.028125,0.09375001,0,0.4125,0.4078125,0],[0.1265625,0.3703125,0,0.6054688,0.8085938,-0.2625,-0.2203125,0,0.28125,0.3164063,-0.253125,-0.2296875,0,0.2890625,0.3085938,-0.2671875,-0.2203125,0,0.2773438,0.3164063,-0.28125,-0.234375,0,0.265625,0.3046875,-0.3515625,-0.3140625,0,0.2070313,0.2382813,-0.28125,-0.2390625,0,0.265625,0.3007813,-0.384375,0.3703125,0,0.1796875,0.8085938,-0.384375,-0.20625,0,0.1796875,0.328125,-0.253125,-0.2578125,0,0.2890625,0.2851563,-0.2671875,-0.2625,0,0.2773438,0.28125,0.15,0.3703125,0,0.625,0.8085938,0.1359375,0.3609375,0,0.6132813,0.8007813,0.15,0.365625,0,0.625,0.8046875,0.140625,0.3890625,0,0.6171875,0.8242188,0.15,0.3796875,0,0.625,0.8164063,0.13125,0.3890625,0,0.609375,0.8242188,0.121875,0.3796875,0,0.6015625,0.8164063,0.121875,0.375,0,0.6015625,0.8125,0.39375,0.3703125,0,0.828125,0.8085938,0.440625,-0.2625,0,0.8671875,0.28125,0.440625,0.24375,0,0.8671875,0.703125,0.3421875,-0.3140625,0,0.7851563,0.2382813,0.01875,0.5015625,0,0.515625,0.9179688,0.0234375,0.4546875,0,0.5195313,0.8789063,0.0234375,0.496875,0,0.5195313,0.9140625,-0.01875,0.5015625,0,0.484375,0.9179688,-0.046875,0.403125,0,0.4609375,0.8359375,-0.075,0.440625,0,0.4375,0.8671875,-0.075,0.403125,0,0.4375,0.8359375],[29,28,27,26,27,28,24,27,26,23,24,26,25,24,23,6,10,5,22,5,10,9,22,10,2,22,9,0,22,2,12,22,0,13,22,12,11,22,13,19,22,11,20,22,19,21,20,19,18,17,0,16,0,17,11,0,16,14,11,16,15,11,14,0,11,12,13,12,11,6,4,10,3,10,4,9,10,3,1,9,3,2,9,1,8,7,5,0,5,7,4,5,0,6,5,4,3,4,0,1,3,0,2,1,0],-0.000104501843452454,-0.00029735267162323,0.999895513057709,0.999702632427216,0.1796875,0.23828125,0.8671875,0.91796875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,46.0267524719238,61.0761222839355]},{"id":28580,"path":"Assets/Content/Sprites/Ingredients/marinara sauce.png","assetBundleId":-1,"data":["marinara sauce",6,28578,[0.028125,0.09375001,0,0.4125,0.4078125,0],[-0.253125,-0.2578125,0,0.2890625,0.2851563,-0.2390625,-0.3140625,0,0.3007813,0.2382813,-0.253125,-0.2296875,0,0.2890625,0.3085938,-0.2671875,-0.2625,0,0.2773438,0.28125,-0.28125,-0.2390625,0,0.265625,0.3007813,-0.384375,-0.0609375,0,0.1796875,0.4492188,-0.384375,0.346875,0,0.1796875,0.7890625,-0.2625,-0.2203125,0,0.28125,0.3164063,-0.2671875,-0.2203125,0,0.2773438,0.3164063,-0.28125,-0.234375,0,0.265625,0.3046875,0.15,0.3703125,0,0.625,0.8085938,0.1359375,0.3609375,0,0.6132813,0.8007813,0.15,0.365625,0,0.625,0.8046875,0.1265625,0.3703125,0,0.6054688,0.8085938,0.140625,0.3890625,0,0.6171875,0.8242188,0.15,0.3796875,0,0.625,0.8164063,0.13125,0.3890625,0,0.609375,0.8242188,0.121875,0.3796875,0,0.6015625,0.8164063,0.121875,0.375,0,0.6015625,0.8125,0.3375,0.3703125,0,0.78125,0.8085938,0.440625,-0.225,0,0.8671875,0.3125,0.440625,0.20625,0,0.8671875,0.671875,0.2953125,-0.3140625,0,0.7460938,0.2382813,-0.2671875,0.3703125,0,0.2773438,0.8085938,0.01875,0.5015625,0,0.515625,0.9179688,0.0234375,0.4546875,0,0.5195313,0.8789063,0.0234375,0.496875,0,0.5195313,0.9140625,-0.01875,0.5015625,0,0.484375,0.9179688,-0.046875,0.403125,0,0.4609375,0.8359375,-0.075,0.440625,0,0.4375,0.8671875,-0.075,0.403125,0,0.4375,0.8359375],[30,29,28,27,28,29,25,28,27,24,25,27,26,25,24,23,9,6,4,6,9,8,9,23,7,8,23,13,7,23,2,7,13,1,2,13,22,1,13,11,22,13,12,22,11,10,22,12,19,22,10,20,22,19,21,20,19,18,17,13,16,13,17,10,13,16,14,10,16,15,10,14,13,10,11,12,11,10,4,9,3,8,3,9,0,3,8,7,0,8,2,0,7,6,4,5,1,5,4,3,1,4,0,1,3,2,1,0],-0.000104501843452454,-0.00029735267162323,0.999895513057709,0.999702632427216,0.1796875,0.23828125,0.8671875,0.91796875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,46.0267524719238,61.0761222839355]},{"id":28452,"path":"Assets/Content/Sprites/Ingredients/salt.png","assetBundleId":-1,"data":["salt",6,28450,[0.0234375,0.02109376,0,0.3609375,0.4148438,0],[0.3046875,0.290625,0,0.7539063,0.7421875,0.328125,0.1875,0,0.7734375,0.65625,0.3375,0.1921875,0,0.78125,0.6601563,0.2953125,0.1875,0,0.7460938,0.65625,0.2765625,0.2953125,0,0.7304688,0.7460938,0.2109375,0.2953125,0,0.6757813,0.7460938,0.2109375,0.20625,0,0.6757813,0.671875,0.2015625,0.2859375,0,0.6679688,0.7382813,0.2015625,0.2296875,0,0.6679688,0.6914063,0.35625,0.28125,0,0.796875,0.734375,0.365625,0.2203125,0,0.8046875,0.6835938,0.365625,0.2578125,0,0.8046875,0.7148438,0.384375,-0.39375,0,0.8203125,0.171875,0.384375,0.0421875,0,0.8203125,0.5351563,0.046875,0.4359375,0,0.5390625,0.8632813,-0.1359375,0.4359375,0,0.3867188,0.8632813,-0.271875,-0.39375,0,0.2734375,0.171875,-0.3234375,0.31875,0,0.2304688,0.765625,-0.3375,0.225,0,0.21875,0.6875,-0.3375,-0.31875,0,0.21875,0.234375,0.28125,0.3609375,0,0.734375,0.8007813],[20,5,14,7,14,5,8,14,7,4,5,20,0,4,20,19,18,16,17,16,18,15,16,17,12,16,15,14,12,15,8,12,14,6,12,8,3,12,6,1,12,3,2,12,1,13,12,2,0,9,2,10,2,9,11,10,9,8,7,6,5,6,7,3,6,5,4,3,5,0,3,4,1,3,0,2,1,0],-0.000104501843452454,-0.000167608261108398,0.999895513057709,0.999832391738892,0.21875,0.171875,0.8203125,0.86328125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,56.0267524719238,44.0429077148438]},{"id":28270,"path":"Assets/Content/Sprites/Ingredients/peas.png","assetBundleId":-1,"data":["peas",6,28268,[0.05390626,0.0421875,0,0.4476563,0.31875,0],[0.5015625,0.09375,0,0.9179688,0.578125,0.459375,-0.1875,0,0.8828125,0.34375,0.5015625,-0.1125,0,0.9179688,0.40625,0.290625,-0.2578125,0,0.7421875,0.2851563,0.2765625,-0.2765625,0,0.7304688,0.2695313,0.0984375,0.3609375,0,0.5820313,0.8007813,-0.1828125,-0.2765625,0,0.3476563,0.2695313,-0.3046875,0.3609375,0,0.2460938,0.8007813,-0.39375,0.3234375,0,0.171875,0.7695313,-0.39375,0.0375,0,0.171875,0.53125],[9,8,6,7,6,8,5,6,7,4,6,5,0,4,5,3,4,0,1,3,0,2,1,0],-0.000200450420379639,-0.000297337770462036,0.99979954957962,0.99970269203186,0.171875,0.26953125,0.91796875,0.80078125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,44.0513153076172,69.0761184692383]},{"id":28786,"path":"Assets/Content/Sprites/Ingredients/honey.png","assetBundleId":-1,"data":["honey",6,28784,[-0.01640625,0.007031262,0,0.4101563,0.4054688,0],[0.24375,0.4125,0,0.703125,0.84375,0.39375,-0.2203125,0,0.828125,0.3164063,0.39375,0.1921875,0,0.828125,0.6601563,0.1875,-0.3984375,0,0.65625,0.1679688,-0.1828125,-0.3984375,0,0.3476563,0.1679688,-0.28125,0.4125,0,0.265625,0.84375,-0.4078125,-0.2015625,0,0.1601563,0.3320313,-0.4265625,0.1875,0,0.1445313,0.65625,-0.4265625,-0.05625,0,0.1445313,0.453125],[8,7,6,5,6,7,4,6,5,0,4,5,3,4,0,1,3,0,2,1,0],-0.0000233203172683716,-0.00029735267162323,0.999976694583893,0.999702632427216,0.14453125,0.16796875,0.828125,0.84375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,37.0059700012207,43.0761222839355]},{"id":28600,"path":"Assets/Content/Sprites/Ingredients/cumin.png","assetBundleId":-1,"data":["cumin",6,28598,[0,0.06093751,0,0.6,0.4125,0],[-0.50625,0.0421875,0,0.078125,0.5351563,-0.5109375,-0.0046875,0,0.07421875,0.4960938,-0.50625,0.009375,0,0.078125,0.5078125,-0.5203125,0.0421875,0,0.06640628,0.5351563,-0.5390625,-0.0046875,0,0.05078125,0.4960938,-0.5484375,0.0234375,0,0.04296872,0.5195313,-0.5484375,-0.0046875,0,0.04296872,0.4960938,-0.45,-0.084375,0,0.125,0.4296875,-0.4828125,-0.1078125,0,0.09765625,0.4101563,-0.45,-0.1078125,0,0.125,0.4101563,-0.553125,-0.0046875,0,0.0390625,0.4960938,-0.553125,-0.075,0,0.0390625,0.4375,-0.5671875,-0.328125,0,0.02734378,0.2265625,-0.5765625,-0.3515625,0,0.01953125,0.2070313,-0.5625,-0.3421875,0,0.03125,0.2148438,-0.590625,-0.3234375,0,0.00781253,0.2304688,-0.5953125,-0.346875,0,0.00390622,0.2109375,-0.6,-0.3328125,0,0,0.2226563,0.1828125,-0.28125,0,0.6523438,0.265625,0.2015625,-0.309375,0,0.6679688,0.2421875,0.2015625,-0.28125,0,0.6679688,0.265625,0.178125,-0.309375,0,0.6484375,0.2421875,0.1734375,-0.290625,0,0.6445313,0.2578125,0.1734375,-0.3,0,0.6445313,0.25,0.3046875,0.346875,0,0.7539063,0.7890625,0.309375,0.2109375,0,0.7578125,0.6757813,0.3234375,0.2203125,0,0.7695313,0.6835938,0.2953125,0.215625,0,0.7460938,0.6796875,0.290625,0.215625,0,0.7421875,0.6796875,0.290625,0.215625,0,0.7421875,0.6796875,0.2671875,0.2203125,0,0.7226563,0.6835938,0.2578125,0.225,0,0.7148438,0.6875,0.24375,0.2765625,0,0.703125,0.7304688,0.2484375,0.178125,0,0.7070313,0.6484375,0.2390625,0.290625,0,0.6992188,0.7421875,0.234375,0.440625,0,0.6953125,0.8671875,0.225,0.290625,0,0.6875,0.7421875,0.215625,0.28125,0,0.6796875,0.734375,0.1875,0.45,0,0.65625,0.875,0.3,-0.1453125,0,0.75,0.3789063,0.5296875,-0.0796875,0,0.9414063,0.4335938,0.5296875,-0.0375,0,0.9414063,0.46875,0.28125,-0.24375,0,0.734375,0.296875,0.1640625,-0.196875,0,0.6367188,0.3359375,0.1171875,-0.2015625,0,0.5976563,0.3320313,0.0421875,-0.159375,0,0.5351563,0.3671875,0.0140625,-0.20625,0,0.5117188,0.328125,-0.0375,-0.159375,0,0.46875,0.3671875,-0.0890625,-0.178125,0,0.4257813,0.3515625,-0.0890625,-0.20625,0,0.4257813,0.328125,-0.0984375,-0.1875,0,0.4179688,0.34375,-0.0984375,-0.196875,0,0.4179688,0.3359375,0.515625,0.0234375,0,0.9296875,0.5195313,0.5296875,0.009375,0,0.9414063,0.5078125,0.4640625,0.0234375,0,0.8867188,0.5195313,0.571875,-0.01875,0,0.9765625,0.484375,0.5625,-0.01875,0,0.96875,0.484375,0.5625,-0.0234375,0,0.96875,0.4804688,0.6,0.0328125,0,1,0.5273438,0.6,-0.0046875,0,1,0.4960938,0.5671875,0.0515625,0,0.9726563,0.5429688,0.365625,0.1171875,0,0.8046875,0.5976563,0.3046875,0.2109375,0,0.7539063,0.6757813,0.234375,0.2671875,0,0.6953125,0.7226563,0.2203125,0.2671875,0,0.6835938,0.7226563,0.1359375,0.2859375,0,0.6132813,0.7382813,0.1359375,0.271875,0,0.6132813,0.7265625,0.121875,0.2671875,0,0.6015625,0.7226563,0.1078125,0.28125,0,0.5898438,0.734375,-0.0234375,0.4734375,0,0.4804688,0.8945313,-0.1359375,0.2578125,0,0.3867188,0.7148438,-0.1546875,0.4125,0,0.3710938,0.84375,-0.1875,0.4265625,0,0.34375,0.8554688,-0.2203125,0.4734375,0,0.3164063,0.8945313,0.590625,-0.0328125,0,0.9921875,0.4726563,0.5859375,-0.0421875,0,0.9882813,0.4648438,0.590625,-0.0375,0,0.9921875,0.46875,0.58125,-0.046875,0,0.984375,0.4609375,0.5765625,-0.01875,0,0.9804688,0.484375,0.571875,-0.046875,0,0.9765625,0.4609375,0.5578125,-0.0328125,0,0.9648438,0.4726563,0.271875,0.2015625,0,0.7265625,0.6679688,0.271875,0.215625,0,0.7265625,0.6796875,0.253125,-0.2625,0,0.7109375,0.28125,0.2484375,-0.290625,0,0.7070313,0.2578125,0.253125,-0.2859375,0,0.7109375,0.2617188,0.234375,-0.290625,0,0.6953125,0.2578125,0.2296875,-0.2625,0,0.6914063,0.28125,0.225,-0.271875,0,0.6875,0.2734375,0.225,-0.2859375,0,0.6875,0.2617188,-0.0328125,-0.2296875,0,0.4726563,0.3085938,-0.0421875,-0.24375,0,0.4648438,0.296875,-0.0328125,-0.234375,0,0.4726563,0.3046875,-0.046875,-0.215625,0,0.4609375,0.3203125,-0.05625,-0.215625,0,0.453125,0.3203125,-0.0609375,-0.24375,0,0.4492188,0.296875,-0.0703125,-0.2296875,0,0.4414063,0.3085938,-0.0703125,-0.234375,0,0.4414063,0.3046875,-0.375,-0.1171875,0,0.1875,0.4023438,-0.3703125,-0.159375,0,0.1914063,0.3671875,-0.16875,-0.159375,0,0.359375,0.3671875,-0.3984375,-0.1171875,0,0.1679688,0.4023438,-0.4265625,0.0515625,0,0.1445313,0.5429688,-0.3984375,0.0703125,0,0.1679688,0.5585938,-0.4265625,-0.0703125,0,0.1445313,0.4414063,-0.43125,-0.0984375,0,0.140625,0.4179688,-0.4171875,-0.1171875,0,0.1523438,0.4023438,-0.4171875,-0.103125,0,0.1523438,0.4140625,-0.43125,-0.121875,0,0.140625,0.3984375,-0.440625,-0.1078125,0,0.1328125,0.4101563,0.6,-0.0375,0,1,0.46875,0.5953125,-0.0703125,0,0.9960938,0.4414063,0.6,-0.0703125,0,1,0.4414063,0.5859375,-0.0609375,0,0.9882813,0.4492188,-0.5484375,0.0703125,0,0.04296872,0.5585938,-0.5625,0.028125,0,0.03125,0.5234375,-0.54375,0.05625,0,0.04687503,0.546875,-0.590625,0.0703125,0,0.00781253,0.5585938,-0.590625,0.0234375,0,0.00781253,0.5195313,-0.6,0.05625,0,0,0.546875,-0.6,0.0234375,0,0,0.5195313,0.1265625,0.2953125,0,0.6054688,0.7460938,0.1171875,0.2953125,0,0.5976563,0.7460938,0.1078125,0.2859375,0,0.5898438,0.7382813,0.159375,-0.2015625,0,0.6328125,0.3320313,0.05625,-0.20625,0,0.546875,0.328125,0.0375,-0.24375,0,0.53125,0.296875,-0.16875,0.3375,0,0.359375,0.78125,-0.1921875,0.2390625,0,0.3398438,0.6992188,-0.1640625,0.2484375,0,0.3632813,0.7070313,-0.196875,0.234375,0,0.3359375,0.6953125,-0.196875,0.1921875,0,0.3359375,0.6601563,-0.196875,0.2203125,0,0.3359375,0.6835938,-0.24375,0.3328125,0,0.296875,0.7773438,-0.215625,0.3890625,0,0.3203125,0.8242188,-0.2109375,0.3375,0,0.3242188,0.78125,-0.2109375,0.384375,0,0.3242188,0.8203125,-0.234375,0.3375,0,0.3046875,0.78125,-0.2390625,0.3890625,0,0.3007813,0.8242188,-0.24375,0.384375,0,0.296875,0.8203125,-0.24375,0.3515625,0,0.296875,0.7929688,-0.1640625,0.3703125,0,0.3632813,0.8085938,-0.159375,0.3421875,0,0.3671875,0.7851563,-0.159375,0.35625,0,0.3671875,0.796875,-0.1828125,0.3375,0,0.3476563,0.78125,-0.196875,0.3703125,0,0.3359375,0.8085938,-0.196875,0.346875,0,0.3359375,0.7890625,-0.1828125,0.234375,0,0.3476563,0.6953125,-0.4078125,0.0796875,0,0.1601563,0.5664063,-0.4171875,0.09375,0,0.1523438,0.578125,-0.1546875,0.3984375,0,0.3710938,0.8320313,-0.1546875,0.3890625,0,0.3710938,0.8242188,-0.1546875,0.3,0,0.3710938,0.75,-0.159375,0.3703125,0,0.3671875,0.8085938,-0.1734375,0.4171875,0,0.3554688,0.8476563,-0.24375,0.4125,0,0.296875,0.84375,-0.0984375,-0.1734375,0,0.4179688,0.3554688,-0.0984375,-0.2390625,0,0.4179688,0.3007813,-0.103125,-0.1734375,0,0.4140625,0.3554688,-0.103125,-0.24375,0,0.4140625,0.296875,-0.3234375,-0.24375,0,0.2304688,0.296875,-0.4125,-0.1171875,0,0.15625,0.4023438,-0.4125,-0.16875,0,0.15625,0.359375],[162,161,160,101,160,161,99,160,101,100,160,99,159,160,100,158,159,100,157,159,158,156,157,158,51,157,156,50,51,156,155,73,153,72,153,73,154,153,72,150,153,154,151,153,150,152,151,70,150,70,151,71,70,150,149,133,148,103,148,133,101,103,133,98,101,133,100,98,133,131,100,133,132,100,131,147,100,132,70,100,147,47,100,70,146,145,144,141,144,145,127,144,141,142,127,141,143,142,141,140,139,137,138,137,139,134,137,138,135,137,134,136,135,134,127,130,133,131,133,130,132,131,130,128,130,127,129,128,127,37,36,64,63,64,36,34,63,36,32,63,34,68,123,67,122,67,123,121,67,122,66,67,121,65,66,121,126,125,42,124,42,125,43,42,124,38,123,69,68,69,123,122,123,38,121,122,38,65,121,38,120,119,118,117,118,119,115,118,117,114,115,117,116,115,114,113,75,111,110,111,75,112,111,110,109,105,108,106,108,105,107,106,105,104,102,101,103,101,102,101,98,99,100,99,98,97,96,95,94,95,96,91,95,94,93,91,94,90,91,93,92,91,90,89,88,86,87,86,88,83,86,87,84,86,83,85,84,83,33,31,81,82,81,31,29,28,27,41,53,57,80,57,79,55,79,57,78,79,55,77,79,78,74,77,78,75,77,74,76,75,74,73,69,72,71,72,69,70,71,69,47,70,69,68,47,69,67,47,68,54,47,67,33,54,67,66,33,67,65,33,66,37,33,65,38,37,65,64,33,37,63,33,64,32,33,63,61,54,33,29,61,33,27,61,29,62,61,27,60,54,61,52,54,60,53,52,60,57,53,60,56,57,60,55,56,60,58,55,60,59,55,58,57,56,55,47,54,45,39,45,54,41,39,54,52,41,54,53,41,52,51,50,49,48,49,50,46,49,48,47,46,48,45,46,47,44,46,45,39,44,45,43,44,39,42,43,39,40,42,39,41,40,39,38,35,37,36,37,35,34,36,35,24,34,35,32,34,24,31,32,24,33,32,31,30,31,24,29,30,24,28,29,24,27,28,24,25,27,24,26,25,24,23,22,21,18,21,22,19,21,18,20,19,18,17,15,16,13,16,15,12,13,15,14,13,12,11,10,8,6,8,10,4,8,6,7,8,4,9,8,7,6,5,4,3,4,5,1,4,3,0,1,3,2,1,0],0,-0.0000504404306411743,1,0.99994957447052,0,0.20703125,1,0.89453125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,0,53.0129127502441]},{"id":28620,"path":"Assets/Content/Sprites/Ingredients/turmeric.png","assetBundleId":-1,"data":["turmeric",6,28618,[-0.002343744,-0.01171875,0,0.4054688,0.2835937,0],[0.403125,0.2109375,0,0.8359375,0.6757813,0.3421875,-0.2953125,0,0.7851563,0.2539063,0.403125,-0.103125,0,0.8359375,0.4140625,0.328125,0.271875,0,0.7734375,0.7265625,-0.05625,0.271875,0,0.453125,0.7265625,-0.15,-0.2953125,0,0.375,0.2539063,-0.2578125,0.1875,0,0.2851563,0.65625,-0.403125,0.075,0,0.1640625,0.5625,-0.4078125,0.065625,0,0.1601563,0.5546875,-0.4078125,-0.121875,0,0.1601563,0.3984375],[9,8,5,7,5,8,6,5,7,4,5,6,1,5,4,3,1,4,0,1,3,2,1,0],-0.000104501843452454,-0.000297337770462036,0.999895513057709,0.99970269203186,0.16015625,0.25390625,0.8359375,0.7265625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,41.0267524719238,65.0761184692383]},{"id":28538,"path":"Assets/Content/Sprites/Ingredients/pepper.png","assetBundleId":-1,"data":["pepper",6,28536,[0,0,0,0.6,0.440625,0],[-0.3140625,-0.3609375,0,0.2382813,0.1992188,-0.35625,-0.3,0,0.203125,0.25,-0.3140625,-0.384375,0,0.2382813,0.1796875,-0.0796875,-0.309375,0,0.4335938,0.2421875,-0.0890625,-0.3234375,0,0.4257813,0.2304688,-0.0796875,-0.3140625,0,0.4335938,0.2382813,-0.0984375,-0.3234375,0,0.4179688,0.2304688,-0.1078125,-0.3140625,0,0.4101563,0.2382813,-0.0890625,-0.2953125,0,0.4257813,0.2539063,-0.0796875,-0.3046875,0,0.4335938,0.2460938,-0.0984375,-0.2953125,0,0.4179688,0.2539063,-0.1078125,-0.3046875,0,0.4101563,0.2460938,-0.1078125,-0.3140625,0,0.4101563,0.2382813,0.5953125,-0.234375,0,0.9960938,0.3046875,0.6,-0.35625,0,1,0.203125,0.6,-0.234375,0,1,0.3046875,0.3703125,-0.440625,0,0.8085938,0.1328125,-0.178125,-0.440625,0,0.3515625,0.1328125,-0.3046875,-0.375,0,0.2460938,0.1875,-0.309375,-0.3375,0,0.2421875,0.21875,-0.3140625,-0.3375,0,0.2382813,0.21875,-0.3046875,-0.4078125,0,0.2460938,0.1601563,-0.3046875,-0.3890625,0,0.2460938,0.1757813,-0.384375,-0.4078125,0,0.1796875,0.1601563,-0.43125,-0.290625,0,0.140625,0.2578125,-0.4875,-0.290625,0,0.09375,0.2578125,-0.4921875,-0.3796875,0,0.08984375,0.1835938,-0.5109375,-0.3,0,0.07421875,0.25,-0.5109375,-0.3375,0,0.07421875,0.21875,-0.4171875,-0.234375,0,0.1523438,0.3046875,-0.421875,-0.2578125,0,0.1484375,0.2851563,-0.4171875,-0.253125,0,0.1523438,0.2890625,-0.440625,-0.2203125,0,0.1328125,0.3164063,-0.440625,-0.2578125,0,0.1328125,0.2851563,-0.46875,-0.253125,0,0.109375,0.2890625,-0.4734375,-0.2203125,0,0.1054688,0.3164063,-0.478125,-0.234375,0,0.1015625,0.3046875,-0.553125,-0.09375,0,0.0390625,0.421875,-0.553125,-0.121875,0,0.0390625,0.3984375,-0.5484375,-0.1078125,0,0.04296872,0.4101563,-0.571875,-0.09375,0,0.02343747,0.421875,-0.571875,-0.13125,0,0.02343747,0.390625,-0.5859375,-0.13125,0,0.01171875,0.390625,-0.590625,-0.1171875,0,0.00781253,0.4023438,-0.590625,-0.1265625,0,0.00781253,0.3945313,-0.5578125,0.046875,0,0.03515625,0.5390625,-0.5484375,0.028125,0,0.04296872,0.5234375,-0.5484375,0.0375,0,0.04296872,0.53125,-0.5625,0.046875,0,0.03125,0.5390625,-0.5765625,0,0,0.01953125,0.5,-0.6,0.01875,0,0,0.515625,-0.6,-0.009375,0,0,0.4921875,0.346875,0.1078125,0,0.7890625,0.5898438,0.3234375,0.1265625,0,0.7695313,0.6054688,0.3421875,0.103125,0,0.7851563,0.5859375,0.140625,0.346875,0,0.6171875,0.7890625,0.1359375,0.253125,0,0.6132813,0.7109375,0.140625,0.3328125,0,0.6171875,0.7773438,0.121875,0.2671875,0,0.6015625,0.7226563,0.1125,0.2671875,0,0.59375,0.7226563,-0.065625,0.440625,0,0.4453125,0.8671875,0.1078125,0.253125,0,0.5898438,0.7109375,0.1359375,0.24375,0,0.6132813,0.703125,0.121875,0.2390625,0,0.6015625,0.6992188,0.1640625,0.2671875,0,0.6367188,0.7226563,0.1546875,0.2625,0,0.6289063,0.71875,0.1640625,0.1921875,0,0.6367188,0.6601563,0.1640625,0.31875,0,0.6367188,0.765625,0.159375,0.290625,0,0.6328125,0.7421875,0.1640625,0.2859375,0,0.6367188,0.7382813,0.15,0.3328125,0,0.625,0.7773438,0.1453125,0.2859375,0,0.6210938,0.7382813,0.1453125,0.271875,0,0.6210938,0.7265625,0.1640625,0.3234375,0,0.6367188,0.7695313,0.1453125,0.346875,0,0.6210938,0.7890625,0.178125,0.4078125,0,0.6484375,0.8398438,0.140625,0.3515625,0,0.6171875,0.7929688,0.2625,0.225,0,0.71875,0.6875,0.24375,0.1875,0,0.703125,0.65625,0.2625,0.196875,0,0.71875,0.6640625,0.2296875,0.2015625,0,0.6914063,0.6679688,0.2296875,0.1921875,0,0.6914063,0.6601563,0.3140625,0.2203125,0,0.7617188,0.6835938,0.271875,0.2203125,0,0.7265625,0.6835938,0.3140625,0.2203125,0,0.7617188,0.6835938,0.2671875,0.225,0,0.7226563,0.6875,0.31875,0.2671875,0,0.765625,0.7226563,0.31875,0.225,0,0.765625,0.6875,0.3,0.3421875,0,0.75,0.7851563,0.2578125,0.28125,0,0.7148438,0.734375,0.24375,0.4125,0,0.703125,0.84375,0.24375,0.2859375,0,0.703125,0.7382813,0.234375,0.2765625,0,0.6953125,0.7304688,0.2109375,0.4125,0,0.6757813,0.84375,0.346875,0.084375,0,0.7890625,0.5703125,0.3703125,0.084375,0,0.8085938,0.5703125,0.39375,0.1078125,0,0.828125,0.5898438,0.39375,0.084375,0,0.828125,0.5703125,0.3984375,0.09375,0,0.8320313,0.578125,0.3515625,0.1125,0,0.7929688,0.59375,0.5578125,0.065625,0,0.9648438,0.5546875,0.54375,0.0421875,0,0.953125,0.5351563,0.5578125,0.046875,0,0.9648438,0.5390625,0.5390625,0.0421875,0,0.9492188,0.5351563,0.50625,0.0890625,0,0.921875,0.5742188,0.4875,0.05625,0,0.90625,0.546875,0.4828125,0.0890625,0,0.9023438,0.5742188,0.4828125,0.0703125,0,0.9023438,0.5585938,0.3984375,-0.1921875,0,0.8320313,0.3398438,0.3984375,0.0609375,0,0.8320313,0.5507813,0.2953125,0.121875,0,0.7460938,0.6015625,0.28125,0.121875,0,0.734375,0.6015625,0.2765625,0.121875,0,0.7304688,0.6015625,0.2484375,0.1265625,0,0.7070313,0.6054688,0.24375,0.1828125,0,0.703125,0.6523438,-0.0796875,0.3515625,0,0.4335938,0.7929688,-0.0796875,0.328125,0,0.4335938,0.7734375,-0.084375,0.328125,0,0.4296875,0.7734375,-0.084375,0.3234375,0,0.4296875,0.7695313,-0.1171875,0.31875,0,0.4023438,0.765625,-0.13125,0.3140625,0,0.390625,0.7617188,-0.140625,0.3046875,0,0.3828125,0.7539063,-0.4734375,-0.1921875,0,0.1054688,0.3398438,-0.478125,0.103125,0,0.1015625,0.5859375,-0.534375,0.0609375,0,0.0546875,0.5507813,-0.534375,0.046875,0,0.0546875,0.5390625,0.31875,0.2203125,0,0.765625,0.6835938,0.309375,0.1453125,0,0.7578125,0.6210938,0.290625,0.1265625,0,0.7421875,0.6054688,0.16875,0.2671875,0,0.640625,0.7226563,0.16875,0.28125,0,0.640625,0.734375,0.2578125,0.2671875,0,0.7148438,0.7226563,0.24375,0.2625,0,0.703125,0.71875,-0.13125,0.3703125,0,0.390625,0.8085938,-0.121875,0.3328125,0,0.3984375,0.7773438,-0.1265625,0.3609375,0,0.3945313,0.8007813,-0.13125,0.3234375,0,0.390625,0.7695313,-0.140625,0.3234375,0,0.3828125,0.7695313,-0.1453125,0.3703125,0,0.3789063,0.8085938,-0.1546875,0.365625,0,0.3710938,0.8046875,-0.1546875,0.3375,0,0.3710938,0.78125,-0.084375,0.3515625,0,0.4296875,0.7929688,-0.0890625,0.3234375,0,0.4257813,0.7695313,-0.1078125,0.3515625,0,0.4101563,0.7929688,-0.1078125,0.3234375,0,0.4101563,0.7695313,-0.1125,0.3421875,0,0.40625,0.7851563,-0.1125,0.3375,0,0.40625,0.78125,-0.084375,0.35625,0,0.4296875,0.796875,-0.1078125,0.365625,0,0.4101563,0.8046875,-0.140625,0.440625,0,0.3828125,0.8671875,-0.140625,0.375,0,0.3828125,0.8125,-0.15,0.403125,0,0.375,0.8359375],[117,141,116,115,116,141,141,147,115,151,149,150,148,150,149,60,148,149,147,148,60,115,147,60,146,145,144,143,144,145,142,144,143,141,142,143,117,142,141,140,139,137,138,137,139,133,137,138,136,137,133,134,136,133,135,134,133,92,91,132,131,132,91,89,131,91,67,73,85,92,85,73,75,92,73,93,92,75,132,85,92,131,85,132,89,85,131,112,113,111,64,69,129,130,129,69,72,71,65,68,65,71,64,65,68,69,64,68,114,79,113,111,113,79,77,111,79,85,111,77,83,111,85,84,111,83,128,111,84,127,128,84,126,127,84,82,126,84,125,124,122,123,122,124,121,122,123,108,122,121,120,108,121,119,108,120,118,108,119,117,108,118,116,108,117,115,108,116,60,108,115,61,108,60,63,108,61,66,108,63,62,66,63,56,66,62,72,66,56,57,72,56,65,66,72,113,108,66,114,113,66,112,108,113,111,108,112,110,108,111,53,108,110,54,108,53,94,108,54,95,108,94,109,108,95,107,106,105,104,105,106,103,105,104,100,103,104,101,103,100,102,101,100,52,99,95,96,95,99,97,95,96,98,97,96,54,52,94,95,94,52,93,90,92,91,92,90,89,91,90,88,89,90,85,89,88,82,85,88,86,82,88,87,82,86,85,82,83,84,83,82,81,80,78,77,78,80,79,78,77,55,76,74,75,74,76,73,74,75,57,55,70,74,70,55,73,70,74,67,70,73,70,71,57,72,57,71,68,71,70,67,68,70,69,68,67,66,65,64,61,59,63,58,63,59,62,63,58,56,62,58,55,59,60,61,60,59,58,59,55,56,58,55,57,56,55,54,53,52,51,50,49,48,49,50,46,49,48,45,46,48,47,46,45,44,43,42,40,42,43,41,42,40,38,41,40,37,38,40,39,38,37,36,35,34,32,34,35,33,34,32,30,33,32,29,30,32,31,30,29,22,18,17,2,0,22,18,22,0,28,27,26,25,26,27,23,26,25,24,23,25,1,23,24,21,23,1,2,21,1,22,21,2,0,20,18,19,18,20,7,18,19,17,18,7,6,17,7,16,17,6,4,16,6,5,16,4,3,16,5,13,16,3,14,16,13,15,14,13,12,11,7,10,7,11,3,7,10,8,3,10,9,3,8,7,3,6,4,6,3,5,4,3,2,1,0],0,-0.0000504404306411743,1,0.99994957447052,0,0.1328125,1,0.8671875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,0,34.0129127502441]},{"id":28414,"path":"Assets/Content/Sprites/Ingredients/pinto bean.png","assetBundleId":-1,"data":["pinto bean",6,28412,[-0.002343744,-0.02578124,0,0.5976563,0.5273438,0],[0.24375,-0.46875,0,0.703125,0.109375,0.2484375,-0.5390625,0,0.7070313,0.05078125,0.2484375,-0.478125,0,0.7070313,0.1015625,0.1875,-0.553125,0,0.65625,0.0390625,0.0515625,-0.553125,0,0.5429688,0.0390625,0.0421875,-0.5484375,0,0.5351563,0.04296872,-0.009375,-0.534375,0,0.4921875,0.0546875,-0.0140625,-0.525,0,0.4882813,0.06249997,-0.1453125,-0.54375,0,0.3789063,0.04687503,-0.0140625,-0.5484375,0,0.4882813,0.04296872,-0.3328125,-0.4265625,0,0.2226563,0.1445313,-0.3375,-0.525,0,0.21875,0.06249997,-0.3890625,-0.4921875,0,0.1757813,0.08984375,-0.403125,-0.4265625,0,0.1640625,0.1445313,-0.4125,-0.440625,0,0.15625,0.1328125,-0.4125,-0.4640625,0,0.15625,0.1132813,-0.009375,-0.5390625,0,0.4921875,0.05078125,0.534375,-0.4265625,0,0.9453125,0.1445313,0.54375,-0.4875,0,0.953125,0.09375,0.54375,-0.45,0,0.953125,0.125,0.4828125,-0.4265625,0,0.9023438,0.1445313,0.4734375,-0.4265625,0,0.8945313,0.1445313,0.4359375,-0.5296875,0,0.8632813,0.05859375,0.346875,-0.46875,0,0.7890625,0.109375,0.346875,-0.5296875,0,0.7890625,0.05859375,-0.4546875,-0.4078125,0,0.1210938,0.1601563,-0.4265625,-0.4921875,0,0.1445313,0.08984375,-0.4265625,-0.4640625,0,0.1445313,0.1132813,-0.46875,-0.4921875,0,0.109375,0.08984375,-0.5484375,-0.3890625,0,0.04296872,0.1757813,-0.5859375,-0.384375,0,0.01171875,0.1796875,-0.6,-0.384375,0,0,0.1796875,-0.6,-0.4359375,0,0,0.1367188,0.590625,-0.3703125,0,0.9921875,0.1914063,0.54375,-0.4265625,0,0.953125,0.1445313,0.590625,-0.39375,0,0.9921875,0.171875,0.5390625,-0.3703125,0,0.9492188,0.1914063,0.478125,-0.4078125,0,0.8984375,0.1601563,0.478125,-0.4171875,0,0.8984375,0.1523438,-0.20625,-0.365625,0,0.328125,0.1953125,-0.2015625,-0.384375,0,0.3320313,0.1796875,-0.2015625,-0.375,0,0.3320313,0.1875,-0.215625,-0.3984375,0,0.3203125,0.1679688,-0.2203125,-0.365625,0,0.3164063,0.1953125,-0.2203125,-0.3984375,0,0.3164063,0.1679688,-0.234375,-0.3703125,0,0.3046875,0.1914063,-0.234375,-0.384375,0,0.3046875,0.1796875,0.4078125,0.009375,0,0.8398438,0.5078125,0.403125,-0.1265625,0,0.8359375,0.3945313,0.4078125,-0.1171875,0,0.8398438,0.4023438,0.39375,-0.1875,0,0.828125,0.34375,0.35625,0.0234375,0,0.796875,0.5195313,0.3421875,0.0515625,0,0.7851563,0.5429688,0.3046875,0.2015625,0,0.7539063,0.6679688,0.290625,0.20625,0,0.7421875,0.671875,0.2625,0.20625,0,0.71875,0.671875,0.2625,0.196875,0,0.71875,0.6640625,0.24375,0.1828125,0,0.703125,0.6523438,0.2203125,0.178125,0,0.6835938,0.6484375,0.2109375,0.1921875,0,0.6757813,0.6601563,0.1453125,0.2859375,0,0.6210938,0.7382813,0.1359375,0.2765625,0,0.6132813,0.7304688,0.121875,0.2765625,0,0.6015625,0.7304688,0.0984375,0.2671875,0,0.5820313,0.7226563,0.1171875,0.290625,0,0.5976563,0.7421875,0.0984375,0.253125,0,0.5820313,0.7109375,0.0890625,0.2296875,0,0.5742188,0.6914063,0.0890625,0.225,0,0.5742188,0.6875,0.0796875,0.215625,0,0.5664063,0.6796875,0.0703125,0.215625,0,0.5585938,0.6796875,0.05625,0.2296875,0,0.546875,0.6914063,0,0.2953125,0,0.5,0.7460938,0,0.28125,0,0.5,0.734375,-0.0140625,0.2765625,0,0.4882813,0.7304688,-0.1265625,0.365625,0,0.3945313,0.8046875,-0.0234375,0.290625,0,0.4804688,0.7421875,-0.140625,0.2578125,0,0.3828125,0.7148438,-0.1734375,0.2671875,0,0.3554688,0.7226563,-0.1734375,0.1640625,0,0.3554688,0.6367188,-0.1828125,0.159375,0,0.3476563,0.6328125,-0.196875,0.15,0,0.3359375,0.625,-0.20625,0.15,0,0.328125,0.625,-0.2109375,0.15,0,0.3242188,0.625,-0.215625,0.15,0,0.3203125,0.625,-0.2390625,0.1546875,0,0.3007813,0.6289063,-0.2671875,-0.178125,0,0.2773438,0.3515625,-0.2671875,-0.1875,0,0.2773438,0.34375,0.403125,0.0703125,0,0.8359375,0.5585938,0.4078125,0.05625,0,0.8398438,0.546875,0.3703125,0.075,0,0.8085938,0.5625,0.3515625,0.075,0,0.7929688,0.5625,0.3421875,0.0703125,0,0.7851563,0.5585938,0.45,0.0609375,0,0.875,0.5507813,0.421875,0.0046875,0,0.8515625,0.5039063,0.45,0.0046875,0,0.875,0.5039063,0.2015625,-0.2109375,0,0.6679688,0.3242188,0.20625,-0.234375,0,0.671875,0.3046875,0.20625,-0.2203125,0,0.671875,0.3164063,0.196875,-0.2390625,0,0.6640625,0.3007813,0.1828125,-0.2109375,0,0.6523438,0.3242188,0.16875,-0.2390625,0,0.640625,0.3007813,0.1640625,-0.225,0,0.6367188,0.3125,0.15,-0.225,0,0.625,0.3125,0.1640625,-0.24375,0,0.6367188,0.296875,0.1640625,-0.2296875,0,0.6367188,0.3085938,0.15,-0.2484375,0,0.625,0.2929688,0.140625,-0.234375,0,0.6171875,0.3046875,-0.0703125,-0.2203125,0,0.4414063,0.3164063,-0.075,-0.24375,0,0.4375,0.296875,-0.065625,-0.234375,0,0.4453125,0.3046875,-0.09375,-0.2203125,0,0.421875,0.3164063,-0.0984375,-0.24375,0,0.4179688,0.296875,-0.103125,-0.2296875,0,0.4140625,0.3085938,-0.159375,0.3515625,0,0.3671875,0.7929688,-0.1546875,0.2765625,0,0.3710938,0.7304688,-0.1453125,0.31875,0,0.3789063,0.765625,-0.1734375,0.271875,0,0.3554688,0.7265625,-0.1875,0.253125,0,0.34375,0.7109375,-0.1921875,0.3609375,0,0.3398438,0.8007813,-0.1875,0.225,0,0.34375,0.6875,-0.2109375,0.3515625,0,0.3242188,0.7929688,-0.2390625,0.1640625,0,0.3007813,0.6367188,-0.1453125,0.3609375,0,0.3789063,0.8007813,0.084375,0.2484375,0,0.5703125,0.7070313,0.075,0.2625,0,0.5625,0.71875,0.0703125,0.2484375,0,0.5585938,0.7070313,0.3140625,0.5015625,0,0.7617188,0.9179688,0.4078125,0.196875,0,0.8398438,0.6640625,0.4078125,0.4359375,0,0.8398438,0.8632813,0.2953125,0.20625,0,0.7460938,0.671875,0.2484375,0.28125,0,0.7070313,0.734375,0.2390625,0.290625,0,0.6992188,0.7421875,0.225,0.2859375,0,0.6875,0.7382813,0.225,0.271875,0,0.6875,0.7265625,0.140625,0.3,0,0.6171875,0.75,0.1265625,0.3,0,0.6054688,0.75,0.084375,0.271875,0,0.5703125,0.7265625,0.065625,0.2484375,0,0.5546875,0.7070313,0.05625,0.2390625,0,0.546875,0.6992188,-0.0140625,0.3,0,0.4882813,0.75,-0.1359375,0.4265625,0,0.3867188,0.8554688,-0.1359375,0.4125,0,0.3867188,0.84375,-0.1359375,0.421875,0,0.3867188,0.8515625,-0.1453125,0.403125,0,0.3789063,0.8359375,-0.1546875,0.3984375,0,0.3710938,0.8320313,-0.2203125,0.440625,0,0.3164063,0.8671875,-0.225,0.5015625,0,0.3125,0.9179688,0.2484375,0.2671875,0,0.7070313,0.7226563,0.2484375,0.2109375,0,0.7070313,0.6757813,0.234375,0.2625,0,0.6953125,0.71875,0.234375,0.20625,0,0.6953125,0.671875,0.140625,-0.2296875,0,0.6171875,0.3085938,0.140625,-0.253125,0,0.6171875,0.2890625,0.1265625,-0.2203125,0,0.6054688,0.3164063,0.0046875,-0.2203125,0,0.5039063,0.3164063,0,-0.2296875,0,0.5,0.3085938,0,-0.253125,0,0.5,0.2890625,-0.121875,-0.2109375,0,0.3984375,0.3242188,-0.1171875,-0.234375,0,0.4023438,0.3046875,-0.1171875,-0.225,0,0.4023438,0.3125,-0.121875,-0.2390625,0,0.3984375,0.3007813,-0.1828125,-0.2109375,0,0.3476563,0.3242188,-0.1828125,-0.2390625,0,0.3476563,0.3007813,-0.1875,-0.2203125,0,0.34375,0.3164063,-0.3234375,-0.1875,0,0.2304688,0.34375,-0.365625,-0.1828125,0,0.1953125,0.3476563,-0.459375,-0.0234375,0,0.1171875,0.4804688,-0.459375,-0.1359375,0,0.1171875,0.3867188,-0.440625,0.159375,0,0.1328125,0.6328125,-0.459375,0.15,0,0.1171875,0.625,-0.1875,-0.2109375,0,0.34375,0.3242188,-0.1875,-0.2296875,0,0.34375,0.3085938,-0.2109375,-0.1921875,0,0.3242188,0.3398438,-0.2203125,-0.2296875,0,0.3164063,0.3085938,-0.2578125,-0.1921875,0,0.2851563,0.3398438,-0.2625,-0.2203125,0,0.28125,0.3164063,-0.2671875,-0.2015625,0,0.2773438,0.3320313,-0.50625,0.0140625,0,0.078125,0.5117188,-0.5296875,-0.0984375,0,0.05859375,0.4179688,-0.5671875,0.0140625,0,0.02734378,0.5117188,-0.5671875,-0.0328125,0,0.02734378,0.4726563,-0.4546875,-0.1734375,0,0.1210938,0.3554688,-0.459375,-0.15,0,0.1171875,0.375,-0.2671875,-0.20625,0,0.2773438,0.328125,-0.31875,-0.20625,0,0.234375,0.328125,0.5015625,-0.0375,0,0.9179688,0.46875,0.4921875,-0.103125,0,0.9101563,0.4140625,0.5015625,-0.0796875,0,0.9179688,0.4335938,0.4875,-0.0328125,0,0.90625,0.4726563,0.4734375,-0.0375,0,0.8945313,0.46875,0.459375,-0.103125,0,0.8828125,0.4140625,0.4546875,-0.075,0,0.8789063,0.4375,0.4546875,-0.0984375,0,0.8789063,0.4179688,0.5578125,0.028125,0,0.9648438,0.5234375,0.5953125,-0.028125,0,0.9960938,0.4765625,0.5953125,0,0,0.9960938,0.5,0.5578125,-0.028125,0,0.9648438,0.4765625,0.5109375,0.028125,0,0.9257813,0.5234375,0.5109375,0.0046875,0,0.9257813,0.5039063,0.46875,-0.009375,0,0.890625,0.4921875,0.4828125,-0.028125,0,0.9023438,0.4765625,0.4828125,-0.0140625,0,0.9023438,0.4882813,0.46875,-0.0328125,0,0.890625,0.4726563,0.459375,-0.01875,0,0.8828125,0.484375,0.3984375,0.0984375,0,0.8320313,0.5820313,0.4078125,-0.16875,0,0.8398438,0.359375,0.4078125,-0.13125,0,0.8398438,0.390625,-0.5109375,0.1359375,0,0.07421875,0.6132813,-0.50625,0.1171875,0,0.078125,0.5976563,-0.50625,0.13125,0,0.078125,0.609375,-0.5484375,0.09375,0,0.04296872,0.578125,-0.571875,0.1359375,0,0.02343747,0.6132813,-0.6,0.121875,0,0,0.6015625,-0.6,0.09375,0,0,0.578125,-0.2015625,0.421875,0,0.3320313,0.8515625,-0.196875,0.3703125,0,0.3359375,0.8085938,-0.196875,0.4125,0,0.3359375,0.84375,-0.2109375,0.365625,0,0.3242188,0.8046875,-0.215625,0.421875,0,0.3203125,0.8515625,-0.225,0.4171875,0,0.3125,0.8476563,-0.225,0.3796875,0,0.3125,0.8164063,-0.1453125,0.3703125,0,0.3789063,0.8085938,-0.1453125,0.384375,0,0.3789063,0.8203125,-0.159375,0.365625,0,0.3671875,0.8046875,-0.1734375,0.365625,0,0.3554688,0.8046875,-0.178125,0.3984375,0,0.3515625,0.8320313,-0.178125,0.375,0,0.3515625,0.8125],[226,225,224,144,224,225,223,224,144,221,223,144,222,221,144,220,219,217,218,217,219,214,217,218,215,217,214,216,215,214,64,135,62,61,62,135,134,61,135,60,61,134,75,139,73,72,73,139,71,72,139,133,132,149,131,149,132,147,149,131,130,147,131,70,138,69,137,69,138,125,69,137,68,69,125,66,68,125,67,68,66,59,150,58,57,58,150,148,57,150,56,57,148,55,56,148,213,212,210,211,210,212,207,210,211,208,210,207,209,208,207,50,48,205,206,205,48,204,91,53,52,53,91,90,91,204,89,90,204,87,89,204,203,199,202,200,202,199,201,200,199,198,197,196,193,196,197,194,196,193,195,194,193,192,191,190,189,190,191,186,190,189,188,186,189,185,186,188,187,186,185,165,164,184,86,184,164,183,184,86,176,183,86,182,167,181,165,181,167,180,179,178,177,178,179,167,178,177,166,167,177,176,174,175,173,175,174,172,173,174,171,173,172,170,171,172,163,171,170,82,83,81,166,169,85,168,85,169,84,85,168,167,166,165,85,165,166,164,165,85,86,164,85,163,161,162,160,162,161,157,160,161,158,160,157,159,158,157,156,155,152,154,152,155,153,152,154,151,152,153,106,152,151,142,140,74,124,136,123,65,123,136,63,65,136,59,133,150,149,150,133,148,150,149,147,148,149,55,148,147,130,55,147,146,126,145,140,145,126,144,145,140,143,144,140,141,143,140,142,141,140,74,140,126,139,74,126,75,74,139,71,139,126,124,71,126,138,71,124,70,71,138,137,138,124,125,137,124,136,124,126,64,136,126,63,136,64,135,64,126,134,135,126,60,134,126,132,60,126,59,60,132,133,59,132,131,132,126,130,131,126,55,130,126,54,55,126,129,54,126,127,129,126,128,127,126,125,124,66,123,66,124,65,66,123,76,122,74,121,120,83,81,83,120,118,81,120,119,81,118,78,81,119,117,78,119,77,78,117,113,117,118,119,118,117,116,117,113,114,116,113,115,114,113,112,110,111,108,111,110,107,108,110,109,108,107,106,102,105,103,105,102,104,103,102,101,99,100,98,100,99,95,98,99,96,98,95,97,96,95,47,88,93,87,92,88,93,88,92,94,93,92,52,91,51,90,51,91,89,51,90,47,51,89,87,47,89,88,47,87,86,85,50,84,50,85,83,50,84,82,50,83,81,50,82,80,50,81,79,50,80,78,50,79,77,50,78,76,50,77,74,50,76,73,50,74,75,73,74,72,50,73,71,50,72,70,50,71,69,50,70,68,50,69,67,50,68,66,50,67,65,50,66,63,50,65,62,50,63,64,62,63,61,50,62,60,50,61,59,50,60,58,50,59,57,50,58,56,50,57,55,50,56,54,50,55,53,50,54,52,50,53,51,50,52,47,50,51,48,50,47,49,48,47,46,45,44,43,44,45,42,44,43,39,42,43,40,42,39,41,40,39,38,37,20,36,20,37,17,20,36,34,17,36,33,34,36,35,34,33,32,31,28,30,28,31,29,28,30,25,28,29,26,28,25,27,26,25,24,23,22,21,22,23,18,22,21,20,18,21,17,18,20,19,18,17,9,7,16,15,14,12,13,12,14,10,12,13,11,12,10,8,11,10,0,8,10,7,8,0,9,8,7,6,7,0,5,6,0,4,5,0,3,4,0,1,3,0,2,1,0],0,-0.000297345221042633,1,0.999702632427216,0,0.0390625,0.99609375,0.91796875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,0,10.0761203765869]},{"id":28778,"path":"Assets/Content/Sprites/Ingredients/Gruyère chese.png","assetBundleId":-1,"data":["Gruyère chese",6,28776,[0.02109376,0.03281251,0,0.3679688,0.3375,0],[0.0328125,0.3703125,0,0.5273438,0.8085938,0.3890625,-0.3046875,0,0.8242188,0.2460938,0.3890625,-0.028125,0,0.8242188,0.4765625,-0.140625,-0.3046875,0,0.3828125,0.2460938,-0.24375,0.3703125,0,0.296875,0.8085938,-0.346875,-0.0046875,0,0.2109375,0.4960938,-0.346875,-0.1640625,0,0.2109375,0.3632813],[6,5,3,4,3,5,0,3,4,1,3,0,2,1,0],-0.00029735267162323,-0.00029735267162323,0.999702632427216,0.999702632427216,0.2109375,0.24609375,0.82421875,0.80859375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,54.0761222839355,63.0761222839355]},{"id":28964,"path":"Assets/Content/Sprites/Ingredients/carrot.png","assetBundleId":-1,"data":["carrot",6,28962,[-0.02578126,0.04218751,0,0.4570313,0.3375,0],[0.43125,0.2390625,0,0.859375,0.6992188,0.3703125,-0.0421875,0,0.8085938,0.4648438,0.43125,0.0515625,0,0.859375,0.5429688,0.309375,0.3796875,0,0.7578125,0.8164063,0.3,-0.0890625,0,0.75,0.4257813,0.253125,-0.225,0,0.7109375,0.3125,0.234375,-0.178125,0,0.6953125,0.3515625,0.225,-0.1734375,0,0.6875,0.3554688,0.2015625,-0.1734375,0,0.6679688,0.3554688,0.1828125,-0.196875,0,0.6523438,0.3359375,0.0375,0.3796875,0,0.53125,0.8164063,0.1828125,-0.2203125,0,0.6523438,0.3164063,0.3703125,-0.1359375,0,0.8085938,0.3867188,0.3140625,-0.09375,0,0.7617188,0.421875,0.234375,-0.215625,0,0.6953125,0.3203125,0.2296875,-0.2296875,0,0.6914063,0.3085938,-0.084375,-0.2953125,0,0.4296875,0.2539063,0.1875,-0.2296875,0,0.65625,0.3085938,-0.225,0.1546875,0,0.3125,0.6289063,-0.225,0.1546875,0,0.3125,0.6289063,-0.271875,0.1828125,0,0.2734375,0.6523438,-0.2390625,0.1828125,0,0.3007813,0.6523438,-0.290625,0.103125,0,0.2578125,0.5859375,-0.3140625,0.1453125,0,0.2382813,0.6210938,-0.3140625,0.1359375,0,0.2382813,0.6132813,-0.225,0.1078125,0,0.3125,0.5898438,-0.2484375,0.0890625,0,0.2929688,0.5742188,-0.28125,0.0890625,0,0.265625,0.5742188,-0.4265625,-0.2953125,0,0.1445313,0.2539063,-0.4828125,-0.0609375,0,0.09765625,0.4492188,-0.4828125,-0.2296875,0,0.09765625,0.3085938,-0.159375,0.3421875,0,0.3671875,0.7851563,-0.13125,0.2765625,0,0.390625,0.7304688,-0.13125,0.3,0,0.390625,0.75,-0.16875,0.2625,0,0.359375,0.71875,-0.1921875,0.3421875,0,0.3398438,0.7851563,-0.196875,0.3328125,0,0.3359375,0.7773438,-0.2015625,0.2625,0,0.3320313,0.71875,-0.225,0.2765625,0,0.3125,0.7304688,-0.2296875,0.309375,0,0.3085938,0.7578125,-0.2296875,0.290625,0,0.3085938,0.7421875],[40,39,38,36,38,39,37,38,36,34,37,36,35,34,36,31,34,35,32,34,31,33,32,31,22,19,27,26,27,19,25,26,19,18,25,19,30,29,28,22,28,29,16,28,22,27,16,22,26,16,27,25,16,26,18,16,25,24,23,22,20,22,23,19,22,20,21,19,20,11,9,17,8,17,9,15,17,8,7,15,8,6,15,7,14,15,6,19,10,18,16,18,10,11,16,10,17,16,11,15,16,17,5,16,15,14,5,15,6,5,14,5,4,12,13,12,4,3,9,10,11,10,9,8,9,3,7,8,3,6,7,3,5,6,3,4,5,3,1,4,3,0,1,3,2,1,0],-0.000104494392871857,-0.000297337770462036,0.999895513057709,0.99970269203186,0.09765625,0.25390625,0.859375,0.81640625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,25.0267505645752,65.0761184692383]},{"id":28890,"path":"Assets/Content/Sprites/Ingredients/chicken breasts.png","assetBundleId":-1,"data":["chicken breasts",6,28888,[-0.007031247,-0.06562501,0,0.4804688,0.384375,0],[-0.2578125,-0.39375,0,0.2851563,0.171875,-0.28125,-0.45,0,0.265625,0.125,-0.2578125,-0.4171875,0,0.2851563,0.1523438,-0.290625,-0.346875,0,0.2578125,0.2109375,-0.3,-0.346875,0,0.25,0.2109375,-0.31875,-0.3609375,0,0.234375,0.1992188,-0.3375,-0.3515625,0,0.21875,0.2070313,-0.346875,-0.45,0,0.2109375,0.125,-0.3515625,-0.3515625,0,0.2070313,0.2070313,-0.365625,-0.3609375,0,0.1953125,0.1992188,-0.365625,-0.4359375,0,0.1953125,0.1367188,0.3609375,-0.2671875,0,0.8007813,0.2773438,0.3515625,-0.3328125,0,0.7929688,0.2226563,0.3609375,-0.309375,0,0.8007813,0.2421875,0.3375,-0.3421875,0,0.78125,0.2148438,0.328125,-0.2671875,0,0.7734375,0.2773438,0.290625,-0.3421875,0,0.7421875,0.2148438,0.2765625,-0.31875,0,0.7304688,0.234375,0.2765625,-0.3375,0,0.7304688,0.21875,-0.2625,-0.16875,0,0.28125,0.359375,-0.2578125,-0.1921875,0,0.2851563,0.3398438,-0.2578125,-0.1734375,0,0.2851563,0.3554688,-0.2859375,-0.16875,0,0.2617188,0.359375,-0.3,-0.178125,0,0.25,0.3515625,-0.24375,0.20625,0,0.296875,0.671875,-0.309375,-0.178125,0,0.2421875,0.3515625,-0.3796875,0.20625,0,0.1835938,0.671875,-0.4125,0.178125,0,0.15625,0.6484375,-0.4125,-0.0703125,0,0.15625,0.4414063,-0.2296875,0.2671875,0,0.3085938,0.7226563,-0.2296875,0.2203125,0,0.3085938,0.6835938,-0.3046875,0.2671875,0,0.2460938,0.7226563,-0.234375,0.31875,0,0.3046875,0.765625,-0.2296875,0.3140625,0,0.3085938,0.7617188,-0.4078125,0.31875,0,0.1601563,0.765625,-0.4078125,0.20625,0,0.1601563,0.671875,-0.421875,0.3046875,0,0.1484375,0.7539063,-0.421875,0.2203125,0,0.1484375,0.6835938,0.4734375,0.084375,0,0.8945313,0.5703125,0.4078125,-0.2671875,0,0.8398438,0.2773438,0.4734375,-0.2109375,0,0.8945313,0.3242188,0.403125,0.2671875,0,0.8359375,0.7226563,-0.0046875,-0.2671875,0,0.4960938,0.2773438,-0.2859375,-0.225,0,0.2617188,0.3125,-0.2671875,-0.28125,0,0.2773438,0.265625,-0.2671875,-0.253125,0,0.2773438,0.2890625,-0.3046875,-0.3046875,0,0.2460938,0.2460938,-0.328125,-0.3046875,0,0.2265625,0.2460938,-0.3609375,-0.225,0,0.1992188,0.3125,-0.3703125,-0.2484375,0,0.1914063,0.2929688,-0.3703125,-0.2765625,0,0.1914063,0.2695313,-0.31875,-0.1734375,0,0.234375,0.3554688,-0.309375,-0.196875,0,0.2421875,0.3359375,-0.309375,-0.1828125,0,0.2421875,0.3476563,-0.31875,-0.20625,0,0.234375,0.328125,-0.328125,-0.20625,0,0.2265625,0.328125,-0.3328125,-0.178125,0,0.2226563,0.3515625,-0.3375,-0.196875,0,0.21875,0.3359375,-0.2859375,-0.20625,0,0.2617188,0.328125,-0.2578125,-0.20625,0,0.2851563,0.328125,-0.3046875,-0.1828125,0,0.2460938,0.3476563,-0.3046875,-0.1875,0,0.2460938,0.34375,-0.4453125,0.103125,0,0.1289063,0.5859375,-0.4359375,0.0796875,0,0.1367188,0.5664063,-0.4359375,0.0984375,0,0.1367188,0.5820313,-0.4546875,0.046875,0,0.1210938,0.5390625,-0.46875,0.103125,0,0.109375,0.5859375,-0.4734375,0.046875,0,0.1054688,0.5390625,-0.478125,0.09375,0,0.1015625,0.578125,-0.4875,0.075,0,0.09375,0.5625,-0.4875,0.05625,0,0.09375,0.546875],[70,69,67,68,67,69,66,67,68,65,67,66,62,65,66,63,65,62,64,63,62,61,60,58,23,58,60,20,58,23,59,58,20,57,56,55,51,55,56,54,55,51,52,54,51,53,52,51,50,49,47,48,47,49,43,47,48,46,47,43,44,46,43,45,44,43,20,21,42,24,42,21,30,42,24,29,42,30,41,42,29,15,42,41,11,15,41,39,11,41,38,39,41,40,39,38,37,36,35,34,35,36,26,35,34,31,26,34,32,31,34,29,31,32,33,29,32,26,31,24,29,24,31,30,24,29,28,27,25,26,25,27,24,25,26,23,25,24,22,23,24,19,22,24,21,19,24,23,22,20,19,20,22,21,20,19,18,17,16,15,16,17,14,16,15,11,14,15,12,14,11,13,12,11,10,9,7,8,7,9,6,7,8,1,7,6,5,1,6,4,1,5,3,1,4,0,1,3,2,1,0],-0.000167608261108398,-0.00029735267162323,0.999832391738892,0.999702632427216,0.09375,0.125,0.89453125,0.765625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,24.0429077148438,32.0761222839355]},{"id":29120,"path":"Assets/Content/Sprites/Ingredients/egg.png","assetBundleId":-1,"data":["egg",6,29118,[-0.03281251,0.02578124,0,0.4546875,0.3117188,0],[0.421875,0.3234375,0,0.8515625,0.7695313,0.403125,-0.271875,0,0.8359375,0.2734375,0.421875,-0.215625,0,0.8515625,0.3203125,0.3375,0.3375,0,0.78125,0.78125,0.3,-0.2859375,0,0.75,0.2617188,-0.43125,-0.2859375,0,0.140625,0.2617188,-0.4640625,0.3375,0,0.1132813,0.78125,-0.4875,0.1875,0,0.09375,0.65625,-0.4875,-0.009375,0,0.09375,0.4921875],[8,7,5,6,5,7,3,5,6,4,5,3,1,4,3,0,1,3,2,1,0],-0.000104494392871857,-0.00010448694229126,0.999895513057709,0.999895513057709,0.09375,0.26171875,0.8515625,0.78125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,24.0267505645752,67.0267486572266]},{"id":29098,"path":"Assets/Content/Sprites/Ingredients/lemon zest.png","assetBundleId":-1,"data":["lemon zest",6,29096,[0.03515625,0.0234375,0,0.5648438,0.4546875,0],[-0.196875,-0.4078125,0,0.3359375,0.1601563,-0.1921875,-0.43125,0,0.3398438,0.140625,-0.1921875,-0.421875,0,0.3398438,0.1484375,-0.2484375,-0.3890625,0,0.2929688,0.1757813,-0.2859375,-0.43125,0,0.2617188,0.140625,-0.3,-0.3890625,0,0.25,0.1757813,-0.3140625,-0.39375,0,0.2382813,0.171875,-0.3140625,-0.4265625,0,0.2382813,0.1445313,-0.4640625,-0.2109375,0,0.1132813,0.3242188,-0.4359375,-0.253125,0,0.1367188,0.2890625,-0.4359375,-0.2296875,0,0.1367188,0.3085938,-0.4734375,-0.253125,0,0.1054688,0.2890625,-0.5015625,-0.2109375,0,0.08203122,0.3242188,-0.5015625,-0.24375,0,0.08203122,0.296875,-0.50625,-0.225,0,0.078125,0.3125,-0.0984375,-0.290625,0,0.4179688,0.2578125,-0.0890625,-0.309375,0,0.4257813,0.2421875,-0.0890625,-0.3,0,0.4257813,0.25,-0.0984375,-0.31875,0,0.4179688,0.234375,-0.1078125,-0.290625,0,0.4101563,0.2578125,-0.1078125,-0.31875,0,0.4101563,0.234375,-0.1171875,-0.3,0,0.4023438,0.25,-0.1171875,-0.309375,0,0.4023438,0.2421875,-0.13125,0.3984375,0,0.390625,0.8320313,-0.1453125,0.35625,0,0.3789063,0.796875,-0.13125,0.3703125,0,0.390625,0.8085938,-0.1453125,0.35625,0,0.3789063,0.796875,-0.15,0.35625,0,0.375,0.796875,-0.1546875,0.403125,0,0.3710938,0.8359375,-0.1546875,0.4078125,0,0.3710938,0.8398438,-0.159375,0.4078125,0,0.3671875,0.8398438,-0.1640625,0.3984375,0,0.3632813,0.8320313,-0.1640625,0.3703125,0,0.3632813,0.8085938,-0.1453125,0.4078125,0,0.3789063,0.8398438,-0.13125,0.403125,0,0.390625,0.8359375,-0.1453125,0.35625,0,0.3789063,0.796875,0.3984375,0.1078125,0,0.8320313,0.5898438,0.39375,0.1125,0,0.828125,0.59375,0.3984375,0.1078125,0,0.8320313,0.5898438,0.3609375,0.13125,0,0.8007813,0.609375,0.3515625,0.1359375,0,0.7929688,0.6132813,0.35625,0.1265625,0,0.796875,0.6054688,0.2390625,0.225,0,0.6992188,0.6875,0.15,0.3,0,0.625,0.75,0.2390625,0.225,0,0.6992188,0.6875,0.1640625,0.2953125,0,0.6367188,0.7460938,0.1546875,0.3,0,0.6289063,0.75,0.159375,0.2953125,0,0.6328125,0.7460938,0.1640625,0.3234375,0,0.6367188,0.7695313,0.1734375,0.3,0,0.6445313,0.75,0.1734375,0.3140625,0,0.6445313,0.7617188,0.15,0.31875,0,0.625,0.765625,0.15,0.3046875,0,0.625,0.7539063,0.290625,0.478125,0,0.7421875,0.8984375,0.253125,0.31875,0,0.7109375,0.765625,0.2671875,0.3140625,0,0.7226563,0.7617188,0.24375,0.309375,0,0.703125,0.7578125,-0.0796875,0.3046875,0,0.4335938,0.7539063,-0.084375,0.421875,0,0.4296875,0.8515625,-0.103125,0.43125,0,0.4140625,0.859375,-0.1546875,0.478125,0,0.3710938,0.8984375,-0.1640625,0.459375,0,0.3632813,0.8828125,0.346875,0.309375,0,0.7890625,0.7578125,0.309375,0.2484375,0,0.7578125,0.7070313,0.3375,0.2578125,0,0.78125,0.7148438,0.2671875,0.3,0,0.7226563,0.75,0.253125,0.2953125,0,0.7109375,0.7460938,0.2484375,0.215625,0,0.7070313,0.6796875,0.253125,0.215625,0,0.7109375,0.6796875,0.253125,0.24375,0,0.7109375,0.703125,0.2671875,0.2296875,0,0.7226563,0.6914063,0.2671875,0.2390625,0,0.7226563,0.6992188,0.2390625,0.2296875,0,0.6992188,0.6914063,0.3796875,0.1078125,0,0.8164063,0.5898438,0.39375,0.1125,0,0.828125,0.59375,0.3609375,0.1125,0,0.8007813,0.59375,0.384375,0.1359375,0,0.8203125,0.6132813,0.39375,0.1265625,0,0.828125,0.6054688,0.365625,0.1359375,0,0.8046875,0.6132813,0.4078125,0.103125,0,0.8398438,0.5859375,0.4125,0.103125,0,0.84375,0.5859375,0.4546875,0.1171875,0,0.8789063,0.5976563,0.4453125,0.103125,0,0.8710938,0.5859375,0.4546875,0.1125,0,0.8789063,0.59375,0.4359375,0.13125,0,0.8632813,0.609375,0.403125,0.13125,0,0.8359375,0.609375,0.3984375,0.121875,0,0.8320313,0.6015625,0.5484375,-0.3140625,0,0.9570313,0.2382813,0.525,-0.31875,0,0.9375,0.234375,0.5484375,-0.3140625,0,0.9570313,0.2382813,0.478125,-0.31875,0,0.8984375,0.234375,0.4734375,-0.3140625,0,0.8945313,0.2382813,0.6,-0.24375,0,1,0.296875,0.5953125,-0.309375,0,0.9960938,0.2421875,0.6,-0.3046875,0,1,0.2460938,0.590625,-0.24375,0,0.9921875,0.296875,0.525,-0.253125,0,0.9375,0.2890625,0.4734375,-0.2953125,0,0.8945313,0.2539063,0.553125,-0.375,0,0.9609375,0.1875,0.553125,-0.3234375,0,0.9609375,0.2304688,0.4453125,-0.3140625,0,0.8710938,0.2382813,0.43125,-0.4125,0,0.859375,0.15625,0.365625,-0.3234375,0,0.8046875,0.2304688,0.3421875,-0.4125,0,0.7851563,0.15625,0.309375,-0.3515625,0,0.7578125,0.2070313,0.309375,-0.3796875,0,0.7578125,0.1835938,0.5296875,0.1078125,0,0.9414063,0.5898438,0.5390625,0.084375,0,0.9492188,0.5703125,0.5390625,0.09375,0,0.9492188,0.578125,0.5296875,0.0796875,0,0.9414063,0.5664063,0.50625,0.1078125,0,0.921875,0.5898438,0.50625,0.0796875,0,0.921875,0.5664063,0.496875,0.103125,0,0.9140625,0.5859375,0.496875,0.09375,0,0.9140625,0.578125,0.4875,-0.15,0,0.90625,0.375,0.4875,0.0609375,0,0.90625,0.5507813,0.3375,0.140625,0,0.78125,0.6171875,0.2953125,0.24375,0,0.7460938,0.703125,0.3140625,0.2484375,0,0.7617188,0.7070313,0.2625,-0.1875,0,0.71875,0.34375,-0.103125,0.3609375,0,0.4140625,0.8007813,-0.0890625,0.3375,0,0.4257813,0.78125,-0.1125,0.3609375,0,0.40625,0.8007813,-0.1171875,0.365625,0,0.4023438,0.8046875,-0.1875,0.346875,0,0.34375,0.7890625,-0.253125,-0.1875,0,0.2890625,0.34375,-0.5296875,0.09375,0,0.05859375,0.578125,-0.5296875,-0.1265625,0,0.05859375,0.3945313,0.403125,0.159375,0,0.8359375,0.6328125,0.35625,0.1359375,0,0.796875,0.6132813,-0.1078125,0.365625,0,0.4101563,0.8046875,-0.0890625,0.384375,0,0.4257813,0.8203125,-0.0890625,0.365625,0,0.4257813,0.8046875,-0.0890625,0.3796875,0,0.4257813,0.8164063,-0.09375,0.3609375,0,0.421875,0.8007813,-0.1125,0.3890625,0,0.40625,0.8242188,-0.121875,0.3796875,0,0.3984375,0.8164063,-0.121875,0.3703125,0,0.3984375,0.8085938,-0.084375,0.3703125,0,0.4296875,0.8085938,-0.084375,0.403125,0,0.4296875,0.8359375,-0.084375,0.403125,0,0.4296875,0.8359375,-0.084375,0.4125,0,0.4296875,0.84375,-0.084375,0.4078125,0,0.4296875,0.8398438,-0.0890625,0.35625,0,0.4257813,0.796875,-0.09375,0.39375,0,0.421875,0.828125],[140,139,142,23,34,144,59,144,34,141,144,59,139,144,141,142,139,141,143,132,57,138,57,132,140,57,138,142,57,140,141,57,142,58,57,141,43,52,46,133,139,138,140,138,139,132,133,138,137,136,123,135,123,136,130,123,135,131,130,135,120,130,131,134,120,131,132,134,131,133,132,131,123,130,122,120,122,130,56,54,66,65,66,54,55,65,54,118,128,116,129,116,128,78,129,128,76,78,128,127,126,125,124,125,126,119,125,124,26,119,124,35,119,26,24,119,35,57,119,24,123,57,24,122,57,123,120,57,122,121,57,120,43,119,57,44,119,43,67,119,44,68,119,67,117,119,68,116,119,117,114,119,116,118,116,117,75,114,116,40,75,116,41,75,40,73,114,75,74,114,73,37,114,74,38,114,37,79,114,38,80,114,79,115,114,80,113,112,111,110,111,112,109,111,110,106,109,110,107,109,106,108,107,106,105,104,103,102,103,104,101,103,102,100,101,102,98,101,100,90,98,100,91,90,100,88,98,90,89,98,88,99,98,89,91,97,87,96,87,97,95,87,96,89,87,95,93,89,95,92,93,95,94,93,92,91,87,90,88,90,87,89,88,87,36,86,80,85,80,86,84,80,85,82,80,84,81,82,84,83,82,81,38,36,79,80,79,36,39,78,37,76,37,78,77,37,76,41,39,75,37,75,39,73,75,37,74,73,37,42,72,68,69,68,72,70,68,69,71,70,69,44,42,67,68,67,42,45,49,63,50,63,49,66,63,50,56,66,50,65,63,66,55,63,65,53,63,55,62,63,53,64,63,62,61,60,29,33,29,60,59,33,60,53,59,60,34,33,59,58,59,53,57,58,53,51,57,53,43,57,51,52,43,51,48,51,53,50,48,53,56,50,53,54,56,53,55,54,53,52,51,46,48,46,51,45,46,48,49,45,48,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,26,24,29,33,28,23,28,33,34,23,33,32,31,27,30,27,31,29,27,30,28,27,29,23,27,28,26,27,23,24,26,23,25,24,23,22,21,20,19,20,21,18,20,19,15,18,19,16,18,15,17,16,15,14,12,13,11,13,12,8,11,12,9,11,8,10,9,8,7,6,4,5,4,6,3,4,5,1,4,3,0,1,3,2,1,0],-0.000297345221042633,-0.00029735267162323,0.999702632427216,0.999702632427216,0.05859375,0.140625,1,0.8984375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,15.0761203765869,36.0761222839355]},{"id":29144,"path":"Assets/Content/Sprites/Ingredients/chiken full.png","assetBundleId":-1,"data":["chiken full",6,29142,[0.002343744,-0.06093749,0,0.5132812,0.459375,0],[-0.225,-0.4125,0,0.3125,0.15625,-0.2484375,-0.4125,0,0.2929688,0.15625,-0.225,-0.43125,0,0.3125,0.140625,0.35625,0.3984375,0,0.796875,0.8320313,0.3328125,0.253125,0,0.7773438,0.7109375,0.35625,0.346875,0,0.796875,0.7890625,0.3,0.24375,0,0.75,0.703125,0.215625,0.2296875,0,0.6796875,0.6914063,0.1921875,0.2109375,0,0.6601563,0.6757813,-0.2390625,0.3984375,0,0.3007813,0.8320313,0.3046875,-0.35625,0,0.7539063,0.203125,0.3046875,-0.35625,0,0.7539063,0.203125,0.1640625,-0.4171875,0,0.6367188,0.1523438,0.3375,-0.3328125,0,0.78125,0.2226563,0.346875,-0.3375,0,0.7890625,0.21875,0.346875,-0.3375,0,0.7890625,0.21875,0.328125,-0.3328125,0,0.7734375,0.2226563,0.3046875,-0.346875,0,0.7539063,0.2109375,0.346875,-0.3234375,0,0.7890625,0.2304688,-0.1921875,-0.4125,0,0.3398438,0.15625,-0.196875,-0.4078125,0,0.3359375,0.1601563,-0.2109375,-0.4078125,0,0.3242188,0.1601563,-0.2484375,-0.3984375,0,0.2929688,0.1679688,-0.225,-0.4125,0,0.3125,0.15625,0.384375,-0.3234375,0,0.8203125,0.2304688,0.5015625,0.3984375,0,0.9179688,0.8320313,0.515625,0.05625,0,0.9296875,0.546875,0.515625,0.3796875,0,0.9296875,0.8164063,0.4734375,-0.1546875,0,0.8945313,0.3710938,0.4171875,0.3984375,0,0.8476563,0.8320313,0.4125,-0.1828125,0,0.84375,0.3476563,0.384375,0.3890625,0,0.8203125,0.8242188,0.3609375,0.3515625,0,0.8007813,0.7929688,0.35625,-0.196875,0,0.796875,0.3359375,0.3515625,0.2484375,0,0.7929688,0.7070313,0.375,-0.2109375,0,0.8125,0.3242188,0.4078125,-0.3140625,0,0.8398438,0.2382813,0.2109375,0.225,0,0.6757813,0.6875,-0.2953125,-0.4125,0,0.2539063,0.15625,-0.2953125,-0.4125,0,0.2539063,0.15625,-0.3234375,-0.4125,0,0.2304688,0.15625,-0.3328125,-0.4171875,0,0.2226563,0.1523438,-0.365625,-0.4171875,0,0.1953125,0.1523438,-0.3984375,-0.39375,0,0.1679688,0.171875,-0.4125,-0.3796875,0,0.15625,0.1835938,-0.4171875,-0.3796875,0,0.1523438,0.1835938,-0.4453125,-0.271875,0,0.1289063,0.2734375,-0.4546875,-0.253125,0,0.1210938,0.2890625,-0.478125,-0.2859375,0,0.1015625,0.2617188,-0.4546875,-0.2671875,0,0.1210938,0.2773438,-0.5109375,0.1265625,0,0.07421875,0.6054688,-0.5109375,-0.271875,0,0.07421875,0.2734375,0.4453125,-0.2765625,0,0.8710938,0.2695313,0.4546875,-0.31875,0,0.8789063,0.234375,0.4546875,-0.2859375,0,0.8789063,0.2617188,0.440625,-0.3234375,0,0.8671875,0.2304688,0.43125,-0.28125,0,0.859375,0.265625,0.43125,-0.3140625,0,0.859375,0.2382813,0.4171875,-0.3609375,0,0.8476563,0.1992188,0.4171875,-0.3234375,0,0.8476563,0.2304688,0.384375,-0.3890625,0,0.8203125,0.1757813,0.346875,-0.346875,0,0.7890625,0.2109375,0.328125,-0.4359375,0,0.7734375,0.1367188,0.3234375,-0.365625,0,0.7695313,0.1953125,0.309375,-0.365625,0,0.7578125,0.1953125,0.271875,-0.46875,0,0.7265625,0.109375,0.1125,-0.515625,0,0.59375,0.0703125,0.0984375,-0.5203125,0,0.5820313,0.06640628,-0.1921875,-0.4171875,0,0.3398438,0.1523438,-0.1921875,-0.43125,0,0.3398438,0.140625,-0.2015625,-0.440625,0,0.3320313,0.1328125,-0.2015625,-0.5203125,0,0.3320313,0.06640628,-0.215625,-0.440625,0,0.3203125,0.1328125,-0.2484375,-0.4875,0,0.2929688,0.09375,-0.4125,-0.4125,0,0.15625,0.15625,-0.403125,-0.4078125,0,0.1640625,0.1601563,-0.421875,-0.3796875,0,0.1484375,0.1835938,-0.43125,-0.3890625,0,0.140625,0.1757813,-0.43125,-0.39375,0,0.140625,0.171875,-0.3984375,-0.4078125,0,0.1679688,0.1601563,-0.28125,-0.4453125,0,0.265625,0.1289063,-0.28125,-0.4265625,0,0.265625,0.1445313,-0.3,-0.4453125,0,0.25,0.1289063,-0.328125,-0.4359375,0,0.2265625,0.1367188,-0.3328125,-0.4265625,0,0.2226563,0.1445313,-0.3984375,-0.4125,0,0.1679688,0.15625,-0.459375,-0.3140625,0,0.1171875,0.2382813,-0.46875,-0.2859375,0,0.109375,0.2617188],[87,46,86,45,86,46,75,79,85,42,85,79,43,42,79,84,41,83,40,83,41,82,83,40,38,82,40,80,82,38,81,80,38,40,39,38,45,44,75,43,75,44,79,75,43,78,77,74,76,74,77,45,74,76,75,74,45,2,0,72,19,72,0,70,72,19,69,70,19,68,69,19,0,23,19,21,19,23,20,19,21,73,1,71,2,71,1,72,71,2,70,71,72,67,71,70,69,67,70,68,67,69,10,14,64,63,64,14,61,63,14,19,12,68,67,68,12,66,67,12,65,66,12,10,65,12,62,65,10,64,62,10,63,62,64,61,62,63,60,62,61,14,60,61,24,60,14,58,60,24,59,58,24,57,56,55,52,55,56,53,55,52,54,53,52,51,50,48,9,48,50,47,48,9,49,48,47,46,47,9,45,46,9,44,45,9,43,44,9,42,43,9,41,42,9,40,41,9,39,40,9,38,39,9,22,38,9,1,38,22,18,22,9,8,18,9,37,18,8,34,18,37,33,18,34,24,18,33,35,24,33,36,24,35,34,32,33,30,33,32,31,30,32,29,30,31,28,30,29,25,28,29,26,28,25,27,26,25,14,15,24,18,24,15,1,22,0,23,0,22,21,23,22,18,21,22,20,21,18,19,20,18,16,19,18,12,19,16,17,12,16,11,12,17,13,16,18,15,13,18,11,17,10,16,10,17,14,10,16,13,14,16,15,14,13,12,11,10,9,3,8,7,8,3,6,7,3,4,6,3,5,4,3,2,1,0],-0.000104494392871857,-0.000297315418720245,0.999895513057709,0.99970269203186,0.07421875,0.0664062798023224,0.9296875,0.83203125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,19.0267505645752,17.0761203765869]},{"id":28702,"path":"Assets/Content/Sprites/Ingredients/rice.png","assetBundleId":-1,"data":["rice",6,28700,[0.01640625,0.03750001,0,0.3914062,0.4453125,0],[0.4078125,-0.0515625,0,0.8398438,0.4570313,0.3421875,-0.3796875,0,0.7851563,0.1835938,0.4078125,-0.2203125,0,0.8398438,0.3164063,0.3234375,0.009375,0,0.7695313,0.5078125,0.2578125,-0.4078125,0,0.7148438,0.1601563,0.24375,0.4828125,0,0.703125,0.9023438,0,-0.4078125,0,0.5,0.1601563,-0.2765625,-0.3890625,0,0.2695313,0.1757813,-0.3375,0.4828125,0,0.21875,0.9023438,-0.375,0.0609375,0,0.1875,0.5507813,-0.375,-0.3328125,0,0.1875,0.2226563],[10,9,7,8,7,9,5,7,8,6,7,5,4,6,5,3,4,5,1,4,3,0,1,3,2,1,0],-0.00029735267162323,-0.00029735267162323,0.999702632427216,0.999702632427216,0.1875,0.16015625,0.83984375,0.90234375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,48.0761222839355,41.0761222839355]},{"id":29192,"path":"Assets/Content/Sprites/Ingredients/chickpeas.png","assetBundleId":-1,"data":["chickpeas",6,29190,[0.004687518,-0.07265624,0,0.5953125,0.4617188,0],[-0.009375,-0.2203125,0,0.4921875,0.3164063,-0.0046875,-0.24375,0,0.4960938,0.296875,-0.0046875,-0.2296875,0,0.4960938,0.3085938,-0.0140625,-0.2484375,0,0.4882813,0.2929688,-0.084375,-0.2203125,0,0.4296875,0.3164063,-0.0984375,-0.2484375,0,0.4179688,0.2929688,-0.103125,-0.234375,0,0.4140625,0.3046875,-0.2953125,-0.440625,0,0.2539063,0.1328125,-0.15,-0.534375,0,0.375,0.0546875,-0.15,-0.4734375,0,0.375,0.1054688,-0.3890625,-0.534375,0,0.1757813,0.0546875,-0.440625,-0.440625,0,0.1328125,0.1328125,-0.440625,-0.496875,0,0.1328125,0.0859375,0.01875,-0.4875,0,0.515625,0.09375,-0.028125,-0.5296875,0,0.4765625,0.05859375,0.01875,-0.5109375,0,0.515625,0.07421875,-0.084375,-0.4875,0,0.4296875,0.09375,-0.084375,-0.5296875,0,0.4296875,0.05859375,-0.1078125,-0.5015625,0,0.4101563,0.08203122,-0.1078125,-0.5109375,0,0.4101563,0.07421875,0.5953125,-0.3234375,0,0.9960938,0.2304688,0.6,-0.4078125,0,1,0.1601563,0.6,-0.3234375,0,1,0.2304688,0.5484375,-0.328125,0,0.9570313,0.2265625,0.5203125,-0.45,0,0.9335938,0.125,0.478125,-0.45,0,0.8984375,0.125,0.4125,-0.4359375,0,0.84375,0.1367188,0.4078125,-0.4125,0,0.8398438,0.15625,0.4078125,-0.43125,0,0.8398438,0.140625,-0.1078125,-0.3703125,0,0.4101563,0.1914063,-0.140625,-0.4171875,0,0.3828125,0.1523438,-0.1078125,-0.39375,0,0.4101563,0.171875,-0.1546875,-0.3703125,0,0.3710938,0.1914063,-0.16875,-0.4171875,0,0.359375,0.1523438,-0.178125,-0.3796875,0,0.3515625,0.1835938,-0.178125,-0.4125,0,0.3515625,0.15625,-0.2109375,0.31875,0,0.3242188,0.765625,-0.215625,0.3140625,0,0.3203125,0.7617188,-0.20625,0.3140625,0,0.328125,0.7617188,-0.215625,0.31875,0,0.3203125,0.765625,-0.16875,0.2671875,0,0.359375,0.7226563,-0.1921875,-0.1828125,0,0.3398438,0.3476563,-0.178125,-0.1875,0,0.3515625,0.34375,-0.196875,0.2671875,0,0.3359375,0.7226563,-0.2203125,-0.178125,0,0.3164063,0.3515625,-0.225,0.2625,0,0.3125,0.71875,-0.234375,-0.178125,0,0.3046875,0.3515625,-0.2390625,-0.1875,0,0.3007813,0.34375,-0.24375,-0.2484375,0,0.296875,0.2929688,-0.4125,-0.2296875,0,0.15625,0.3085938,-0.5296875,0.0328125,0,0.05859375,0.5273438,-0.5296875,-0.075,0,0.05859375,0.4375,-0.1453125,0.328125,0,0.3789063,0.7734375,-0.1453125,0.3140625,0,0.3789063,0.7617188,-0.1453125,0.3234375,0,0.3789063,0.7695313,-0.15,0.3375,0,0.375,0.78125,-0.1546875,0.3046875,0,0.3710938,0.7539063,-0.103125,-0.1875,0,0.4140625,0.34375,-0.1078125,-0.2109375,0,0.4101563,0.3242188,-0.0984375,-0.2015625,0,0.4179688,0.3320313,-0.1171875,-0.1875,0,0.4023438,0.34375,-0.121875,-0.2109375,0,0.3984375,0.3242188,-0.1265625,-0.196875,0,0.3945313,0.3359375,-0.1359375,0.28125,0,0.3867188,0.734375,-0.1453125,0.3328125,0,0.3789063,0.7773438,-0.15,0.2953125,0,0.375,0.7460938,-0.159375,0.2671875,0,0.3671875,0.7226563,-0.1453125,0.28125,0,0.3789063,0.734375,-0.1734375,0.3,0,0.3554688,0.75,-0.1828125,0.290625,0,0.3476563,0.7421875,-0.1828125,0.2765625,0,0.3476563,0.7304688,-0.0703125,-0.20625,0,0.4414063,0.328125,-0.0703125,-0.20625,0,0.4414063,0.328125,-0.1171875,-0.215625,0,0.4023438,0.3203125,-0.1125,-0.2484375,0,0.40625,0.2929688,-0.103125,-0.24375,0,0.4140625,0.296875,-0.15,0.2671875,0,0.375,0.7226563,-0.178125,-0.2015625,0,0.3515625,0.3320313,-0.1921875,-0.20625,0,0.3398438,0.328125,-0.2203125,-0.20625,0,0.3164063,0.328125,-0.2296875,-0.2015625,0,0.3085938,0.3320313,-0.196875,0.271875,0,0.3359375,0.7265625,-0.196875,0.3046875,0,0.3359375,0.7539063,-0.2109375,0.2671875,0,0.3242188,0.7226563,-0.225,0.3140625,0,0.3125,0.7617188,-0.225,0.28125,0,0.3125,0.734375,0.065625,-0.1828125,0,0.5546875,0.3476563,0.0609375,-0.1828125,0,0.5507813,0.3476563,0.0609375,-0.1828125,0,0.5507813,0.3476563,0.0375,-0.1875,0,0.53125,0.34375,0.046875,-0.2015625,0,0.5390625,0.3320313,0.0421875,-0.1875,0,0.5351563,0.34375,0.0375,-0.2109375,0,0.53125,0.3242188,0.0140625,-0.1921875,0,0.5117188,0.3398438,0.0140625,-0.2109375,0,0.5117188,0.3242188,0.009375,-0.196875,0,0.5078125,0.3359375,-0.009375,-0.196875,0,0.4921875,0.3359375,-0.065625,-0.215625,0,0.4453125,0.3203125,-0.009375,-0.215625,0,0.4921875,0.3203125,-0.009375,-0.1875,0,0.4921875,0.34375,-0.0703125,-0.1875,0,0.4414063,0.34375,0.01875,-0.1875,0,0.515625,0.34375,0.2203125,0.3890625,0,0.6835938,0.8242188,0.196875,0.2296875,0,0.6640625,0.6914063,0.2109375,0.225,0,0.6757813,0.6875,0.1875,0.2203125,0,0.65625,0.6835938,0.1828125,0.140625,0,0.6523438,0.6171875,0.140625,-0.16875,0,0.6171875,0.359375,0.1734375,-0.159375,0,0.6445313,0.3671875,0.1171875,0.215625,0,0.5976563,0.6796875,0.1125,0.2296875,0,0.59375,0.6914063,0.0984375,0.2296875,0,0.5820313,0.6914063,0.0890625,0.2203125,0,0.5742188,0.6835938,-0.2109375,0.3890625,0,0.3242188,0.8242188,-0.225,0.3703125,0,0.3125,0.8085938,0.271875,0.2109375,0,0.7265625,0.6757813,0.2625,0.159375,0,0.71875,0.6328125,0.271875,0.16875,0,0.7265625,0.640625,0.253125,0.1640625,0,0.7109375,0.6367188,0.234375,0.1640625,0,0.6953125,0.6367188,0.2109375,0.2109375,0,0.6757813,0.6757813,0.196875,0.20625,0,0.6640625,0.671875,0.1921875,0.1640625,0,0.6601563,0.6367188,0.375,-0.075,0,0.8125,0.4375,0.290625,-0.13125,0,0.7421875,0.390625,0.35625,-0.0984375,0,0.796875,0.4179688,0.421875,0.0421875,0,0.8515625,0.5351563,0.4125,-0.0046875,0,0.84375,0.4960938,0.421875,0,0,0.8515625,0.5,0.39375,0,0,0.828125,0.5,0.3890625,0.0046875,0,0.8242188,0.5039063,0.234375,0.140625,0,0.6953125,0.6171875,0.2015625,0.1265625,0,0.6679688,0.6054688,0.1875,0.1265625,0,0.65625,0.6054688,0.403125,-0.046875,0,0.8359375,0.4609375,0.3984375,-0.01875,0,0.8320313,0.484375,0.4546875,-0.046875,0,0.8789063,0.4609375,0.459375,-0.0796875,0,0.8828125,0.4335938,0.459375,-0.05625,0,0.8828125,0.453125,0.4453125,-0.046875,0,0.8710938,0.4609375,0.4171875,-0.1171875,0,0.8476563,0.4023438,0.2109375,-0.24375,0,0.6757813,0.296875,0.1640625,-0.2484375,0,0.6367188,0.2929688,0.140625,-0.1875,0,0.6171875,0.34375,0.1265625,-0.1828125,0,0.6054688,0.3476563,0.121875,-0.1828125,0,0.6015625,0.3476563,0.1078125,0.20625,0,0.5898438,0.671875,0.09375,0.20625,0,0.578125,0.671875,0.0515625,-0.2109375,0,0.5429688,0.3242188,0.0515625,-0.2109375,0,0.5429688,0.3242188,0.046875,-0.1921875,0,0.5390625,0.3398438,0.046875,-0.20625,0,0.5390625,0.328125,0.140625,-0.2015625,0,0.6171875,0.3320313,0.1125,-0.2109375,0,0.59375,0.3242188,0.0421875,-0.215625,0,0.5351563,0.3203125,0.0375,-0.225,0,0.53125,0.3125,0.0375,-0.2484375,0,0.53125,0.2929688,0.6,-0.0375,0,1,0.46875,0.5671875,-0.075,0,0.9726563,0.4375,0.6,-0.075,0,1,0.4375,0.5390625,-0.0046875,0,0.9492188,0.4960938,0.4875,0.01875,0,0.90625,0.515625,0.4546875,0.01875,0,0.8789063,0.515625,0.4453125,0.0140625,0,0.8710938,0.5117188,0.4453125,-0.009375,0,0.8710938,0.4921875,-0.5625,0.0140625,0,0.03125,0.5117188,-0.553125,-0.0046875,0,0.0390625,0.4960938,-0.553125,0.0046875,0,0.0390625,0.5039063,-0.5671875,-0.01875,0,0.02734378,0.484375,-0.571875,0.0140625,0,0.02343747,0.5117188,-0.5859375,-0.01875,0,0.01171875,0.484375,-0.590625,-0.0046875,0,0.00781253,0.4960938],[112,111,147,146,147,111,110,146,111,109,146,110,171,169,170,168,170,169,165,168,169,166,168,165,167,166,165,164,163,158,162,158,163,161,158,162,160,158,161,157,158,160,159,158,157,148,145,153,152,153,145,144,152,145,143,152,144,156,155,142,154,142,155,148,142,154,153,142,148,152,142,153,143,142,152,151,90,149,150,149,90,88,149,150,148,149,88,145,148,88,86,145,88,86,112,107,147,107,112,146,107,147,109,107,146,106,122,133,132,133,122,119,132,122,131,132,119,105,103,121,120,121,103,104,120,103,145,108,144,143,144,108,142,143,108,141,142,108,124,141,108,140,141,124,125,140,124,123,140,125,139,140,123,137,140,139,136,137,139,138,137,136,123,130,134,135,134,130,106,133,108,123,108,133,132,123,133,131,123,132,119,123,131,118,123,119,130,123,118,126,130,118,129,130,126,127,129,126,128,127,126,108,123,124,125,124,123,106,105,122,121,122,105,119,122,121,120,119,121,104,119,120,102,119,104,115,119,102,118,119,115,116,118,115,117,116,115,114,113,39,36,39,113,38,36,113,55,38,113,102,55,113,56,38,55,64,55,102,63,64,102,112,63,102,62,63,112,60,62,112,57,60,112,59,57,112,100,59,112,72,59,100,99,100,112,93,99,112,101,93,112,89,101,112,88,89,112,87,88,112,86,87,112,111,112,102,110,111,102,109,110,102,105,109,102,107,109,105,106,107,105,108,107,106,103,105,102,104,103,102,93,101,89,96,99,93,72,100,71,99,71,100,96,71,99,71,96,97,98,97,96,95,93,94,92,94,93,89,92,93,90,92,89,91,90,89,88,87,86,47,46,80,44,80,46,79,80,44,78,79,44,41,78,44,77,78,41,42,77,41,85,84,83,39,83,84,37,83,39,38,83,37,81,83,38,82,81,38,47,80,48,79,48,80,74,48,79,78,74,79,77,74,78,42,74,77,62,74,42,40,62,42,66,62,40,76,62,66,63,62,76,61,74,62,73,74,61,75,74,73,61,58,73,71,73,58,59,71,58,72,71,59,70,69,40,68,40,69,65,40,68,66,40,65,67,66,65,54,52,63,64,63,52,62,60,61,58,61,60,57,58,60,59,58,57,56,55,53,52,53,55,54,53,52,51,50,49,45,49,50,48,49,45,47,48,45,46,47,45,44,46,45,43,44,45,41,44,43,40,41,43,42,41,40,39,36,37,38,37,36,35,34,33,32,33,34,30,33,32,29,30,32,31,30,29,28,27,26,23,26,27,25,26,23,24,25,23,21,24,23,20,21,23,22,21,20,19,18,17,16,17,18,14,17,16,13,14,16,15,14,13,12,11,10,7,10,11,8,10,7,9,8,7,6,4,5,3,5,4,0,3,4,1,3,0,2,1,0],-0.000050409696996212,-0.000104494392871857,0.99994957447052,0.999895513057709,0.00781252980232239,0.0546875,1,0.82421875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,2.01291251182556,14.0267505645752]},{"id":29382,"path":"Assets/Content/Sprites/EXAMPLE.png","assetBundleId":-1,"data":["EXAMPLE",6,24620,[0,0,0,5.4,9.6,0],[-5.4,9.6,0,0,1,5.4,-9.6,0,1,-3.178915e-8,5.4,9.6,0,1,1,-5.4,-9.6,0,0,-3.178915e-8],[3,0,1,2,1,0],0,-3.17891455381414e-8,1,0.999999940395355,0,-3.17891455381414e-8,1,0.999999940395355,0,0,0,0,[0,0,0,0],[-5.4,-9.6,5.4,9.6],100,1080,1920,1080,1920,540,960,0,0]},{"id":29278,"path":"Assets/Content/Sprites/Ingredients/russet potatoes.png","assetBundleId":-1,"data":["russet potatoes",6,29276,[-0.007031232,-0.004687503,0,0.5085938,0.346875,0],[-0.309375,-0.3046875,0,0.2421875,0.2460938,-0.346875,-0.2765625,0,0.2109375,0.2695313,-0.384375,-0.3046875,0,0.1796875,0.2460938,0.5015625,0.178125,0,0.9179688,0.6484375,0.4546875,-0.1171875,0,0.8789063,0.4023438,0.5015625,-0.159375,0,0.9179688,0.3671875,0.384375,0.3421875,0,0.8203125,0.7851563,0.3140625,-0.2203125,0,0.7617188,0.3164063,-0.1125,0.3421875,0,0.40625,0.7851563,0.3140625,-0.2625,0,0.7617188,0.28125,-0.1734375,-0.24375,0,0.3554688,0.296875,-0.346875,-0.24375,0,0.2109375,0.296875,-0.515625,0.2203125,0,0.0703125,0.6835938,-0.515625,-0.065625,0,0.0703125,0.4453125,0.4453125,-0.2625,0,0.8710938,0.28125,0.35625,-0.2578125,0,0.796875,0.2851563,0.31875,-0.3046875,0,0.765625,0.2460938,0.20625,-0.3515625,0,0.671875,0.2070313,0.31875,-0.328125,0,0.765625,0.2265625,-0.253125,-0.3515625,0,0.2890625,0.2070313,0.31875,-0.2671875,0,0.765625,0.2773438,0.3703125,-0.2203125,0,0.8085938,0.3164063,0.3234375,-0.3046875,0,0.7695313,0.2460938,0.3609375,-0.2390625,0,0.8007813,0.3007813],[16,20,22,9,7,20,21,20,7,22,20,21,23,22,21,1,11,0,10,0,11,16,0,10,9,16,10,20,16,9,0,16,19,17,19,16,18,17,16,15,4,14,5,14,4,13,12,2,8,2,12,11,2,8,1,2,11,10,11,8,9,10,8,7,9,8,6,7,8,4,7,6,3,4,6,5,4,3,2,1,0],-0.000167608261108398,-0.00029735267162323,0.999832391738892,0.999702632427216,0.0703125,0.20703125,0.91796875,0.78515625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,18.0429077148438,53.0761222839355]},{"id":29342,"path":"Assets/Content/Sprites/Ingredients/oat.png","assetBundleId":-1,"data":["oat",6,29340,[0.01640625,0.03750001,0,0.3914062,0.4453125,0],[0.4078125,-0.0515625,0,0.8398438,0.4570313,0.3421875,-0.3796875,0,0.7851563,0.1835938,0.4078125,-0.2203125,0,0.8398438,0.3164063,0.3234375,0.009375,0,0.7695313,0.5078125,0.2578125,-0.4078125,0,0.7148438,0.1601563,0.24375,0.4828125,0,0.703125,0.9023438,0,-0.4078125,0,0.5,0.1601563,-0.2765625,-0.3890625,0,0.2695313,0.1757813,-0.3375,0.4828125,0,0.21875,0.9023438,-0.375,0.0609375,0,0.1875,0.5507813,-0.375,-0.3328125,0,0.1875,0.2226563],[10,9,7,8,7,9,5,7,8,6,7,5,4,6,5,3,4,5,1,4,3,0,1,3,2,1,0],-0.00029735267162323,-0.00029735267162323,0.999702632427216,0.999702632427216,0.1875,0.16015625,0.83984375,0.90234375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,48.0761222839355,41.0761222839355]},{"id":29324,"path":"Assets/Content/Sprites/Ingredients/sweet petato.png","assetBundleId":-1,"data":["sweet petato",6,29322,[-0.007031247,-0.09609375,0,0.3539063,0.2882813,0],[0.1125,-0.31875,0,0.59375,0.234375,0.121875,-0.35625,0,0.6015625,0.203125,0.121875,-0.3328125,0,0.6015625,0.2226563,0.0984375,-0.384375,0,0.5820313,0.1796875,0.046875,-0.384375,0,0.5390625,0.1796875,0.009375,-0.31875,0,0.5078125,0.234375,0,-0.328125,0,0.5,0.2265625,0,-0.35625,0,0.5,0.203125,0.3140625,0.0046875,0,0.7617188,0.5039063,0.346875,-0.1640625,0,0.7890625,0.3632813,0.346875,-0.0796875,0,0.7890625,0.4335938,0.28125,-0.271875,0,0.734375,0.2734375,0.225,-0.28125,0,0.6875,0.265625,0.0890625,0.1921875,0,0.5742188,0.6601563,0.0609375,-0.28125,0,0.5507813,0.265625,-0.2296875,-0.1546875,0,0.3085938,0.3710938,-0.234375,-0.1359375,0,0.3046875,0.3867188,-0.24375,-0.121875,0,0.296875,0.3984375,-0.2625,-0.121875,0,0.28125,0.3984375,-0.271875,-0.1265625,0,0.2734375,0.3945313,-0.2953125,0.1921875,0,0.2539063,0.6601563,-0.271875,-0.1359375,0,0.2734375,0.3867188,-0.24375,-0.1640625,0,0.296875,0.3632813,-0.24375,-0.2015625,0,0.296875,0.3320313,-0.3609375,0.178125,0,0.1992188,0.6484375,-0.3609375,-0.0328125,0,0.1992188,0.4726563],[21,19,22,18,22,19,17,22,18,15,22,17,16,15,17,24,21,25,23,25,21,20,21,24,22,23,21,14,23,22,15,14,22,13,19,20,21,20,19,18,19,13,17,18,13,16,17,13,15,16,13,14,15,13,12,14,13,8,12,13,11,12,8,9,11,8,10,9,8,7,6,4,5,4,6,0,4,5,3,4,0,1,3,0,2,1,0],-0.00029735267162323,-0.000104501843452454,0.999702632427216,0.999895513057709,0.19921875,0.1796875,0.7890625,0.66015625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,51.0761222839355,46.0267524719238]},{"id":29416,"path":"Assets/Content/Sprites/Ingredients/parsley.png","assetBundleId":-1,"data":["parsley",6,29414,[0.03281249,-0.007031247,0,0.4453125,0.3632813,0],[0.384375,0.2484375,0,0.8203125,0.7070313,0.1453125,0.35625,0,0.6210938,0.796875,0.31875,0.0890625,0,0.765625,0.5742188,0.478125,-0.2671875,0,0.8984375,0.2773438,0.478125,-0.0515625,0,0.8984375,0.4570313,0.0984375,-0.3703125,0,0.5820313,0.1914063,-0.1921875,0.35625,0,0.3398438,0.796875,-0.384375,-0.3703125,0,0.1796875,0.1914063,-0.4125,0.2203125,0,0.15625,0.6835938,-0.4125,-0.3328125,0,0.15625,0.2226563],[9,8,7,6,7,8,5,7,6,1,5,6,3,5,1,2,3,1,4,3,2,2,1,0],-0.000227361917495728,-0.000167608261108398,0.999772667884827,0.999832391738892,0.15625,0.19140625,0.8984375,0.796875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,40.0582046508789,49.0429077148438]},{"id":29648,"path":"Assets/Content/Sprites/Ingredients/sugar.png","assetBundleId":-1,"data":["sugar",6,29646,[0.0234375,0.02109376,0,0.3609375,0.4148438,0],[0.3046875,0.290625,0,0.7539063,0.7421875,0.328125,0.1875,0,0.7734375,0.65625,0.3375,0.1921875,0,0.78125,0.6601563,0.2953125,0.1875,0,0.7460938,0.65625,0.2765625,0.2953125,0,0.7304688,0.7460938,0.2109375,0.2953125,0,0.6757813,0.7460938,0.2109375,0.20625,0,0.6757813,0.671875,0.2015625,0.2859375,0,0.6679688,0.7382813,0.2015625,0.2296875,0,0.6679688,0.6914063,0.35625,0.28125,0,0.796875,0.734375,0.365625,0.2203125,0,0.8046875,0.6835938,0.365625,0.2578125,0,0.8046875,0.7148438,0.384375,-0.39375,0,0.8203125,0.171875,0.384375,0.0421875,0,0.8203125,0.5351563,0.046875,0.4359375,0,0.5390625,0.8632813,-0.1359375,0.4359375,0,0.3867188,0.8632813,-0.271875,-0.39375,0,0.2734375,0.171875,-0.3234375,0.31875,0,0.2304688,0.765625,-0.3375,0.225,0,0.21875,0.6875,-0.3375,-0.31875,0,0.21875,0.234375,0.28125,0.3609375,0,0.734375,0.8007813],[20,5,14,7,14,5,8,14,7,4,5,20,0,4,20,19,18,16,17,16,18,15,16,17,12,16,15,14,12,15,8,12,14,6,12,8,3,12,6,1,12,3,2,12,1,13,12,2,0,9,2,10,2,9,11,10,9,8,7,6,5,6,7,3,6,5,4,3,5,0,3,4,1,3,0,2,1,0],-0.000104501843452454,-0.000167608261108398,0.999895513057709,0.999832391738892,0.21875,0.171875,0.8203125,0.86328125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,56.0267524719238,44.0429077148438]},{"id":29878,"path":"Assets/Content/Sprites/Ingredients/onion.png","assetBundleId":-1,"data":["onion",6,29876,[-0.0234375,0.03515625,0,0.4171875,0.4054688,0],[0.39375,0.440625,0,0.828125,0.8671875,0.1125,-0.3703125,0,0.59375,0.1914063,0.39375,-0.1453125,0,0.828125,0.3789063,0.0234375,0.440625,0,0.5195313,0.8671875,-0.1921875,0.3796875,0,0.3398438,0.8164063,-0.3046875,-0.3703125,0,0.2460938,0.1914063,-0.440625,-0.028125,0,0.1328125,0.4765625,-0.440625,-0.290625,0,0.1328125,0.2578125],[7,6,5,4,5,6,1,5,4,3,1,4,0,1,3,2,1,0],-0.00029735267162323,-0.00029735267162323,0.999702632427216,0.999702632427216,0.1328125,0.19140625,0.828125,0.8671875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,34.0761222839355,49.0761222839355]},{"id":29592,"path":"Assets/Content/Sprites/Ingredients/flour.png","assetBundleId":-1,"data":["flour",6,29590,[0.009375006,0.05390625,0,0.5671875,0.4335938,0],[0.1921875,-0.35625,0,0.6601563,0.203125,0.1875,-0.3796875,0,0.65625,0.1835938,0.1921875,-0.3703125,0,0.6601563,0.1914063,0.1828125,-0.3515625,0,0.6523438,0.2070313,0.159375,-0.3796875,0,0.6328125,0.1835938,0.1546875,-0.3515625,0,0.6289063,0.2070313,0.15,-0.3609375,0,0.625,0.1992188,0.15,-0.375,0,0.625,0.1875,-0.5015625,-0.2953125,0,0.08203122,0.2539063,-0.5109375,-0.309375,0,0.07421875,0.2421875,-0.5015625,-0.3046875,0,0.08203122,0.2460938,-0.5203125,-0.2765625,0,0.06640628,0.2695313,-0.5203125,-0.309375,0,0.06640628,0.2421875,-0.54375,-0.2765625,0,0.04687503,0.2695313,-0.5484375,-0.3,0,0.04296872,0.25,-0.553125,-0.2859375,0,0.0390625,0.2617188,-0.4921875,0.0890625,0,0.08984375,0.5742188,-0.496875,0.05625,0,0.0859375,0.546875,-0.4875,0.075,0,0.09375,0.5625,-0.5109375,0.0890625,0,0.07421875,0.5742188,-0.5296875,0.0515625,0,0.05859375,0.5429688,-0.54375,0.084375,0,0.04687503,0.5703125,-0.553125,0.0515625,0,0.0390625,0.5429688,-0.5578125,0.065625,0,0.03515625,0.5546875,0.5671875,0.0796875,0,0.9726563,0.5664063,0.5765625,0.05625,0,0.9804688,0.546875,0.5765625,0.0703125,0,0.9804688,0.5585938,0.5625,0.0515625,0,0.96875,0.5429688,0.5484375,0.084375,0,0.9570313,0.5703125,0.5484375,0.05625,0,0.9570313,0.546875,0.5390625,0.0703125,0,0.9492188,0.5585938,0.3046875,0.225,0,0.7539063,0.6875,0.271875,0.2015625,0,0.7265625,0.6679688,0.3046875,0.2203125,0,0.7539063,0.6835938,0.2625,0.2015625,0,0.71875,0.6679688,0.290625,0.2390625,0,0.7421875,0.6992188,0.3046875,0.234375,0,0.7539063,0.6953125,0.2671875,0.2296875,0,0.7226563,0.6914063,0.2578125,0.20625,0,0.7148438,0.671875,0.253125,0.215625,0,0.7109375,0.6796875,0.45,0.0796875,0,0.875,0.5664063,0.459375,-0.159375,0,0.8828125,0.3671875,0.459375,0.0703125,0,0.8828125,0.5585938,0.3984375,-0.2390625,0,0.8320313,0.3007813,0.45,0.0984375,0,0.875,0.5820313,0.459375,0.0984375,0,0.8828125,0.5820313,0.459375,0.1734375,0,0.8828125,0.6445313,0.3375,0.234375,0,0.78125,0.6953125,0.31875,0.2296875,0,0.765625,0.6914063,0.2578125,0.2015625,0,0.7148438,0.6679688,0.1546875,0.2765625,0,0.6289063,0.7304688,0.1359375,0.28125,0,0.6132813,0.734375,0.1359375,0.2671875,0,0.6132813,0.7226563,0.121875,0.2625,0,0.6015625,0.71875,0.1125,0.271875,0,0.59375,0.7265625,-0.0796875,0.2625,0,0.4335938,0.71875,-0.1265625,0.253125,0,0.3945313,0.7109375,-0.140625,0.2484375,0,0.3828125,0.7070313,-0.140625,0.225,0,0.3828125,0.6875,-0.16875,0.3515625,0,0.359375,0.7929688,-0.15,0.346875,0,0.375,0.7890625,-0.328125,-0.2390625,0,0.2265625,0.3007813,-0.4359375,0.103125,0,0.1367188,0.5859375,-0.4359375,-0.16875,0,0.1367188,0.359375,0.5296875,0.0984375,0,0.9414063,0.5820313,0.534375,0.075,0,0.9453125,0.5625,0.534375,0.0890625,0,0.9453125,0.5742188,0.525,0.0703125,0,0.9375,0.5585938,0.271875,0.3140625,0,0.7265625,0.7617188,0.28125,0.290625,0,0.734375,0.7421875,0.28125,0.3046875,0,0.734375,0.7539063,0.2671875,0.2859375,0,0.7226563,0.7382813,0.2578125,0.309375,0,0.7148438,0.7578125,0.2578125,0.2953125,0,0.7148438,0.7460938,-0.1125,0.3234375,0,0.40625,0.7695313,-0.1171875,0.2625,0,0.4023438,0.71875,-0.1078125,0.290625,0,0.4101563,0.7421875,-0.1265625,0.3421875,0,0.3945313,0.7851563,-0.13125,0.2671875,0,0.390625,0.7226563,-0.140625,0.3375,0,0.3828125,0.78125,-0.140625,0.28125,0,0.3828125,0.734375,-0.103125,0.4171875,0,0.4140625,0.8476563,-0.1078125,0.39375,0,0.4101563,0.828125,-0.103125,0.403125,0,0.4140625,0.8359375,-0.1171875,0.4359375,0,0.4023438,0.8632813,-0.1734375,0.4125,0,0.3554688,0.84375,0.35625,0.4875,0,0.796875,0.90625,0.346875,0.234375,0,0.7890625,0.6953125,0.3890625,0.2296875,0,0.8242188,0.6914063,0.178125,0.309375,0,0.6484375,0.7578125,0.1640625,0.3140625,0,0.6367188,0.7617188,0.1546875,0.3046875,0,0.6289063,0.7539063,0.1265625,0.290625,0,0.6054688,0.7421875,0.1125,0.2859375,0,0.59375,0.7382813,-0.103125,0.4265625,0,0.4140625,0.8554688,-0.178125,0.4875,0,0.3515625,0.90625,-0.1875,0.45,0,0.34375,0.875,0.178125,0.2953125,0,0.6484375,0.7460938,0.1640625,0.290625,0,0.6367188,0.7421875,-0.103125,0.4078125,0,0.4140625,0.8398438,-0.103125,0.3234375,0,0.4140625,0.7695313,-0.1078125,0.35625,0,0.4101563,0.796875,-0.159375,0.39375,0,0.3671875,0.828125,-0.16875,0.35625,0,0.359375,0.796875,-0.159375,0.3609375,0,0.3671875,0.8007813,-0.1734375,0.4078125,0,0.3554688,0.8398438,-0.1828125,0.35625,0,0.3476563,0.796875,-0.1875,0.403125,0,0.34375,0.8359375,-0.1875,0.365625,0,0.34375,0.8046875,-0.1125,0.3890625,0,0.40625,0.8242188,-0.1078125,0.3609375,0,0.4101563,0.8007813,-0.1078125,0.375,0,0.4101563,0.8125,-0.1171875,0.35625,0,0.4023438,0.796875,-0.13125,0.35625,0,0.390625,0.796875,-0.1453125,0.3890625,0,0.3789063,0.8242188,-0.1453125,0.365625,0,0.3789063,0.8046875],[115,114,113,109,113,114,112,113,109,110,112,109,111,110,109,108,107,106,105,106,107,103,106,105,102,103,105,104,103,102,99,83,81,101,83,100,99,100,83,55,100,99,81,55,99,94,55,81,54,93,53,92,53,93,52,53,92,51,52,92,91,90,98,97,98,90,89,97,90,91,98,50,87,50,98,97,87,98,89,87,97,71,87,89,73,71,89,69,87,71,70,87,69,96,95,85,84,85,95,86,84,95,94,84,86,55,94,86,93,55,86,54,55,93,92,93,86,90,92,86,91,92,90,51,92,91,50,51,91,89,90,86,72,89,86,73,89,72,68,72,86,70,68,86,87,70,86,88,87,86,85,84,82,81,82,84,83,82,81,60,79,58,57,58,79,80,57,79,78,80,79,77,78,79,75,78,77,74,75,77,76,75,74,73,72,71,68,71,72,69,71,68,70,69,68,49,38,34,42,45,67,64,67,45,65,67,64,66,65,64,63,62,61,59,61,62,58,61,59,43,61,58,60,58,59,57,43,58,56,43,57,55,43,56,54,43,55,53,43,54,52,43,53,51,43,52,50,43,51,38,43,50,49,43,38,34,43,49,32,43,34,33,43,32,31,43,33,48,43,31,47,43,48,46,43,47,44,43,46,40,43,44,45,44,46,40,44,42,45,42,44,43,40,41,42,41,40,39,37,38,34,38,37,31,34,37,35,31,37,36,31,35,34,31,32,33,32,31,30,28,29,27,29,28,24,27,28,25,27,24,26,25,24,23,21,22,20,22,21,19,20,21,17,20,19,16,17,19,18,17,16,15,13,14,12,14,13,11,12,13,9,12,11,8,9,11,10,9,8,7,6,4,5,4,6,3,4,5,1,4,3,0,1,3,2,1,0],-0.00013086199760437,-0.00029735267162323,0.999869108200073,0.999702632427216,0.03515625,0.18359375,0.98046875,0.90625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,9.03350067138672,47.0761222839355]},{"id":29750,"path":"Assets/Content/Sprites/Ingredients/ground turkey.png","assetBundleId":-1,"data":["ground turkey",6,29748,[-0.007031262,0.004687503,0,0.4054688,0.2765625,0],[0.3984375,0.1078125,0,0.8320313,0.5898438,0.2015625,-0.271875,0,0.6679688,0.2734375,0.3984375,-0.20625,0,0.8320313,0.328125,0.1640625,0.28125,0,0.6367188,0.734375,-0.1640625,0.28125,0,0.3632813,0.734375,-0.2671875,-0.271875,0,0.2773438,0.2734375,-0.31875,0.1265625,0,0.234375,0.6054688,-0.31875,-0.20625,0,0.234375,0.328125,-0.39375,-0.0703125,0,0.171875,0.4414063,-0.3890625,-0.0796875,0,0.1757813,0.4335938,-0.3890625,-0.0703125,0,0.1757813,0.4414063,-0.39375,-0.0703125,0,0.171875,0.4414063,-0.375,-0.084375,0,0.1875,0.4296875,-0.3890625,-0.084375,0,0.1757813,0.4296875,-0.403125,-0.065625,0,0.1640625,0.4453125,-0.403125,-0.0890625,0,0.1640625,0.4257813,-0.4125,-0.075,0,0.15625,0.4375,-0.35625,-0.0375,0,0.203125,0.46875,-0.3609375,-0.0796875,0,0.1992188,0.4335938,-0.35625,-0.0703125,0,0.203125,0.4414063,-0.365625,-0.0375,0,0.1953125,0.46875,-0.3703125,-0.028125,0,0.1914063,0.4765625,-0.3703125,-0.028125,0,0.1914063,0.4765625,-0.39375,-0.028125,0,0.171875,0.4765625,-0.328125,-0.009375,0,0.2265625,0.4921875,-0.3375,-0.0375,0,0.21875,0.46875,-0.328125,-0.028125,0,0.2265625,0.4765625,-0.3609375,-0.009375,0,0.1992188,0.4921875,-0.3703125,-0.0234375,0,0.1914063,0.4804688],[20,21,17,28,27,21,17,21,27,24,17,27,25,17,24,26,25,24,8,23,10,22,10,23,12,10,22,18,12,22,21,18,22,20,18,21,17,18,20,19,18,17,11,14,8,16,14,15,13,15,14,11,13,14,9,13,11,9,10,12,11,8,9,10,9,8,7,6,5,4,5,6,1,5,4,3,1,4,0,1,3,2,1,0],-0.0000504404306411743,-0.000297337770462036,0.99994957447052,0.99970269203186,0.15625,0.2734375,0.83203125,0.734375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,40.0129127502441,70.0761184692383]},{"id":29622,"path":"Assets/Content/Sprites/Ingredients/masala salt.png","assetBundleId":-1,"data":["masala salt",6,29620,[0.0234375,0.02109376,0,0.3609375,0.4148438,0],[0.3046875,0.290625,0,0.7539063,0.7421875,0.328125,0.1875,0,0.7734375,0.65625,0.3375,0.1921875,0,0.78125,0.6601563,0.2953125,0.1875,0,0.7460938,0.65625,0.2765625,0.2953125,0,0.7304688,0.7460938,0.2109375,0.2953125,0,0.6757813,0.7460938,0.2109375,0.20625,0,0.6757813,0.671875,0.2015625,0.2859375,0,0.6679688,0.7382813,0.2015625,0.2296875,0,0.6679688,0.6914063,0.35625,0.28125,0,0.796875,0.734375,0.365625,0.2203125,0,0.8046875,0.6835938,0.365625,0.2578125,0,0.8046875,0.7148438,0.384375,-0.39375,0,0.8203125,0.171875,0.384375,0.0421875,0,0.8203125,0.5351563,0.046875,0.4359375,0,0.5390625,0.8632813,-0.1359375,0.4359375,0,0.3867188,0.8632813,-0.271875,-0.39375,0,0.2734375,0.171875,-0.3234375,0.31875,0,0.2304688,0.765625,-0.3375,0.225,0,0.21875,0.6875,-0.3375,-0.31875,0,0.21875,0.234375,0.28125,0.3609375,0,0.734375,0.8007813],[20,5,14,7,14,5,8,14,7,4,5,20,0,4,20,19,18,16,17,16,18,15,16,17,12,16,15,14,12,15,8,12,14,6,12,8,3,12,6,1,12,3,2,12,1,13,12,2,0,9,2,10,2,9,11,10,9,8,7,6,5,6,7,3,6,5,4,3,5,0,3,4,1,3,0,2,1,0],-0.000104501843452454,-0.000167608261108398,0.999895513057709,0.999832391738892,0.21875,0.171875,0.8203125,0.86328125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,56.0267524719238,44.0429077148438]},{"id":29944,"path":"Assets/Content/Sprites/Ingredients/chives.png","assetBundleId":-1,"data":["chives",6,29942,[-0.004687503,0.009375006,0,0.4828125,0.253125,0],[0.478125,0.05625,0,0.8984375,0.546875,0.440625,-0.1125,0,0.8671875,0.40625,0.478125,-0.0515625,0,0.8984375,0.4570313,0.3796875,0.2625,0,0.8164063,0.71875,0.3234375,0.2625,0,0.7695313,0.71875,-0.28125,-0.24375,0,0.265625,0.296875,-0.4171875,-0.24375,0,0.1523438,0.296875,-0.43125,-0.16875,0,0.140625,0.359375,-0.4359375,0.0234375,0,0.1367188,0.5195313,-0.4359375,-0.16875,0,0.1367188,0.359375,-0.45,-0.16875,0,0.125,0.359375,-0.4875,-0.065625,0,0.09375,0.4453125,-0.4875,-0.140625,0,0.09375,0.3828125,-0.4453125,-0.178125,0,0.1289063,0.3515625,-0.4453125,-0.2296875,0,0.1289063,0.3085938],[14,13,6,9,6,13,7,6,9,12,11,10,8,10,11,9,10,8,7,9,8,4,7,8,6,7,4,5,6,4,1,5,4,3,1,4,0,1,3,2,1,0],-0.00000982731580734253,-0.000297337770462036,0.999990165233612,0.99970269203186,0.09375,0.296875,0.8984375,0.71875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,24.0025157928467,76.0761184692383]},{"id":29848,"path":"Assets/Content/Sprites/Ingredients/groung lamb.png","assetBundleId":-1,"data":["groung lamb",6,29846,[-0.004687503,-0.06796876,0,0.4125,0.3445313,0],[-0.2859375,-0.271875,0,0.2617188,0.2734375,-0.2953125,-0.28125,0,0.2539063,0.265625,-0.290625,-0.290625,0,0.2578125,0.2578125,-0.24375,-0.3046875,0,0.296875,0.2460938,-0.2671875,-0.271875,0,0.2773438,0.2734375,-0.2953125,-0.3328125,0,0.2539063,0.2226563,-0.3,-0.2671875,0,0.25,0.2773438,-0.3,-0.3328125,0,0.25,0.2226563,-0.328125,-0.24375,0,0.2265625,0.296875,-0.3515625,-0.3046875,0,0.2070313,0.2460938,-0.35625,-0.24375,0,0.203125,0.296875,-0.35625,-0.2953125,0,0.203125,0.2539063,-0.225,-0.2953125,0,0.3125,0.2539063,-0.2390625,-0.309375,0,0.3007813,0.2421875,0.4078125,0.1734375,0,0.8398438,0.6445313,0.31875,-0.3421875,0,0.765625,0.2148438,0.4078125,-0.4125,0,0.8398438,0.15625,0.3,-0.35625,0,0.75,0.203125,0.2484375,0.2765625,0,0.7070313,0.7304688,0.215625,-0.39375,0,0.6796875,0.171875,0.1125,-0.403125,0,0.59375,0.1640625,0.1078125,0.2484375,0,0.5898438,0.7070313,0.09375,0.253125,0,0.578125,0.7109375,0.084375,0.24375,0,0.5703125,0.703125,-0.140625,-0.2953125,0,0.3828125,0.2539063,-0.0421875,-0.3,0,0.4648438,0.25,-0.1640625,-0.271875,0,0.3632813,0.2734375,-0.2765625,-0.2484375,0,0.2695313,0.2929688,-0.2953125,-0.2390625,0,0.2539063,0.3007813,-0.365625,0.2765625,0,0.1953125,0.7304688,-0.365625,-0.178125,0,0.1953125,0.3515625,-0.4125,0.1359375,0,0.15625,0.6132813,-0.4125,-0.084375,0,0.15625,0.4296875,0.31875,-0.4125,0,0.765625,0.15625,0.1078125,0.234375,0,0.5898438,0.6953125,0.103125,-0.4125,0,0.5859375,0.15625,0.09375,0.2296875,0,0.578125,0.6914063,-0.1265625,-0.3140625,0,0.3945313,0.2382813,-0.2390625,-0.3328125,0,0.3007813,0.2226563,-0.3234375,-0.4125,0,0.2304688,0.15625,-0.3515625,-0.3609375,0,0.2070313,0.1992188,-0.3984375,-0.271875,0,0.1679688,0.2734375,-0.3890625,-0.3046875,0,0.1757813,0.2460938,-0.3890625,-0.28125,0,0.1757813,0.265625,-0.403125,-0.309375,0,0.1640625,0.2421875,-0.4078125,-0.271875,0,0.1601563,0.2734375,-0.4171875,-0.28125,0,0.1523438,0.265625,-0.4171875,-0.2953125,0,0.1523438,0.2539063],[47,46,44,45,44,46,41,44,45,42,44,41,43,42,41,5,3,38,13,38,3,37,24,25,23,22,36,34,36,22,21,34,22,40,5,39,35,39,5,38,35,5,13,35,38,12,35,13,37,35,12,24,37,12,25,35,37,23,35,25,36,35,23,34,35,36,20,35,34,21,20,34,33,15,16,32,31,30,29,30,31,28,30,29,23,28,29,22,23,29,18,22,29,27,28,23,26,27,23,24,26,23,25,24,23,21,22,18,20,21,18,19,20,18,17,19,18,14,17,18,15,17,14,16,15,14,13,3,12,11,10,9,8,9,10,7,9,8,6,7,8,5,7,6,1,5,6,2,5,1,3,5,2,0,3,2,4,3,0,2,1,0],-0.00029735267162323,-0.000104501843452454,0.999702632427216,0.999895513057709,0.15234375,0.15625,0.83984375,0.73046875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,39.0761222839355,40.0267524719238]},{"id":29678,"path":"Assets/Content/Sprites/Ingredients/soy sauce.png","assetBundleId":-1,"data":["soy sauce",6,29676,[0.0234375,0,0,0.1640625,0.4734375,0],[0.121875,0.4734375,0,0.6015625,0.8945313,0.1875,-0.4734375,0,0.65625,0.1054688,0.1875,0.4125,0,0.65625,0.84375,-0.0421875,0.4734375,0,0.4648438,0.8945313,-0.065625,0.4640625,0,0.4453125,0.8867188,-0.140625,0.3140625,0,0.3828125,0.7617188,-0.140625,-0.4734375,0,0.3828125,0.1054688],[6,5,1,4,1,5,3,1,4,0,1,3,2,1,0],-0.000297337770462036,-0.000297345221042633,0.99970269203186,0.999702632427216,0.3828125,0.10546875,0.65625,0.89453125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,98.0761184692383,27.0761203765869]},{"id":29948,"path":"Assets/Content/Sprites/Ingredients/sesame oil.png","assetBundleId":-1,"data":["sesame oil",6,29946,[0,0.002343744,0,0.2484375,0.4757813,0],[0.2484375,-0.0140625,0,0.7070313,0.4882813,0.1828125,-0.4734375,0,0.6523438,0.1054688,0.2484375,-0.3375,0,0.7070313,0.21875,0.103125,0.478125,0,0.5859375,0.8984375,-0.0984375,0.478125,0,0.4179688,0.8984375,-0.159375,-0.4734375,0,0.3671875,0.1054688,-0.2484375,0.0703125,0,0.2929688,0.5585938,-0.2484375,-0.375,0,0.2929688,0.1875],[7,6,5,4,5,6,1,5,4,3,1,4,0,1,3,2,1,0],-0.00010448694229126,-0.000297345221042633,0.999895513057709,0.999702632427216,0.29296875,0.10546875,0.70703125,0.8984375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,75.0267486572266,27.0761203765869]},{"id":29982,"path":"Assets/Content/Sprites/Ingredients/thyme.png","assetBundleId":-1,"data":["thyme",6,29980,[0,0.05625001,0,0.45,0.290625,0],[0.45,0.346875,0,0.875,0.7890625,0.4453125,-0.2296875,0,0.8710938,0.3085938,0.45,-0.1875,0,0.875,0.34375,0.39375,-0.234375,0,0.828125,0.3046875,0.178125,0.346875,0,0.6484375,0.7890625,-0.290625,0.0140625,0,0.2578125,0.5117188,-0.4125,-0.234375,0,0.15625,0.3046875,-0.45,-0.1453125,0,0.125,0.3789063,-0.45,-0.2296875,0,0.125,0.3085938],[8,7,6,5,6,7,3,6,5,4,3,5,0,3,4,1,3,0,2,1,0],-0.00029735267162323,-0.000200450420379639,0.999702632427216,0.99979954957962,0.125,0.3046875,0.875,0.7890625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,32.0761222839355,78.0513153076172]},{"id":30120,"path":"Assets/Content/Sprites/Ingredients/Dijon mustard.png","assetBundleId":-1,"data":["Dijon mustard",6,30118,[0,0.01406251,0,0.3234375,0.4828125,0],[-0.271875,-0.4265625,0,0.2734375,0.1445313,-0.253125,-0.4546875,0,0.2890625,0.1210938,-0.253125,-0.4453125,0,0.2890625,0.1289063,-0.271875,-0.46875,0,0.2734375,0.109375,-0.2859375,-0.46875,0,0.2617188,0.109375,-0.2953125,-0.4265625,0,0.2539063,0.1445313,-0.2953125,-0.45,0,0.2539063,0.125,0.290625,-0.4359375,0,0.7421875,0.1367188,0.271875,-0.46875,0,0.7265625,0.109375,0.290625,-0.459375,0,0.7421875,0.1171875,0.2484375,-0.46875,0,0.7070313,0.109375,0.2390625,-0.4359375,0,0.6992188,0.1367188,0.2296875,-0.4640625,0,0.6914063,0.1132813,0.225,-0.45,0,0.6875,0.125,0.2015625,-0.440625,0,0.6679688,0.1328125,0.1921875,-0.46875,0,0.6601563,0.109375,0.20625,-0.4546875,0,0.671875,0.1210938,0.1359375,-0.4359375,0,0.6132813,0.1367188,0.0703125,-0.4359375,0,0.5585938,0.1367188,0.0703125,-0.46875,0,0.5585938,0.109375,0.065625,-0.4453125,0,0.5546875,0.1289063,0.065625,-0.4640625,0,0.5546875,0.1132813,-0.121875,-0.4265625,0,0.3984375,0.1445313,-0.1078125,-0.4453125,0,0.4101563,0.1289063,-0.1078125,-0.43125,0,0.4101563,0.140625,-0.121875,-0.45,0,0.3984375,0.125,-0.13125,-0.4359375,0,0.390625,0.1367188,0.2390625,0.496875,0,0.6992188,0.9140625,0.3234375,-0.4265625,0,0.7695313,0.1445313,0.3234375,0.1734375,0,0.7695313,0.6445313,-0.09375,-0.4265625,0,0.421875,0.1445313,-0.140625,-0.421875,0,0.3828125,0.1484375,-0.215625,0.496875,0,0.3203125,0.9140625,-0.215625,-0.2625,0,0.3203125,0.28125,-0.2625,-0.3984375,0,0.28125,0.1679688,-0.2671875,-0.421875,0,0.2773438,0.1484375,-0.2578125,-0.4125,0,0.2851563,0.15625,-0.3140625,-0.3984375,0,0.2382813,0.1679688,-0.31875,-0.421875,0,0.234375,0.1484375,-0.3234375,-0.4078125,0,0.2304688,0.1601563],[39,37,38,35,38,37,34,35,37,36,35,34,33,32,31,27,31,32,30,31,27,28,30,27,29,28,27,26,22,25,23,25,22,24,23,22,21,20,19,18,19,20,15,19,18,17,15,18,14,15,17,16,15,14,13,11,12,10,12,11,7,10,11,8,10,7,9,8,7,6,5,4,0,4,5,3,4,0,1,3,0,2,1,0],-0.0000504404306411743,-0.000104494392871857,0.99994957447052,0.999895513057709,0.23046875,0.109375,0.76953125,0.9140625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,59.0129127502441,28.0267505645752]},{"id":29998,"path":"Assets/Content/Sprites/Ingredients/pecan.png","assetBundleId":-1,"data":["pecan",6,29996,[0,-0.03749999,0,0.6,0.5625,0],[-0.271875,-0.5859375,0,0.2734375,0.01171875,-0.478125,-0.6,0,0.1015625,0,-0.2671875,-0.6,0,0.2773438,0,-0.4875,-0.534375,0,0.09375,0.0546875,-0.5296875,-0.525,0,0.05859375,0.06249997,-0.5390625,-0.5296875,0,0.05078125,0.05859375,-0.5390625,-0.553125,0,0.05078125,0.0390625,0.58125,-0.4828125,0,0.984375,0.09765625,0.6,-0.590625,0,1,0.00781253,0.6,-0.4828125,0,1,0.09765625,0.571875,-0.6,0,0.9765625,0,0.09375,-0.5859375,0,0.578125,0.01171875,0.084375,-0.5953125,0,0.5703125,0.00390622,0.084375,-0.6,0,0.5703125,0,-0.15,0.5015625,0,0.375,0.9179688,-0.159375,0.421875,0,0.3671875,0.8515625,-0.1546875,0.4359375,0,0.3710938,0.8632813,-0.1734375,0.525,0,0.3554688,0.9375,-0.1828125,0.4171875,0,0.3476563,0.8476563,-0.2015625,0.525,0,0.3320313,0.9375,-0.225,0.515625,0,0.3125,0.9296875,-0.234375,0.4453125,0,0.3046875,0.8710938,-0.253125,0.478125,0,0.2890625,0.8984375,-0.140625,0.2390625,0,0.3828125,0.6992188,-0.1359375,0.4640625,0,0.3867188,0.8867188,-0.1546875,0.3609375,0,0.3710938,0.8007813,-0.103125,-0.2203125,0,0.4140625,0.3164063,-0.09375,-0.2390625,0,0.421875,0.3007813,-0.09375,-0.2296875,0,0.421875,0.3085938,-0.103125,-0.2484375,0,0.4140625,0.2929688,-0.140625,-0.2203125,0,0.3828125,0.3164063,-0.1640625,-0.2765625,0,0.3632813,0.2695313,-0.121875,-0.3,0,0.3984375,0.25,-0.1171875,-0.3140625,0,0.4023438,0.2382813,-0.121875,-0.3,0,0.3984375,0.25,-0.121875,-0.309375,0,0.3984375,0.2421875,-0.075,-0.3046875,0,0.4375,0.2460938,-0.084375,-0.31875,0,0.4296875,0.234375,-0.075,-0.309375,0,0.4375,0.2421875,-0.0890625,-0.290625,0,0.4257813,0.2578125,-0.1125,-0.290625,0,0.40625,0.2578125,-0.1125,-0.31875,0,0.40625,0.234375,-0.1265625,0.4734375,0,0.3945313,0.8945313,-0.1171875,0.4453125,0,0.4023438,0.8710938,-0.1078125,0.496875,0,0.4101563,0.9140625,-0.1265625,0.459375,0,0.3945313,0.8828125,0.1171875,0.3,0,0.5976563,0.75,0.1265625,0.28125,0,0.6054688,0.734375,0.1265625,0.290625,0,0.6054688,0.7421875,0.1171875,0.290625,0,0.5976563,0.7421875,0.271875,0.2203125,0,0.7265625,0.6835938,0.31875,0.2296875,0,0.765625,0.6914063,0.3046875,0.2296875,0,0.7539063,0.6914063,0.2671875,0.2109375,0,0.7226563,0.6757813,0.3,0.3,0,0.75,0.75,0.3,0.3046875,0,0.75,0.7539063,0.290625,0.290625,0,0.7421875,0.7421875,0.28125,0.290625,0,0.734375,0.7421875,0.271875,0.3,0,0.7265625,0.75,0.2859375,0.31875,0,0.7382813,0.765625,0.28125,0.31875,0,0.734375,0.765625,0.271875,0.309375,0,0.7265625,0.7578125,0.009375,0.2953125,0,0.5078125,0.7460938,0.0140625,-0.2625,0,0.5117188,0.28125,0.009375,0.3046875,0,0.5078125,0.7539063,-0.0046875,0.28125,0,0.4960938,0.734375,-0.009375,0.28125,0,0.4921875,0.734375,-0.01875,0.290625,0,0.484375,0.7421875,-0.084375,-0.24375,0,0.4296875,0.296875,-0.0046875,0.309375,0,0.4960938,0.7578125,-0.01875,0.2953125,0,0.484375,0.7460938,-0.1171875,0.440625,0,0.4023438,0.8671875,-0.1171875,0.43125,0,0.4023438,0.859375,-0.1171875,-0.31875,0,0.4023438,0.234375,-0.1828125,0.1453125,0,0.3476563,0.6210938,-0.1828125,0.2484375,0,0.3476563,0.7070313,-0.1875,0.1453125,0,0.34375,0.6210938,-0.20625,0.140625,0,0.328125,0.6171875,-0.215625,0.13125,0,0.3203125,0.609375,-0.234375,0.1125,0,0.3046875,0.59375,-0.2390625,-0.31875,0,0.3007813,0.234375,-0.271875,0.1171875,0,0.2734375,0.5976563,-0.3140625,0.0703125,0,0.2382813,0.5585938,-0.31875,-0.3046875,0,0.234375,0.2460938,-0.375,0.046875,0,0.1875,0.5390625,-0.4171875,-0.15,0,0.1523438,0.375,-0.6,-0.065625,0,0,0.4453125,-0.6,-0.13125,0,0,0.390625,-0.16875,-0.478125,0,0.359375,0.1015625,-0.1640625,-0.5015625,0,0.3632813,0.08203122,-0.1640625,-0.4875,0,0.3632813,0.09375,-0.1734375,-0.50625,0,0.3554688,0.078125,-0.1828125,-0.478125,0,0.3476563,0.1015625,-0.1875,-0.50625,0,0.34375,0.078125,-0.1921875,-0.4828125,0,0.3398438,0.09765625,-0.1921875,-0.496875,0,0.3398438,0.0859375,0.215625,-0.478125,0,0.6796875,0.1015625,0.2109375,-0.496875,0,0.6757813,0.0859375,0.215625,-0.4875,0,0.6796875,0.09375,0.20625,-0.46875,0,0.671875,0.109375,0.15,-0.46875,0,0.625,0.109375,0.1453125,-0.4734375,0,0.6210938,0.1054688,0.1453125,-0.496875,0,0.6210938,0.0859375,0.0046875,-0.2953125,0,0.5039063,0.2539063,-0.0140625,-0.3234375,0,0.4882813,0.2304688,0.009375,-0.309375,0,0.5078125,0.2421875,-0.05625,-0.2953125,0,0.453125,0.2539063,-0.0609375,-0.3234375,0,0.4492188,0.2304688,-0.065625,-0.3,0,0.4453125,0.25,-0.065625,-0.3140625,0,0.4453125,0.2382813,-0.4265625,0.0046875,0,0.1445313,0.5039063,-0.4453125,-0.0328125,0,0.1289063,0.4726563,-0.4546875,-0.084375,0,0.1210938,0.4296875,-0.3515625,0.1125,0,0.2070313,0.59375,-0.3703125,0.0515625,0,0.1914063,0.5429688,-0.4125,0.103125,0,0.15625,0.5859375,-0.4265625,0.09375,0,0.1445313,0.578125,-0.478125,0.009375,0,0.1015625,0.5078125,-0.534375,0.046875,0,0.0546875,0.5390625,-0.6,-0.0046875,0,0,0.4960938,-0.6,-0.0515625,0,0,0.4570313,-0.1828125,0.3609375,0,0.3476563,0.8007813,-0.16875,0.2671875,0,0.359375,0.7226563,-0.159375,0.3234375,0,0.3671875,0.7695313,-0.2015625,0.2390625,0,0.3320313,0.6992188,-0.2109375,0.1453125,0,0.3242188,0.6210938,-0.225,0.1265625,0,0.3125,0.6054688,-0.234375,0.1265625,0,0.3046875,0.6054688,-0.2390625,0.35625,0,0.3007813,0.796875,-0.2484375,0.13125,0,0.2929688,0.609375,-0.196875,0.2390625,0,0.3359375,0.6992188,-0.196875,0.215625,0,0.3359375,0.6796875,-0.121875,-0.2953125,0,0.3984375,0.2539063,0.384375,0.4125,0,0.8203125,0.84375,0.375,0.2296875,0,0.8125,0.6914063,0.3984375,0.234375,0,0.8320313,0.6953125,0.35625,0.2296875,0,0.796875,0.6914063,0.3234375,0.2296875,0,0.7695313,0.6914063,0.2390625,0.5203125,0,0.6992188,0.9335938,0.2015625,0.1875,0,0.6679688,0.65625,0.178125,0.309375,0,0.6484375,0.7578125,0.16875,0.31875,0,0.640625,0.765625,0.159375,0.31875,0,0.6328125,0.765625,0.15,0.309375,0,0.625,0.7578125,0.140625,0.309375,0,0.6171875,0.7578125,0.15,0.3046875,0,0.625,0.7539063,0.13125,0.31875,0,0.609375,0.765625,0.1171875,0.403125,0,0.5976563,0.8359375,0.1171875,0.3140625,0,0.5976563,0.7617188,0.103125,0.2859375,0,0.5859375,0.7382813,0.103125,0.2671875,0,0.5859375,0.7226563,-0.09375,-0.225,0,0.421875,0.3125,-0.0984375,-0.2203125,0,0.4179688,0.3164063,0.328125,0.2203125,0,0.7734375,0.6835938,0.2625,0.20625,0,0.71875,0.671875,0.46875,0.1125,0,0.890625,0.59375,0.4125,0.084375,0,0.84375,0.5703125,0.45,0.084375,0,0.875,0.5703125,0.3703125,0.2203125,0,0.8085938,0.6835938,0.4265625,0.0703125,0,0.8554688,0.5585938,0.4171875,0.05625,0,0.8476563,0.546875,0.4734375,0.0796875,0,0.8945313,0.5664063,0.45,0.0421875,0,0.875,0.5351563,0.4734375,0.0328125,0,0.8945313,0.5273438,0.4359375,0.046875,0,0.8632813,0.5390625,0.43125,0.0796875,0,0.859375,0.5664063,0.4265625,0.065625,0,0.8554688,0.5546875,0.4359375,0.046875,0,0.8632813,0.5390625,0.3703125,-0.234375,0,0.8085938,0.3046875,0.384375,-0.253125,0,0.8203125,0.2890625,0.384375,-0.2390625,0,0.8203125,0.3007813,0.3703125,-0.2578125,0,0.8085938,0.2851563,0.3609375,-0.24375,0,0.8007813,0.296875,0.328125,0.215625,0,0.7734375,0.6796875,0.31875,0.20625,0,0.765625,0.671875,0.28125,0.1875,0,0.734375,0.65625,0.2671875,0.1875,0,0.7226563,0.65625,0.2625,0.2015625,0,0.71875,0.6679688,0.1640625,-0.290625,0,0.6367188,0.2578125,0.1640625,-0.31875,0,0.6367188,0.234375,0.16875,-0.3046875,0,0.640625,0.2460938,0.05625,-0.290625,0,0.546875,0.2578125,0.05625,-0.31875,0,0.546875,0.234375,0.0515625,-0.3046875,0,0.5429688,0.2460938,0.5390625,0.075,0,0.9492188,0.5625,0.4828125,-0.0421875,0,0.9023438,0.4648438,0.5203125,-0.0421875,0,0.9335938,0.4648438,0.4828125,-0.065625,0,0.9023438,0.4453125,0.6,0.05625,0,1,0.546875,0.5765625,-0.178125,0,0.9804688,0.3515625,0.6,-0.121875,0,1,0.3984375,0.5203125,-0.065625,0,0.9335938,0.4453125,0.515625,-0.0703125,0,0.9296875,0.4414063,0.4875,-0.0703125,0,0.90625,0.4414063,0.459375,0.0375,0,0.8828125,0.53125,0.4265625,-0.2296875,0,0.8554688,0.3085938,0.178125,0.2953125,0,0.6484375,0.7460938,0.1640625,0.290625,0,0.6367188,0.7421875,0.140625,0.2953125,0,0.6171875,0.7460938,0.1265625,0.2625,0,0.6054688,0.71875,0.1125,0.2578125,0,0.59375,0.7148438,-0.525,0.0890625,0,0.06249997,0.5742188,-0.515625,0.065625,0,0.0703125,0.5546875,-0.515625,0.0796875,0,0.0703125,0.5664063,-0.54375,0.084375,0,0.04687503,0.5703125,-0.553125,0.0328125,0,0.0390625,0.5273438,-0.5671875,0.028125,0,0.02734378,0.5234375,-0.6,0.075,0,0,0.5625,-0.6,0.028125,0,0,0.5234375,-0.159375,0.3890625,0,0.3671875,0.8242188,-0.16875,0.375,0,0.359375,0.8125,-0.159375,0.384375,0,0.3671875,0.8203125,-0.1734375,0.403125,0,0.3554688,0.8359375,-0.1875,0.375,0,0.34375,0.8125,-0.196875,0.403125,0,0.3359375,0.8359375,-0.2015625,0.3890625,0,0.3320313,0.8242188,-0.2390625,0.43125,0,0.3007813,0.859375,-0.225,0.375,0,0.3125,0.8125,-0.225,0.4125,0,0.3125,0.84375,-0.2390625,0.3703125,0,0.3007813,0.8085938,-0.253125,0.4265625,0,0.2890625,0.8554688,-0.253125,0.384375,0,0.2890625,0.8203125,-0.2578125,0.403125,0,0.2851563,0.8359375],[222,220,221,219,221,220,216,219,220,217,219,216,218,217,216,215,214,213,212,213,214,210,213,212,209,210,212,211,210,209,145,143,197,142,197,143,141,197,142,196,197,141,140,196,141,46,148,48,146,48,148,198,48,146,144,198,146,150,149,200,49,200,149,199,200,49,47,199,49,177,139,154,208,207,206,204,206,207,205,206,204,202,205,204,201,202,204,203,202,201,187,185,193,186,193,185,192,193,186,191,192,186,63,150,195,200,195,150,199,195,200,47,195,199,48,195,47,198,195,48,139,195,198,144,139,198,145,139,144,197,139,145,196,139,197,140,139,196,176,195,139,177,176,139,175,195,176,174,195,175,173,195,174,136,195,173,158,195,136,156,195,158,160,195,156,164,195,160,187,195,164,189,195,187,167,187,164,162,187,167,194,187,162,163,187,194,161,187,163,193,189,187,192,189,193,191,189,192,186,189,191,184,189,186,188,189,184,190,189,188,184,185,161,187,161,185,186,185,184,183,181,182,179,182,181,178,179,181,180,179,178,177,154,176,153,176,154,175,176,153,174,175,153,173,174,153,173,153,136,172,168,171,169,171,168,170,169,168,167,164,162,166,165,164,161,164,165,162,164,161,163,162,161,160,156,159,158,155,156,157,156,155,154,53,153,51,153,53,137,153,51,75,23,31,30,31,23,26,30,23,24,26,23,72,26,24,71,26,72,43,26,71,44,26,43,70,26,44,69,70,44,147,69,44,152,26,70,151,152,70,68,151,70,67,68,70,64,69,147,63,64,147,149,63,147,150,63,149,49,149,147,46,49,147,148,46,147,146,148,147,138,146,147,144,146,138,143,144,138,145,144,143,142,143,138,141,142,138,140,141,138,139,140,138,53,139,138,61,53,138,60,61,138,133,60,138,50,53,61,58,50,61,59,60,133,55,59,133,52,55,133,51,52,133,137,51,133,136,137,133,134,136,133,135,134,133,31,132,35,32,35,132,34,32,132,84,114,82,125,124,76,131,76,124,130,76,131,75,76,130,74,76,75,129,128,127,121,127,128,126,127,121,124,126,121,78,126,124,125,78,124,122,124,121,123,122,121,120,119,117,118,117,119,116,117,118,84,117,116,115,84,116,113,84,115,114,84,113,82,114,113,81,82,113,112,111,85,110,85,111,84,85,110,109,108,107,106,107,108,104,107,106,103,104,106,105,104,103,102,101,97,100,97,101,99,97,100,96,97,99,98,97,96,95,94,93,92,93,94,91,93,92,88,91,92,89,91,88,90,89,88,87,86,83,85,83,86,84,83,85,82,83,84,80,83,82,81,80,82,79,80,81,31,80,79,73,80,31,78,31,79,77,31,78,76,31,77,74,31,76,75,31,74,35,73,31,33,73,35,72,24,71,67,70,66,69,66,70,65,66,69,62,65,69,64,62,69,68,67,63,66,63,67,65,63,66,62,63,65,64,63,62,58,61,57,60,57,61,56,57,60,59,56,60,55,56,59,54,56,55,50,58,52,57,52,58,56,52,57,54,52,56,55,52,54,53,50,51,52,51,50,49,46,47,48,47,46,45,42,43,44,43,42,34,40,33,41,33,40,37,41,40,39,37,40,36,37,39,38,37,36,35,32,33,34,33,32,31,30,29,26,29,30,27,29,26,28,27,26,25,16,23,14,23,16,24,23,14,22,20,21,18,21,20,19,18,20,17,18,19,15,18,17,14,15,17,16,15,14,13,12,10,11,10,12,7,10,11,8,10,7,9,8,7,6,5,1,4,1,5,3,1,4,0,1,3,2,1,0],0,0,1,1,0,0,1,0.9375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,0,0]},{"id":30188,"path":"Assets/Content/Sprites/Ingredients/puff pastry.png","assetBundleId":-1,"data":["puff pastry",6,30186,[0.02578124,-0.04453125,0,0.4054688,0.2367187,0],[0.253125,0.1921875,0,0.7109375,0.6601563,0.43125,-0.2015625,0,0.859375,0.3320313,0.43125,-0.0140625,0,0.859375,0.4882813,0.065625,-0.28125,0,0.5546875,0.265625,-0.3,-0.28125,0,0.25,0.265625,-0.3796875,0.1921875,0,0.1835938,0.6601563,-0.3796875,-0.046875,0,0.1835938,0.4609375],[6,5,4,0,4,5,3,4,0,1,3,0,2,1,0],-0.00029735267162323,-0.00010448694229126,0.999702632427216,0.999895513057709,0.18359375,0.265625,0.859375,0.66015625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,47.0761222839355,68.0267486572266]},{"id":30162,"path":"Assets/Content/Sprites/Ingredients/brown sugar.png","assetBundleId":-1,"data":["brown sugar",6,30160,[0.0234375,0.02109376,0,0.3609375,0.4148438,0],[0.3046875,0.290625,0,0.7539063,0.7421875,0.328125,0.1875,0,0.7734375,0.65625,0.3375,0.1921875,0,0.78125,0.6601563,0.2953125,0.1875,0,0.7460938,0.65625,0.2765625,0.2953125,0,0.7304688,0.7460938,0.2109375,0.2953125,0,0.6757813,0.7460938,0.2109375,0.20625,0,0.6757813,0.671875,0.2015625,0.2859375,0,0.6679688,0.7382813,0.2015625,0.2296875,0,0.6679688,0.6914063,0.35625,0.28125,0,0.796875,0.734375,0.365625,0.2203125,0,0.8046875,0.6835938,0.365625,0.2578125,0,0.8046875,0.7148438,0.384375,-0.39375,0,0.8203125,0.171875,0.384375,0.0421875,0,0.8203125,0.5351563,0.046875,0.4359375,0,0.5390625,0.8632813,-0.1359375,0.4359375,0,0.3867188,0.8632813,-0.271875,-0.39375,0,0.2734375,0.171875,-0.3234375,0.31875,0,0.2304688,0.765625,-0.3375,0.225,0,0.21875,0.6875,-0.3375,-0.31875,0,0.21875,0.234375,0.28125,0.3609375,0,0.734375,0.8007813],[20,5,14,7,14,5,8,14,7,4,5,20,0,4,20,19,18,16,17,16,18,15,16,17,12,16,15,14,12,15,8,12,14,6,12,8,3,12,6,1,12,3,2,12,1,13,12,2,0,9,2,10,2,9,11,10,9,8,7,6,5,6,7,3,6,5,4,3,5,0,3,4,1,3,0,2,1,0],-0.000104501843452454,-0.000167608261108398,0.999895513057709,0.999832391738892,0.21875,0.171875,0.8203125,0.86328125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,56.0267524719238,44.0429077148438]},{"id":30304,"path":"Assets/Content/Sprites/Ingredients/shrimp.png","assetBundleId":-1,"data":["shrimp",6,30302,[0.009375006,-0.03046875,0,0.3796875,0.3632813,0],[0.3890625,0.3328125,0,0.8242188,0.7773438,0.346875,-0.09375,0,0.7890625,0.421875,0.3890625,-0.1078125,0,0.8242188,0.4101563,0.2953125,-0.2109375,0,0.7460938,0.3242188,0.215625,-0.2109375,0,0.6796875,0.3242188,0.2015625,-0.24375,0,0.6679688,0.296875,0.2109375,-0.2296875,0,0.6757813,0.3085938,-0.0140625,-0.375,0,0.4882813,0.1875,-0.046875,-0.39375,0,0.4609375,0.171875,-0.1265625,0.3328125,0,0.3945313,0.7773438,-0.2578125,-0.39375,0,0.2851563,0.171875,-0.3703125,-0.15,0,0.1914063,0.375,-0.3703125,-0.309375,0,0.1914063,0.2421875,0.3515625,-0.1125,0,0.7929688,0.40625],[3,1,13,12,11,10,9,10,11,8,10,9,0,8,9,7,8,0,5,7,0,4,5,0,6,5,4,3,4,0,1,3,0,2,1,0],-0.000104501843452454,-0.0000645071268081665,0.999895513057709,0.999935507774353,0.19140625,0.171875,0.82421875,0.77734375,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,49.0267524719238,44.0165138244629]},{"id":30322,"path":"Assets/Content/Sprites/Ingredients/cod fillets.png","assetBundleId":-1,"data":["cod fillets",6,30320,[0.03281249,-0.03984375,0,0.4359375,0.2554688,0],[0.4125,0.215625,0,0.84375,0.6796875,0.46875,-0.1640625,0,0.890625,0.3632813,0.46875,0.084375,0,0.890625,0.5703125,0.2203125,-0.2953125,0,0.6835938,0.2539063,-0.0140625,0.215625,0,0.4882813,0.6796875,-0.3046875,-0.2953125,0,0.2460938,0.2539063,-0.403125,0.1640625,0,0.1640625,0.6367188,-0.403125,-0.0890625,0,0.1640625,0.4257813],[7,6,5,4,5,6,3,5,4,0,3,4,1,3,0,2,1,0],-0.00029735267162323,-0.00010448694229126,0.999702632427216,0.999895513057709,0.1640625,0.25390625,0.890625,0.6796875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,42.0761222839355,65.0267486572266]},{"id":30396,"path":"Assets/Content/Sprites/Ingredients/mozarella.png","assetBundleId":-1,"data":["mozarella",6,30394,[-0.03046876,0.02109376,0,0.4289063,0.3023438,0],[0.3984375,0.1453125,0,0.8320313,0.6210938,0.2484375,-0.28125,0,0.7070313,0.265625,0.3984375,-0.2109375,0,0.8320313,0.3242188,0.1875,0.290625,0,0.65625,0.7421875,0.121875,0.3234375,0,0.6015625,0.7695313,-0.2578125,0.3234375,0,0.2851563,0.7695313,-0.3703125,-0.28125,0,0.1914063,0.265625,-0.459375,0.2109375,0,0.1171875,0.6757813,-0.459375,-0.0796875,0,0.1171875,0.4335938],[8,7,6,5,6,7,1,6,5,4,1,5,3,1,4,0,1,3,2,1,0],-0.000297345221042633,-0.000297337770462036,0.999702632427216,0.99970269203186,0.1171875,0.265625,0.83203125,0.76953125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,30.0761203765869,68.0761184692383]},{"id":30328,"path":"Assets/Content/Sprites/Ingredients/molasses.png","assetBundleId":-1,"data":["molasses",6,30326,[0.028125,0.09375001,0,0.4125,0.4078125,0],[-0.2390625,0.3703125,0,0.3007813,0.8085938,-0.2625,-0.2203125,0,0.28125,0.3164063,-0.253125,-0.2296875,0,0.2890625,0.3085938,-0.2765625,-0.225,0,0.2695313,0.3125,-0.375,-0.2296875,0,0.1875,0.3085938,-0.2765625,-0.2484375,0,0.2695313,0.2929688,-0.384375,0.215625,0,0.1796875,0.6796875,-0.384375,-0.103125,0,0.1796875,0.4140625,-0.253125,-0.253125,0,0.2890625,0.2890625,-0.2671875,-0.2578125,0,0.2773438,0.2851563,0.15,0.3703125,0,0.625,0.8085938,0.1359375,0.3609375,0,0.6132813,0.8007813,0.15,0.365625,0,0.625,0.8046875,0.1265625,0.3703125,0,0.6054688,0.8085938,0.140625,0.3890625,0,0.6171875,0.8242188,0.15,0.3796875,0,0.625,0.8164063,0.13125,0.3890625,0,0.609375,0.8242188,0.121875,0.3796875,0,0.6015625,0.8164063,0.121875,0.375,0,0.6015625,0.8125,0.440625,0.2859375,0,0.8671875,0.7382813,0.4171875,-0.1875,0,0.8476563,0.34375,0.440625,-0.1359375,0,0.8671875,0.3867188,0.271875,-0.3140625,0,0.7265625,0.2382813,0.2625,0.3703125,0,0.71875,0.8085938,-0.16875,-0.3140625,0,0.359375,0.2382813,0.01875,0.5015625,0,0.515625,0.9179688,0.0234375,0.4546875,0,0.5195313,0.8789063,0.0234375,0.496875,0,0.5195313,0.9140625,-0.01875,0.5015625,0,0.484375,0.9179688,-0.046875,0.403125,0,0.4609375,0.8359375,-0.075,0.440625,0,0.4375,0.8671875,-0.075,0.403125,0,0.4375,0.8359375],[31,30,29,28,29,30,26,29,28,25,26,28,27,26,25,5,9,4,24,4,9,8,24,9,2,24,8,0,24,2,13,24,0,22,24,13,11,22,13,12,22,11,10,22,12,23,22,10,19,22,23,20,22,19,21,20,19,18,17,13,16,13,17,10,13,16,14,10,16,15,10,14,13,10,11,12,11,10,5,3,9,1,9,3,8,9,1,2,8,1,7,6,4,0,4,6,3,4,0,5,4,3,1,3,0,2,1,0],-0.000104501843452454,-0.00029735267162323,0.999895513057709,0.999702632427216,0.1796875,0.23828125,0.8671875,0.91796875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,46.0267524719238,61.0761222839355]},{"id":30882,"path":"Assets/Content/Sprites/Ingredients/ketchup.png","assetBundleId":-1,"data":["ketchup",6,30880,[0,0.01171875,0,0.3234375,0.4851563,0],[0.1359375,-0.4359375,0,0.6132813,0.1367188,0.2015625,-0.440625,0,0.6679688,0.1328125,0.2015625,-0.440625,0,0.6679688,0.1328125,0.0703125,-0.4359375,0,0.5585938,0.1367188,0.065625,-0.4453125,0,0.5546875,0.1289063,0.065625,-0.459375,0,0.5546875,0.1171875,0.253125,-0.4359375,0,0.7109375,0.1367188,0.234375,-0.4359375,0,0.6953125,0.1367188,0.234375,-0.440625,0,0.6953125,0.1328125,0.3234375,-0.0515625,0,0.7695313,0.4570313,0.3234375,-0.4265625,0,0.7695313,0.1445313,0.24375,0.496875,0,0.703125,0.9140625,-0.0375,-0.4734375,0,0.46875,0.1054688,-0.1453125,-0.4265625,0,0.3789063,0.1445313,-0.178125,-0.4265625,0,0.3515625,0.1445313,-0.1828125,-0.421875,0,0.3476563,0.1484375,-0.196875,-0.421875,0,0.3359375,0.1484375,-0.2296875,0.496875,0,0.3085938,0.9140625,-0.2296875,-0.421875,0,0.3085938,0.1484375,-0.3234375,-0.0328125,0,0.2304688,0.4726563,-0.3234375,-0.421875,0,0.2304688,0.1484375,0.2953125,-0.4359375,0,0.7460938,0.1367188,0.3,-0.46875,0,0.75,0.109375,0.3,-0.45,0,0.75,0.125,0.225,-0.45,0,0.6875,0.125,0.225,-0.46875,0,0.6875,0.109375,0.1921875,-0.46875,0,0.6601563,0.109375,0.20625,-0.4546875,0,0.671875,0.1210938,0.0703125,-0.46875,0,0.5585938,0.109375,0.065625,-0.4640625,0,0.5546875,0.1132813,-0.1875,-0.4265625,0,0.34375,0.1445313,-0.2859375,-0.4265625,0,0.2617188,0.1445313,-0.290625,-0.4734375,0,0.2578125,0.1054688,-0.3234375,-0.4546875,0,0.2304688,0.1210938,-0.3234375,-0.459375,0,0.2304688,0.1171875],[34,33,32,31,32,33,12,32,31,18,12,31,30,12,18,16,30,18,14,12,30,13,12,14,29,5,28,1,28,5,26,28,1,27,26,1,25,24,22,8,22,24,6,22,8,21,22,6,23,22,21,20,19,18,17,18,19,16,18,17,11,16,17,15,16,11,14,15,11,13,14,11,12,13,11,4,12,11,5,12,4,3,4,11,0,3,11,2,0,11,1,2,11,8,1,11,7,8,11,6,7,11,9,6,11,10,6,9,8,7,6,5,4,1,3,1,4,0,1,3,2,1,0],-0.0000504404306411743,-0.000297345221042633,0.99994957447052,0.999702632427216,0.23046875,0.10546875,0.76953125,0.9140625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,59.0129127502441,27.0761203765869]},{"id":30830,"path":"Assets/Content/Sprites/Ingredients/chicken thighs.png","assetBundleId":-1,"data":["chicken thighs",6,30828,[0.02812499,0.028125,0,0.440625,0.3609375,0],[0.46875,-0.1078125,0,0.890625,0.4101563,0.3890625,-0.3328125,0,0.8242188,0.2226563,0.46875,-0.2859375,0,0.890625,0.2617188,0.1546875,0.3890625,0,0.6289063,0.8242188,0.0515625,-0.3328125,0,0.5429688,0.2226563,-0.3234375,0.3890625,0,0.2304688,0.8242188,-0.4125,0.375,0,0.15625,0.8125,-0.4125,-0.1078125,0,0.15625,0.4101563],[7,6,4,5,4,6,3,4,5,1,4,3,0,1,3,2,1,0],-0.00029735267162323,-0.000220209360122681,0.999702632427216,0.9997798204422,0.15625,0.22265625,0.890625,0.82421875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,40.0761222839355,57.0563735961914]},{"id":30894,"path":"Assets/Content/Sprites/Ingredients/cloves seed.png","assetBundleId":-1,"data":["cloves seed",6,30892,[0,-0.08906251,0,0.6,0.5109375,0],[0.084375,-0.5390625,0,0.5703125,0.05078125,0.0890625,-0.6,0,0.5742188,0,0.0890625,-0.54375,0,0.5742188,0.04687503,0.0328125,-0.5390625,0,0.5273438,0.05078125,-0.0796875,-0.6,0,0.4335938,0,-0.103125,-0.5484375,0,0.4140625,0.04296872,-0.103125,-0.5953125,0,0.4140625,0.00390622,-0.1078125,-0.5625,0,0.4101563,0.03125,-0.1078125,-0.5859375,0,0.4101563,0.01171875,-0.178125,-0.2484375,0,0.3515625,0.2929688,-0.1546875,-0.253125,0,0.3710938,0.2890625,-0.1453125,-0.253125,0,0.3789063,0.2890625,-0.1828125,-0.2484375,0,0.3476563,0.2929688,-0.09375,-0.215625,0,0.421875,0.3203125,-0.0984375,-0.2484375,0,0.4179688,0.2929688,-0.084375,-0.24375,0,0.4296875,0.296875,-0.1265625,-0.253125,0,0.3945313,0.2890625,-0.20625,-0.2484375,0,0.328125,0.2929688,-0.2109375,-0.24375,0,0.3242188,0.296875,-0.3234375,-0.1921875,0,0.2304688,0.3398438,-0.2953125,-0.28125,0,0.2539063,0.265625,-0.3984375,-0.1453125,0,0.1679688,0.3789063,-0.6,0.009375,0,0,0.5078125,-0.6,-0.0703125,0,0,0.4414063,-0.1171875,-0.2578125,0,0.4023438,0.2851563,-0.103125,-0.28125,0,0.4140625,0.265625,-0.1078125,-0.2671875,0,0.4101563,0.2773438,-0.13125,-0.290625,0,0.390625,0.2578125,-0.20625,-0.290625,0,0.328125,0.2578125,-0.24375,-0.3234375,0,0.296875,0.2304688,-0.253125,-0.375,0,0.2890625,0.1875,-0.24375,-0.346875,0,0.296875,0.2109375,-0.2625,-0.3,0,0.28125,0.25,-0.2671875,-0.3796875,0,0.2773438,0.1835938,-0.3,-0.3796875,0,0.25,0.1835938,-0.3046875,-0.3,0,0.2460938,0.25,-0.3234375,-0.3703125,0,0.2304688,0.1914063,-0.328125,-0.3046875,0,0.2265625,0.2460938,-0.328125,-0.346875,0,0.2265625,0.2109375,-0.3375,-0.3,0,0.21875,0.25,-0.3421875,-0.3375,0,0.2148438,0.21875,-0.3375,-0.3328125,0,0.21875,0.2226563,-0.35625,-0.2859375,0,0.203125,0.2617188,-0.384375,-0.3375,0,0.1796875,0.21875,-0.4078125,-0.2765625,0,0.1601563,0.2695313,-0.421875,-0.2765625,0,0.1484375,0.2695313,-0.43125,-0.290625,0,0.140625,0.2578125,-0.43125,-0.31875,0,0.140625,0.234375,0.009375,-0.2578125,0,0.5078125,0.2851563,0,-0.290625,0,0.5,0.2578125,0.0140625,-0.2765625,0,0.5117188,0.2695313,-0.0515625,-0.2578125,0,0.4570313,0.2851563,-0.0515625,-0.290625,0,0.4570313,0.2578125,-0.065625,-0.271875,0,0.4453125,0.2734375,-0.065625,-0.2765625,0,0.4453125,0.2695313,-0.1453125,0.2578125,0,0.3789063,0.7148438,-0.05625,-0.2203125,0,0.453125,0.3164063,-0.1359375,0.2953125,0,0.3867188,0.7460938,-0.178125,0.271875,0,0.3515625,0.7265625,-0.2015625,0.2765625,0,0.3320313,0.7304688,-0.2203125,0.271875,0,0.3164063,0.7265625,-0.328125,-0.1734375,0,0.2265625,0.3554688,-0.2015625,0.3234375,0,0.3320313,0.7695313,-0.2109375,0.2859375,0,0.3242188,0.7382813,-0.2015625,0.290625,0,0.3320313,0.7421875,-0.215625,0.3375,0,0.3203125,0.78125,-0.225,0.2859375,0,0.3125,0.7382813,-0.2296875,0.3328125,0,0.3085938,0.7773438,-0.2296875,0.2953125,0,0.3085938,0.7460938,0.0234375,-0.24375,0,0.5195313,0.296875,0.0234375,-0.24375,0,0.5195313,0.296875,0.01875,-0.2484375,0,0.515625,0.2929688,0.0234375,-0.2203125,0,0.5195313,0.3164063,0.028125,-0.2296875,0,0.5234375,0.3085938,-0.065625,-0.2203125,0,0.4453125,0.3164063,-0.0796875,-0.2484375,0,0.4335938,0.2929688,-0.084375,-0.234375,0,0.4296875,0.3046875,0.2859375,0.16875,0,0.7382813,0.640625,0.2765625,0.15,0,0.7304688,0.625,0.2859375,0.16875,0,0.7382813,0.640625,0.253125,0.1265625,0,0.7109375,0.6054688,0.234375,0.1734375,0,0.6953125,0.6445313,0.2484375,-0.1921875,0,0.7070313,0.3398438,0.1453125,0.234375,0,0.6210938,0.6953125,0.1453125,0.2203125,0,0.6210938,0.6835938,0.13125,0.215625,0,0.609375,0.6796875,0.1171875,0.2296875,0,0.5976563,0.6914063,0.0796875,-0.2109375,0,0.5664063,0.3242188,0.2859375,0.16875,0,0.7382813,0.640625,0.3421875,0.421875,0,0.7851563,0.8515625,0.3,0.159375,0,0.75,0.6328125,0.3328125,0.1640625,0,0.7773438,0.6367188,0.2484375,0.234375,0,0.7070313,0.6953125,0.234375,0.2390625,0,0.6953125,0.6992188,0.225,0.2296875,0,0.6875,0.6914063,0.1265625,0.2671875,0,0.6054688,0.7226563,0.1171875,0.234375,0,0.5976563,0.6953125,0.1265625,0.24375,0,0.6054688,0.703125,-0.1453125,0.346875,0,0.3789063,0.7890625,-0.1546875,0.328125,0,0.3710938,0.7734375,-0.1453125,0.3375,0,0.3789063,0.78125,-0.1734375,0.3328125,0,0.3554688,0.7773438,-0.2109375,0.421875,0,0.3242188,0.8515625,-0.215625,0.3515625,0,0.3203125,0.7929688,-0.2296875,0.3609375,0,0.3085938,0.8007813,0.2484375,0.2203125,0,0.7070313,0.6835938,0.234375,0.215625,0,0.6953125,0.6796875,0.1359375,0.24375,0,0.6132813,0.703125,0.3,-0.2625,0,0.75,0.28125,0.2859375,-0.2625,0,0.7382813,0.28125,0.2859375,-0.2671875,0,0.7382813,0.2773438,0.6,0.0046875,0,1,0.5039063,0.4640625,-0.0421875,0,0.8867188,0.4648438,0.6,-0.0796875,0,1,0.4335938,0.39375,-0.1359375,0,0.828125,0.3867188,0.45,-0.09375,0,0.875,0.421875,0.3234375,0.159375,0,0.7695313,0.6328125,0.3046875,0.159375,0,0.7539063,0.6328125,0.2859375,0.1546875,0,0.7382813,0.6289063,0.45,-0.121875,0,0.875,0.3984375,0.2625,-0.196875,0,0.71875,0.3359375,0.2484375,-0.290625,0,0.7070313,0.2578125,0.1828125,-0.2390625,0,0.6523438,0.3007813,0.084375,-0.253125,0,0.5703125,0.2890625,0.0328125,-0.215625,0,0.5273438,0.3203125,0.0328125,-0.253125,0,0.5273438,0.2890625,0.028125,-0.234375,0,0.5234375,0.3046875,0.5859375,-0.4125,0,0.9882813,0.15625,0.6,-0.46875,0,1,0.109375,0.6,-0.4125,0,1,0.15625,0.5484375,-0.4171875,0,0.9570313,0.1523438,0.534375,-0.496875,0,0.9453125,0.0859375,0.45,-0.496875,0,0.875,0.0859375,0.4453125,-0.4828125,0,0.8710938,0.09765625,0.3515625,-0.271875,0,0.7929688,0.2734375,0.3375,-0.3328125,0,0.78125,0.2226563,0.3515625,-0.3234375,0,0.7929688,0.2304688,0.3328125,-0.2625,0,0.7773438,0.28125,0.3140625,-0.2578125,0,0.7617188,0.2851563,0.2859375,-0.3328125,0,0.7382813,0.2226563,0.065625,-0.2578125,0,0.5546875,0.2851563,0.0609375,-0.290625,0,0.5507813,0.2578125,0.05625,-0.2625,0,0.546875,0.28125,0.028125,-0.24375,0,0.5234375,0.296875,-0.15,0.31875,0,0.375,0.765625,-0.1453125,0.2859375,0,0.3789063,0.7382813,-0.1453125,0.3046875,0,0.3789063,0.7539063,-0.1734375,0.2859375,0,0.3554688,0.7382813,-0.178125,0.31875,0,0.3515625,0.765625,-0.1875,0.3046875,0,0.34375,0.7539063,-0.1875,0.290625,0,0.34375,0.7421875],[150,149,147,148,147,149,144,147,148,145,147,144,146,145,144,70,73,69,143,69,73,126,143,73,69,143,125,126,125,143,86,96,85,97,85,96,107,85,97,84,85,107,83,84,107,142,140,141,121,141,140,122,121,140,139,110,135,108,135,110,138,135,108,137,135,138,134,135,137,136,135,134,133,130,132,131,132,130,128,131,130,127,128,130,129,128,127,73,124,126,125,126,124,123,125,124,120,123,124,122,123,120,121,122,120,110,121,120,109,110,120,119,109,120,108,109,119,113,108,119,112,113,119,82,80,114,118,114,80,117,114,118,116,114,117,112,114,116,111,112,116,115,114,112,113,112,111,110,109,108,97,95,107,81,107,95,83,107,81,94,93,106,105,106,93,92,105,93,94,106,95,77,95,106,105,77,106,92,77,105,79,88,90,104,102,103,101,103,102,98,101,102,89,98,102,99,101,98,100,99,98,57,98,89,95,57,89,56,57,95,96,56,95,87,56,96,86,87,96,97,96,95,94,95,89,93,94,89,92,93,89,77,92,89,88,77,89,90,88,89,91,90,89,79,77,88,87,86,82,85,82,86,84,82,85,83,82,84,81,82,83,80,82,81,77,80,81,78,80,77,79,78,77,76,74,75,71,75,74,56,71,74,72,71,56,70,71,72,73,70,72,71,70,69,68,67,66,65,66,67,63,66,65,62,63,65,64,63,62,22,60,21,61,21,60,56,61,60,59,56,60,58,56,59,55,56,58,57,56,55,54,53,52,51,52,53,49,52,51,48,49,51,50,49,48,47,46,43,45,43,46,44,43,45,42,43,44,40,43,42,39,40,42,41,40,39,38,37,36,35,36,37,34,36,35,32,34,35,33,34,32,30,33,32,29,30,32,31,30,29,20,18,28,17,28,18,27,28,17,12,27,17,10,27,12,11,27,10,24,27,11,25,27,24,26,25,24,23,22,20,21,20,22,19,20,21,18,20,19,13,18,19,17,18,13,12,17,13,9,12,13,11,9,13,16,11,13,14,16,13,15,14,13,12,9,10,11,10,9,8,7,6,5,6,7,4,6,5,3,4,5,1,4,3,0,1,3,2,1,0],0,0,1,1,0,0,1,0.8515625,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,0,0]},{"id":30878,"path":"Assets/Content/Sprites/Ingredients/bell peppers.png","assetBundleId":-1,"data":["bell peppers",6,30876,[-0.05859375,0.01875,0,0.4710938,0.31875,0],[0.4125,0.2625,0,0.84375,0.71875,0.3609375,-0.2953125,0,0.8007813,0.2539063,0.4125,-0.178125,0,0.84375,0.3515625,0.3375,-0.3,0,0.78125,0.25,0.159375,0.3375,0,0.6328125,0.78125,-0.1875,0.3375,0,0.34375,0.78125,-0.4171875,-0.3,0,0.1523438,0.25,-0.5296875,0.01875,0,0.05859375,0.515625,-0.5296875,-0.2203125,0,0.05859375,0.3164063],[8,7,6,5,6,7,3,6,5,4,3,5,0,3,4,1,3,0,2,1,0],-0.000104494392871857,-0.000200450420379639,0.999895513057709,0.99979954957962,0.05859375,0.25,0.84375,0.78125,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,15.0267505645752,64.0513153076172]},{"id":30954,"path":"Assets/Content/Sprites/Ingredients/enchilada sauce.png","assetBundleId":-1,"data":["enchilada sauce",6,30952,[0.028125,0.09375001,0,0.4125,0.4078125,0],[-0.253125,-0.2578125,0,0.2890625,0.2851563,-0.2390625,-0.3140625,0,0.3007813,0.2382813,-0.253125,-0.2296875,0,0.2890625,0.3085938,-0.2671875,-0.2625,0,0.2773438,0.28125,-0.28125,-0.2390625,0,0.265625,0.3007813,-0.384375,-0.0609375,0,0.1796875,0.4492188,-0.384375,0.346875,0,0.1796875,0.7890625,-0.2625,-0.2203125,0,0.28125,0.3164063,-0.2671875,-0.2203125,0,0.2773438,0.3164063,-0.28125,-0.234375,0,0.265625,0.3046875,0.15,0.3703125,0,0.625,0.8085938,0.1359375,0.3609375,0,0.6132813,0.8007813,0.15,0.365625,0,0.625,0.8046875,0.1265625,0.3703125,0,0.6054688,0.8085938,0.140625,0.3890625,0,0.6171875,0.8242188,0.15,0.3796875,0,0.625,0.8164063,0.13125,0.3890625,0,0.609375,0.8242188,0.121875,0.3796875,0,0.6015625,0.8164063,0.121875,0.375,0,0.6015625,0.8125,0.3375,0.3703125,0,0.78125,0.8085938,0.440625,-0.225,0,0.8671875,0.3125,0.440625,0.20625,0,0.8671875,0.671875,0.2953125,-0.3140625,0,0.7460938,0.2382813,-0.2671875,0.3703125,0,0.2773438,0.8085938,0.01875,0.5015625,0,0.515625,0.9179688,0.0234375,0.4546875,0,0.5195313,0.8789063,0.0234375,0.496875,0,0.5195313,0.9140625,-0.01875,0.5015625,0,0.484375,0.9179688,-0.046875,0.403125,0,0.4609375,0.8359375,-0.075,0.440625,0,0.4375,0.8671875,-0.075,0.403125,0,0.4375,0.8359375],[30,29,28,27,28,29,25,28,27,24,25,27,26,25,24,23,9,6,4,6,9,8,9,23,7,8,23,13,7,23,2,7,13,1,2,13,22,1,13,11,22,13,12,22,11,10,22,12,19,22,10,20,22,19,21,20,19,18,17,13,16,13,17,10,13,16,14,10,16,15,10,14,13,10,11,12,11,10,4,9,3,8,3,9,0,3,8,7,0,8,2,0,7,6,4,5,1,5,4,3,1,4,0,1,3,2,1,0],-0.000104501843452454,-0.00029735267162323,0.999895513057709,0.999702632427216,0.1796875,0.23828125,0.8671875,0.91796875,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,46.0267524719238,61.0761222839355]},{"id":30666,"path":"Assets/Content/Sprites/Ingredients/shredded chicken.png","assetBundleId":-1,"data":["shredded chicken",6,30664,[-0.02578124,0.007031247,0,0.4851563,0.2929688,0],[0.35625,-0.2296875,0,0.796875,0.3085938,0.3609375,-0.253125,0,0.8007813,0.2890625,0.3609375,-0.2390625,0,0.8007813,0.3007813,0.3515625,-0.2625,0,0.7929688,0.28125,0.3140625,-0.2296875,0,0.7617188,0.3085938,0.2765625,-0.2859375,0,0.7304688,0.2617188,0.24375,-0.2625,0,0.703125,0.28125,0.24375,-0.2859375,0,0.703125,0.2617188,0.0984375,-0.2109375,0,0.5820313,0.3242188,0.09375,-0.2390625,0,0.578125,0.3007813,0.0984375,-0.225,0,0.5820313,0.3125,0.084375,-0.20625,0,0.5703125,0.328125,0.0796875,-0.20625,0,0.5664063,0.328125,0.075,-0.2390625,0,0.5625,0.3007813,0.0609375,-0.2203125,0,0.5507813,0.3164063,0.0609375,-0.225,0,0.5507813,0.3125,-0.065625,-0.2015625,0,0.4453125,0.3320313,-0.05625,-0.2203125,0,0.453125,0.3164063,-0.05625,-0.2109375,0,0.453125,0.3242188,-0.065625,-0.2296875,0,0.4453125,0.3085938,-0.09375,-0.2015625,0,0.421875,0.3320313,-0.09375,-0.2296875,0,0.421875,0.3085938,-0.103125,-0.2109375,0,0.4140625,0.3242188,-0.103125,-0.2203125,0,0.4140625,0.3164063,0.3375,0.1921875,0,0.78125,0.6601563,0.459375,-0.159375,0,0.8828125,0.3671875,0.459375,-0.0046875,0,0.8828125,0.4960938,0.2671875,-0.2015625,0,0.7226563,0.3320313,0.13125,0.3,0,0.609375,0.75,-0.2390625,0.3,0,0.3007813,0.75,-0.346875,-0.2015625,0,0.2109375,0.3320313,-0.4828125,0.0703125,0,0.09765625,0.5585938,-0.4828125,-0.0796875,0,0.09765625,0.4335938,-0.496875,-0.075,0,0.0859375,0.4375,-0.4875,-0.140625,0,0.09375,0.3828125,-0.4828125,-0.0984375,0,0.09765625,0.4179688,-0.5015625,-0.1453125,0,0.08203122,0.3789063,-0.5109375,-0.0796875,0,0.07421875,0.4335938,-0.5109375,-0.1359375,0,0.07421875,0.3867188],[38,37,36,33,36,37,34,36,33,35,34,33,32,31,30,29,30,31,20,30,29,28,20,29,16,20,28,27,16,28,24,27,28,25,27,24,26,25,24,23,22,21,20,21,22,19,21,20,16,19,20,17,19,16,18,17,16,15,14,13,12,13,14,9,13,12,11,9,12,8,9,11,10,9,8,7,6,5,4,5,6,3,5,4,0,3,4,1,3,0,2,1,0],-0.000297345221042633,-0.000412404537200928,0.999702632427216,0.999587595462799,0.07421875,0.26171875,0.8828125,0.75,0,0,0,0,[0,0,0,0],[-0.6,-0.6,0.6,0.6],213.33332824707,256,256,256,256,128,128,19.0761203765869,67.1055755615234]}],"text-assets":[{"id":24468,"path":"Assets/TextMesh Pro/Resources/LineBreaking Following Characters.txt","assetBundleId":-1,"data":["LineBreaking Following Characters",null,")]｝〕〉》」』】〙〗〟’”｠»ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻‐゠–〜?!‼⁇⁈⁉・、%,.:;。！？］）：；＝}¢°\"†‡℃〆％，．"]},{"id":24466,"path":"Assets/TextMesh Pro/Resources/LineBreaking Leading Characters.txt","assetBundleId":-1,"data":["LineBreaking Leading Characters",null,"([｛〔〈《「『【〘〖〝‘“｟«$—…‥〳〴〵\\［（{£¥\"々〇＄￥￦ #"]},{"id":26508,"path":"Assets/TextMesh Pro/Shaders/TMPro.cginc","assetBundleId":-1,"data":["TMPro",null,""]},{"id":28824,"path":"Assets/TextMesh Pro/Sprites/EmojiOne Attribution.txt","assetBundleId":-1,"data":["EmojiOne Attribution",null,"This sample of beautiful emojis are provided by EmojiOne https://www.emojione.com/\r\n\r\nPlease visit their website to view the complete set of their emojis and review their licensing terms."]},{"id":29078,"path":"Assets/TextMesh Pro/Shaders/TMPro_Properties.cginc","assetBundleId":-1,"data":["TMPro_Properties",null,""]},{"id":27558,"path":"Assets/TextMesh Pro/Shaders/TMPro_Mobile.cginc","assetBundleId":-1,"data":["TMPro_Mobile",null,""]},{"id":29202,"path":"Assets/TextMesh Pro/Shaders/TMPro_Surface.cginc","assetBundleId":-1,"data":["TMPro_Surface",null,""]},{"id":30838,"path":"Assets/TextMesh Pro/Sprites/EmojiOne.json","assetBundleId":-1,"data":["EmojiOne",null,"{\"frames\": [\r\n\r\n{\r\n\t\"filename\": \"1f60a.png\",\r\n\t\"frame\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n},\r\n{\r\n\t\"filename\": \"1f60b.png\",\r\n\t\"frame\": {\"x\":128,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n},\r\n{\r\n\t\"filename\": \"1f60d.png\",\r\n\t\"frame\": {\"x\":256,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n},\r\n{\r\n\t\"filename\": \"1f60e.png\",\r\n\t\"frame\": {\"x\":384,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n},\r\n{\r\n\t\"filename\": \"1f600.png\",\r\n\t\"frame\": {\"x\":0,\"y\":128,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n},\r\n{\r\n\t\"filename\": \"1f601.png\",\r\n\t\"frame\": {\"x\":128,\"y\":128,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n},\r\n{\r\n\t\"filename\": \"1f602.png\",\r\n\t\"frame\": {\"x\":256,\"y\":128,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n},\r\n{\r\n\t\"filename\": \"1f603.png\",\r\n\t\"frame\": {\"x\":384,\"y\":128,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n},\r\n{\r\n\t\"filename\": \"1f604.png\",\r\n\t\"frame\": {\"x\":0,\"y\":256,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n},\r\n{\r\n\t\"filename\": \"1f605.png\",\r\n\t\"frame\": {\"x\":128,\"y\":256,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n},\r\n{\r\n\t\"filename\": \"1f606.png\",\r\n\t\"frame\": {\"x\":256,\"y\":256,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n},\r\n{\r\n\t\"filename\": \"1f609.png\",\r\n\t\"frame\": {\"x\":384,\"y\":256,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n},\r\n{\r\n\t\"filename\": \"1f618.png\",\r\n\t\"frame\": {\"x\":0,\"y\":384,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n},\r\n{\r\n\t\"filename\": \"1f923.png\",\r\n\t\"frame\": {\"x\":128,\"y\":384,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n},\r\n{\r\n\t\"filename\": \"263a.png\",\r\n\t\"frame\": {\"x\":256,\"y\":384,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n},\r\n{\r\n\t\"filename\": \"2639.png\",\r\n\t\"frame\": {\"x\":384,\"y\":384,\"w\":128,\"h\":128},\r\n\t\"rotated\": false,\r\n\t\"trimmed\": false,\r\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":128,\"h\":128},\r\n\t\"sourceSize\": {\"w\":128,\"h\":128},\r\n\t\"pivot\": {\"x\":0.5,\"y\":0.5}\r\n}],\r\n\"meta\": {\r\n\t\"app\": \"http://www.codeandweb.com/texturepacker\",\r\n\t\"version\": \"1.0\",\r\n\t\"image\": \"EmojiOne.png\",\r\n\t\"format\": \"RGBA8888\",\r\n\t\"size\": {\"w\":512,\"h\":512},\r\n\t\"scale\": \"1\",\r\n\t\"smartupdate\": \"$TexturePacker:SmartUpdate:196a26a2e149d875b91ffc8fa3581e76:fc928c7e275404b7e0649307410475cb:424723c3774975ddb2053fd5c4b85f6e$\"\r\n}\r\n}\r\n"]}],"textures":[{"id":24312,"type":0,"path":"Assets/Content/Sprites/Quest/bg.png","assetBundleId":-1,"data":["bg",288,512,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24314,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_c2_t4.png","assetBundleId":-1,"data":["tile_c2_t4",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24308,"type":0,"path":"Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF.asset","assetBundleId":-1,"data":["LiberationSans SDF Atlas",512,512,1,1,1,0,1,0,0,1,54,0,0,0,0]},{"id":24392,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_background.png","assetBundleId":-1,"data":["tile_background",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24324,"type":0,"path":"Assets/Content/Sprites/Quest/end_card.png","assetBundleId":-1,"data":["end_card",288,512,1,1,1,0,45,1,1,1,120,0,0,1,1]},{"id":24428,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_c1_t4.png","assetBundleId":-1,"data":["tile_c1_t4",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24412,"type":0,"path":"Assets/Content/Sprites/Quest/dotted line.png","assetBundleId":-1,"data":["dotted line",146,146,1,1,1,0,4,1,1,1,8,0,0,1,1]},{"id":24424,"type":0,"path":"Assets/Content/Sprites/Dock/slot_background.png","assetBundleId":-1,"data":["slot_background",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24426,"type":0,"path":"Assets/Content/Sprites/Ingredients/cinnamon.png","assetBundleId":-1,"data":["cinnamon",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24414,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_c1_t1.png","assetBundleId":-1,"data":["tile_c1_t1",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24430,"type":0,"path":"Assets/Content/Sprites/Ingredients/spinach.png","assetBundleId":-1,"data":["spinach",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24432,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_c1_t2.png","assetBundleId":-1,"data":["tile_c1_t2",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24440,"type":0,"path":"Assets/Content/Sprites/Ingredients/dill.png","assetBundleId":-1,"data":["dill",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24434,"type":0,"path":"Assets/Content/Sprites/Ingredients/apple.png","assetBundleId":-1,"data":["apple",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24438,"type":0,"path":"Assets/Content/Sprites/Ingredients/garlic.png","assetBundleId":-1,"data":["garlic",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24436,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_c1_t5.png","assetBundleId":-1,"data":["tile_c1_t5",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24444,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_c1_t3.png","assetBundleId":-1,"data":["tile_c1_t3",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24442,"type":0,"path":"Assets/Content/Sprites/Ingredients/feta chesee.png","assetBundleId":-1,"data":["feta chesee",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24448,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_c3_t4.png","assetBundleId":-1,"data":["tile_c3_t4",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24446,"type":0,"path":"Assets/Content/Sprites/Ingredients/olive oil.png","assetBundleId":-1,"data":["olive oil",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24450,"type":0,"path":"Assets/Content/Sprites/Ingredients/lemon.png","assetBundleId":-1,"data":["lemon",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24452,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_c3_t1.png","assetBundleId":-1,"data":["tile_c3_t1",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24540,"type":0,"path":"Assets/Content/Sprites/Tiles/new tile_c1_t1.png","assetBundleId":-1,"data":["new tile_c1_t1",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24472,"type":0,"path":"Assets/TextMesh Pro/Sprites/EmojiOne.png","assetBundleId":-1,"data":["EmojiOne",512,512,10,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24454,"type":0,"path":"Assets/Content/Sprites/background.png","assetBundleId":-1,"data":["background",512,512,1,1,1,0,45,1,1,1,120,0,0,1,1]},{"id":24548,"type":0,"path":"Assets/Content/Sprites/Tiles/Special/tile_ice_1.png","assetBundleId":-1,"data":["tile_ice_1",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24544,"type":0,"path":"Assets/Content/Sprites/Tiles/Special/tile_crate.png","assetBundleId":-1,"data":["tile_crate",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24552,"type":0,"path":"Assets/Content/Sprites/Tiles/Special/tile_ice_2.png","assetBundleId":-1,"data":["tile_ice_2",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24556,"type":0,"path":"Assets/Content/Sprites/Tiles/Special/tile_ice_3.png","assetBundleId":-1,"data":["tile_ice_3",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24560,"type":0,"path":"Assets/Content/Sprites/Tiles/Special/tile_link.png","assetBundleId":-1,"data":["tile_link",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24564,"type":0,"path":"Assets/Content/Sprites/Tiles/Special/tile_unknown.png","assetBundleId":-1,"data":["tile_unknown",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24568,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_c2_t1.png","assetBundleId":-1,"data":["tile_c2_t1",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24572,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_c2_t2.png","assetBundleId":-1,"data":["tile_c2_t2",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24576,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_c2_t3.png","assetBundleId":-1,"data":["tile_c2_t3",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24584,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_c3_t2.png","assetBundleId":-1,"data":["tile_c3_t2",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24580,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_c2_t5.png","assetBundleId":-1,"data":["tile_c2_t5",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24592,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_c3_t5.png","assetBundleId":-1,"data":["tile_c3_t5",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24620,"type":0,"path":"Assets/Content/Sprites/EXAMPLE.png","assetBundleId":-1,"data":["EXAMPLE",288,512,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":26442,"type":0,"path":"Assets/Content/Sprites/Ingredients/yeast.png","assetBundleId":-1,"data":["yeast",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":24588,"type":0,"path":"Assets/Content/Sprites/Tiles/tile_c3_t3.png","assetBundleId":-1,"data":["tile_c3_t3",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":26602,"type":0,"path":"Assets/Content/Sprites/Ingredients/vanila.png","assetBundleId":-1,"data":["vanila",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":26626,"type":0,"path":"Assets/Content/Sprites/Ingredients/eggplant.png","assetBundleId":-1,"data":["eggplant",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":26644,"type":0,"path":"Assets/Content/Sprites/Ingredients/ham.png","assetBundleId":-1,"data":["ham",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":26650,"type":0,"path":"Assets/Content/Sprites/Ingredients/makaroni noodle.png","assetBundleId":-1,"data":["makaroni noodle",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":26658,"type":0,"path":"Assets/Content/Sprites/Ingredients/fajita seasoning.png","assetBundleId":-1,"data":["fajita seasoning",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":26748,"type":0,"path":"Assets/Content/Sprites/Ingredients/almond.png","assetBundleId":-1,"data":["almond",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":26732,"type":0,"path":"Assets/Content/Sprites/Ingredients/cheddar cheese.png","assetBundleId":-1,"data":["cheddar cheese",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":26790,"type":0,"path":"Assets/Content/Sprites/Ingredients/salmon fillets.png","assetBundleId":-1,"data":["salmon fillets",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":26830,"type":0,"path":"Assets/Content/Sprites/Ingredients/pastry dought.png","assetBundleId":-1,"data":["pastry dought",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":26964,"type":0,"path":"Assets/Content/Sprites/Ingredients/zucini.png","assetBundleId":-1,"data":["zucini",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27004,"type":0,"path":"Assets/Content/Sprites/Ingredients/pizza dough.png","assetBundleId":-1,"data":["pizza dough",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27038,"type":0,"path":"Assets/Content/Sprites/Ingredients/pie crust.png","assetBundleId":-1,"data":["pie crust",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27094,"type":0,"path":"Assets/Content/Sprites/Ingredients/ricotta cheese.png","assetBundleId":-1,"data":["ricotta cheese",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27064,"type":0,"path":"Assets/Content/Sprites/Ingredients/milk.png","assetBundleId":-1,"data":["milk",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27138,"type":0,"path":"Assets/Content/Sprites/Particles/spark_custom.png","assetBundleId":-1,"data":["spark_custom",256,256,8,1,1,0,47,0,1,1,124,0,0,0,0]},{"id":27148,"type":0,"path":"Assets/Content/Sprites/Ingredients/breadcrumbs.png","assetBundleId":-1,"data":["breadcrumbs",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27164,"type":0,"path":"Assets/Content/Sprites/Ingredients/brie cheese.png","assetBundleId":-1,"data":["brie cheese",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27168,"type":0,"path":"Assets/Content/Sprites/Ingredients/pepperoni.png","assetBundleId":-1,"data":["pepperoni",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27176,"type":0,"path":"Assets/Content/Sprites/Ingredients/lasagna noodle.png","assetBundleId":-1,"data":["lasagna noodle",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27334,"type":0,"path":"Assets/Content/Sprites/Ingredients/berrie.png","assetBundleId":-1,"data":["berrie",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27358,"type":0,"path":"Assets/Content/Sprites/Ingredients/phyllo dough.png","assetBundleId":-1,"data":["phyllo dough",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27362,"type":0,"path":"Assets/Content/Sprites/Ingredients/ground beef.png","assetBundleId":-1,"data":["ground beef",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27394,"type":0,"path":"Assets/Content/Sprites/Ingredients/coriander seed.png","assetBundleId":-1,"data":["coriander seed",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27408,"type":0,"path":"Assets/Content/Sprites/Ingredients/ziti noodle.png","assetBundleId":-1,"data":["ziti noodle",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27414,"type":0,"path":"Assets/Content/Sprites/Ingredients/permasan.png","assetBundleId":-1,"data":["permasan",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27452,"type":0,"path":"Assets/Content/Sprites/Ingredients/raspberry jam.png","assetBundleId":-1,"data":["raspberry jam",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27572,"type":0,"path":"Assets/Content/Sprites/Ingredients/béchamel sauce.png","assetBundleId":-1,"data":["béchamel sauce",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27610,"type":0,"path":"Assets/Content/Sprites/Ingredients/sour cream.png","assetBundleId":-1,"data":["sour cream",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27630,"type":0,"path":"Assets/Content/Sprites/Ingredients/walnut.png","assetBundleId":-1,"data":["walnut",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27660,"type":0,"path":"Assets/Content/Sprites/Ingredients/tortillas.png","assetBundleId":-1,"data":["tortillas",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27698,"type":0,"path":"Assets/Content/Sprites/Ingredients/mustard.png","assetBundleId":-1,"data":["mustard",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27726,"type":0,"path":"Assets/Content/Sprites/Ingredients/rosemary.png","assetBundleId":-1,"data":["rosemary",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27742,"type":0,"path":"Assets/Content/Sprites/Ingredients/ginger.png","assetBundleId":-1,"data":["ginger",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27736,"type":0,"path":"Assets/Content/Sprites/Ingredients/bacon.png","assetBundleId":-1,"data":["bacon",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27748,"type":0,"path":"Assets/Content/Sprites/Ingredients/mushroom.png","assetBundleId":-1,"data":["mushroom",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27826,"type":0,"path":"Assets/Content/Sprites/Ingredients/chiken broth.png","assetBundleId":-1,"data":["chiken broth",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27858,"type":0,"path":"Assets/Content/Sprites/Ingredients/mashed potatoes.png","assetBundleId":-1,"data":["mashed potatoes",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27942,"type":0,"path":"Assets/Content/Sprites/Ingredients/tomato.png","assetBundleId":-1,"data":["tomato",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":27962,"type":0,"path":"Assets/Content/Sprites/Ingredients/tofu.png","assetBundleId":-1,"data":["tofu",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28004,"type":0,"path":"Assets/Content/Sprites/Ingredients/ygrt.png","assetBundleId":-1,"data":["ygrt",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28104,"type":0,"path":"Assets/Content/Sprites/Ingredients/butter.png","assetBundleId":-1,"data":["butter",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28114,"type":0,"path":"Assets/Content/Sprites/Ingredients/cream.png","assetBundleId":-1,"data":["cream",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28164,"type":0,"path":"Assets/Content/Sprites/Ingredients/bread.png","assetBundleId":-1,"data":["bread",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28180,"type":0,"path":"Assets/Content/Sprites/Ingredients/lemon juice.png","assetBundleId":-1,"data":["lemon juice",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28196,"type":0,"path":"Assets/Content/Sprites/Ingredients/tilapia fillets.png","assetBundleId":-1,"data":["tilapia fillets",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28242,"type":0,"path":"Assets/Content/Sprites/Ingredients/cream cheese.png","assetBundleId":-1,"data":["cream cheese",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28294,"type":0,"path":"Assets/Content/Sprites/Particles/cloud_blurry.png","assetBundleId":-1,"data":["cloud_blurry",128,128,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28268,"type":0,"path":"Assets/Content/Sprites/Ingredients/peas.png","assetBundleId":-1,"data":["peas",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28346,"type":0,"path":"Assets/Content/Sprites/Ingredients/Worcestershire sauce.png","assetBundleId":-1,"data":["Worcestershire sauce",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28412,"type":0,"path":"Assets/Content/Sprites/Ingredients/pinto bean.png","assetBundleId":-1,"data":["pinto bean",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28536,"type":0,"path":"Assets/Content/Sprites/Ingredients/pepper.png","assetBundleId":-1,"data":["pepper",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28450,"type":0,"path":"Assets/Content/Sprites/Ingredients/salt.png","assetBundleId":-1,"data":["salt",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28578,"type":0,"path":"Assets/Content/Sprites/Ingredients/marinara sauce.png","assetBundleId":-1,"data":["marinara sauce",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28598,"type":0,"path":"Assets/Content/Sprites/Ingredients/cumin.png","assetBundleId":-1,"data":["cumin",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28618,"type":0,"path":"Assets/Content/Sprites/Ingredients/turmeric.png","assetBundleId":-1,"data":["turmeric",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28700,"type":0,"path":"Assets/Content/Sprites/Ingredients/rice.png","assetBundleId":-1,"data":["rice",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28776,"type":0,"path":"Assets/Content/Sprites/Ingredients/Gruyère chese.png","assetBundleId":-1,"data":["Gruyère chese",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28784,"type":0,"path":"Assets/Content/Sprites/Ingredients/honey.png","assetBundleId":-1,"data":["honey",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28962,"type":0,"path":"Assets/Content/Sprites/Ingredients/carrot.png","assetBundleId":-1,"data":["carrot",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":28888,"type":0,"path":"Assets/Content/Sprites/Ingredients/chicken breasts.png","assetBundleId":-1,"data":["chicken breasts",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29096,"type":0,"path":"Assets/Content/Sprites/Ingredients/lemon zest.png","assetBundleId":-1,"data":["lemon zest",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29118,"type":0,"path":"Assets/Content/Sprites/Ingredients/egg.png","assetBundleId":-1,"data":["egg",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29142,"type":0,"path":"Assets/Content/Sprites/Ingredients/chiken full.png","assetBundleId":-1,"data":["chiken full",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29190,"type":0,"path":"Assets/Content/Sprites/Ingredients/chickpeas.png","assetBundleId":-1,"data":["chickpeas",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29322,"type":0,"path":"Assets/Content/Sprites/Ingredients/sweet petato.png","assetBundleId":-1,"data":["sweet petato",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29276,"type":0,"path":"Assets/Content/Sprites/Ingredients/russet potatoes.png","assetBundleId":-1,"data":["russet potatoes",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29340,"type":0,"path":"Assets/Content/Sprites/Ingredients/oat.png","assetBundleId":-1,"data":["oat",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29414,"type":0,"path":"Assets/Content/Sprites/Ingredients/parsley.png","assetBundleId":-1,"data":["parsley",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29590,"type":0,"path":"Assets/Content/Sprites/Ingredients/flour.png","assetBundleId":-1,"data":["flour",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29620,"type":0,"path":"Assets/Content/Sprites/Ingredients/masala salt.png","assetBundleId":-1,"data":["masala salt",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29646,"type":0,"path":"Assets/Content/Sprites/Ingredients/sugar.png","assetBundleId":-1,"data":["sugar",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29676,"type":0,"path":"Assets/Content/Sprites/Ingredients/soy sauce.png","assetBundleId":-1,"data":["soy sauce",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29748,"type":0,"path":"Assets/Content/Sprites/Ingredients/ground turkey.png","assetBundleId":-1,"data":["ground turkey",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29846,"type":0,"path":"Assets/Content/Sprites/Ingredients/groung lamb.png","assetBundleId":-1,"data":["groung lamb",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29876,"type":0,"path":"Assets/Content/Sprites/Ingredients/onion.png","assetBundleId":-1,"data":["onion",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29942,"type":0,"path":"Assets/Content/Sprites/Ingredients/chives.png","assetBundleId":-1,"data":["chives",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29946,"type":0,"path":"Assets/Content/Sprites/Ingredients/sesame oil.png","assetBundleId":-1,"data":["sesame oil",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29980,"type":0,"path":"Assets/Content/Sprites/Ingredients/thyme.png","assetBundleId":-1,"data":["thyme",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":29996,"type":0,"path":"Assets/Content/Sprites/Ingredients/pecan.png","assetBundleId":-1,"data":["pecan",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":30118,"type":0,"path":"Assets/Content/Sprites/Ingredients/Dijon mustard.png","assetBundleId":-1,"data":["Dijon mustard",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":30186,"type":0,"path":"Assets/Content/Sprites/Ingredients/puff pastry.png","assetBundleId":-1,"data":["puff pastry",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":30160,"type":0,"path":"Assets/Content/Sprites/Ingredients/brown sugar.png","assetBundleId":-1,"data":["brown sugar",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":30302,"type":0,"path":"Assets/Content/Sprites/Ingredients/shrimp.png","assetBundleId":-1,"data":["shrimp",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":30320,"type":0,"path":"Assets/Content/Sprites/Ingredients/cod fillets.png","assetBundleId":-1,"data":["cod fillets",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":30326,"type":0,"path":"Assets/Content/Sprites/Ingredients/molasses.png","assetBundleId":-1,"data":["molasses",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":30664,"type":0,"path":"Assets/Content/Sprites/Ingredients/shredded chicken.png","assetBundleId":-1,"data":["shredded chicken",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":30394,"type":0,"path":"Assets/Content/Sprites/Ingredients/mozarella.png","assetBundleId":-1,"data":["mozarella",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":30828,"type":0,"path":"Assets/Content/Sprites/Ingredients/chicken thighs.png","assetBundleId":-1,"data":["chicken thighs",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":30880,"type":0,"path":"Assets/Content/Sprites/Ingredients/ketchup.png","assetBundleId":-1,"data":["ketchup",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":30876,"type":0,"path":"Assets/Content/Sprites/Ingredients/bell peppers.png","assetBundleId":-1,"data":["bell peppers",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":30892,"type":0,"path":"Assets/Content/Sprites/Ingredients/cloves seed.png","assetBundleId":-1,"data":["cloves seed",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]},{"id":30952,"type":0,"path":"Assets/Content/Sprites/Ingredients/enchilada sauce.png","assetBundleId":-1,"data":["enchilada sauce",256,256,1,1,1,0,47,1,1,1,124,0,0,1,1]}]}