{"id":414,"assetBundleId":-1,"data":[[],"TextMeshPro\/Distance Field SSD",null,["BEVEL_ON","FORCE_LINEAR","GLOW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[0,0,"",0,"",0,[0,"unity_GUIZTestMode"],[0,null],[0,"_CullMode"],[[1,null],[10,null],[0,null]],[[1,null],[10,null],[0,null]],[0,"_ColorMask"],[0,null],[0,null],[0,"_Stencil"],[0,"_StencilReadMask"],[0,"_StencilWriteMask"],[[0,"_StencilOp"],[0,null],[0,null],[0,"_StencilComp"]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],["BEVEL_ON","FORCE_LINEAR","GLOW_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","BEVEL_ON"],0],[["__","UNDERLAY_ON","UNDERLAY_INNER"],0],[["__","GLOW_ON"],0],[["__","FORCE_LINEAR"],0],[["__","UNITY_UI_CLIP_RECT"],0],[["__","UNITY_UI_ALPHACLIP"],0]],[[0,0,[],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp float vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    vs_COLOR0 = in_COLOR0;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    vs_TEXCOORD1 = u_xlat8.x * 0.5;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp float vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvec2 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec2 u_xlat5;\nmediump float u_xlat16_7;\nfloat u_xlat10;\nlowp float u_xlat10_10;\nmediump float u_xlat16_12;\nvoid main()\n{\n    u_xlat0.x = (-vs_TEXCOORD1) + 0.5;\n    u_xlat1.x = dFdx(vs_TEXCOORD0.y);\n    u_xlat1.y = dFdy(vs_TEXCOORD0.y);\n    u_xlat5.x = _TextureWidth * 0.75;\n    u_xlat5.xy = u_xlat5.xx * u_xlat1.xy;\n    u_xlat5.x = dot(u_xlat5.xy, u_xlat5.xy);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.x = u_xlat5.x * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat5.x = u_xlat10 * u_xlat5.x;\n    u_xlat10 = 0.5 \/ u_xlat5.x;\n    u_xlat0.x = u_xlat10 + u_xlat0.x;\n    u_xlat10_10 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_10) + u_xlat0.x;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat5.x * u_xlat10;\n    u_xlat16_2 = u_xlat10 * 0.5;\n    u_xlat16_7 = min(u_xlat10, 1.0);\n    u_xlat16_7 = sqrt(u_xlat16_7);\n    u_xlat16_12 = u_xlat0.x * u_xlat5.x + (-u_xlat16_2);\n    u_xlat16_2 = u_xlat0.x * u_xlat5.x + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_7 * u_xlat16_2;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat10 = u_xlat5.x * u_xlat0.x;\n    u_xlat16_7 = u_xlat0.x * u_xlat5.x + 1.0;\n    u_xlat16_12 = u_xlat10 * 0.5 + u_xlat16_12;\n    u_xlat16_7 = u_xlat16_12 \/ u_xlat16_7;\n    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);\n    u_xlat16_7 = (-u_xlat16_7) + 1.0;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat1 = u_xlat10_0 * _OutlineColor;\n    u_xlat0.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_3 = texture2D(_FaceTex, u_xlat3.xy);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat10_3.xyz;\n    u_xlat3.x = u_xlat10_3.w * _FaceColor.w;\n    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat3.xxx;\n    u_xlat16_1.xyz = u_xlat1.xyz * u_xlat1.www + (-u_xlat16_4.xyz);\n    u_xlat16_1.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat3.x);\n    u_xlat16_1 = u_xlat16_1 * vec4(u_xlat16_2);\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat3.xxx + u_xlat16_1.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_3.w + u_xlat16_1.w;\n    u_xlat16_0 = vec4(u_xlat16_7) * u_xlat16_0;\n    u_xlat0 = u_xlat16_0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0,0],[0,0,["UNITY_UI_ALPHACLIP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp float vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    vs_COLOR0 = in_COLOR0;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    vs_TEXCOORD1 = u_xlat8.x * 0.5;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp float vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvec2 u_xlat3;\nlowp vec4 u_xlat10_3;\nbool u_xlatb3;\nmediump vec4 u_xlat16_4;\nvec2 u_xlat5;\nmediump float u_xlat16_7;\nfloat u_xlat10;\nlowp float u_xlat10_10;\nmediump float u_xlat16_12;\nvoid main()\n{\n    u_xlat0.x = (-vs_TEXCOORD1) + 0.5;\n    u_xlat1.x = dFdx(vs_TEXCOORD0.y);\n    u_xlat1.y = dFdy(vs_TEXCOORD0.y);\n    u_xlat5.x = _TextureWidth * 0.75;\n    u_xlat5.xy = u_xlat5.xx * u_xlat1.xy;\n    u_xlat5.x = dot(u_xlat5.xy, u_xlat5.xy);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.x = u_xlat5.x * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat5.x = u_xlat10 * u_xlat5.x;\n    u_xlat10 = 0.5 \/ u_xlat5.x;\n    u_xlat0.x = u_xlat10 + u_xlat0.x;\n    u_xlat10_10 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_10) + u_xlat0.x;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat5.x * u_xlat10;\n    u_xlat16_2 = u_xlat10 * 0.5;\n    u_xlat16_7 = min(u_xlat10, 1.0);\n    u_xlat16_7 = sqrt(u_xlat16_7);\n    u_xlat16_12 = u_xlat0.x * u_xlat5.x + (-u_xlat16_2);\n    u_xlat16_2 = u_xlat0.x * u_xlat5.x + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_7 * u_xlat16_2;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat10 = u_xlat5.x * u_xlat0.x;\n    u_xlat16_7 = u_xlat0.x * u_xlat5.x + 1.0;\n    u_xlat16_12 = u_xlat10 * 0.5 + u_xlat16_12;\n    u_xlat16_7 = u_xlat16_12 \/ u_xlat16_7;\n    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);\n    u_xlat16_7 = (-u_xlat16_7) + 1.0;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat1 = u_xlat10_0 * _OutlineColor;\n    u_xlat0.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_3 = texture2D(_FaceTex, u_xlat3.xy);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat10_3.xyz;\n    u_xlat3.x = u_xlat10_3.w * _FaceColor.w;\n    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat3.xxx;\n    u_xlat16_1.xyz = u_xlat1.xyz * u_xlat1.www + (-u_xlat16_4.xyz);\n    u_xlat16_1.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat3.x);\n    u_xlat16_1 = u_xlat16_1 * vec4(u_xlat16_2);\n    u_xlat16_4.w = _FaceColor.w * u_xlat10_3.w + u_xlat16_1.w;\n    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat3.xxx + u_xlat16_1.xyz;\n    u_xlat16_0 = vec4(u_xlat16_7) * u_xlat16_4;\n    u_xlat16_2 = u_xlat16_4.w * u_xlat16_7 + -0.00100000005;\n    u_xlatb3 = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat0 = u_xlat16_0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0,0],[0,0,["UNITY_UI_CLIP_RECT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp float vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    vs_COLOR0 = in_COLOR0;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    vs_TEXCOORD1 = u_xlat8.x * 0.5;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp float vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump float u_xlat16_8;\nvec2 u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat6.x = (-vs_TEXCOORD1) + 0.5;\n    u_xlat1.x = dFdx(vs_TEXCOORD0.y);\n    u_xlat1.y = dFdy(vs_TEXCOORD0.y);\n    u_xlat12.x = _TextureWidth * 0.75;\n    u_xlat12.xy = u_xlat12.xx * u_xlat1.xy;\n    u_xlat12.x = dot(u_xlat12.xy, u_xlat12.xy);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat12.x = u_xlat12.x * _GradientScale;\n    u_xlat18 = _Sharpness + 1.0;\n    u_xlat12.x = u_xlat18 * u_xlat12.x;\n    u_xlat18 = 0.5 \/ u_xlat12.x;\n    u_xlat6.x = u_xlat18 + u_xlat6.x;\n    u_xlat0.x = (-u_xlat10_0) + u_xlat6.x;\n    u_xlat6.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat6.x = u_xlat12.x * u_xlat6.x;\n    u_xlat16_2 = u_xlat6.x * 0.5;\n    u_xlat16_8 = min(u_xlat6.x, 1.0);\n    u_xlat16_8 = sqrt(u_xlat16_8);\n    u_xlat16_14 = u_xlat0.x * u_xlat12.x + (-u_xlat16_2);\n    u_xlat16_2 = u_xlat0.x * u_xlat12.x + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_8 * u_xlat16_2;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat6.x = u_xlat12.x * u_xlat0.x;\n    u_xlat16_8 = u_xlat0.x * u_xlat12.x + 1.0;\n    u_xlat0.x = float(1.0) \/ u_xlat12.x;\n    u_xlat0.xz = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xx;\n    u_xlat0.xz = vec2(0.25, 0.25) \/ u_xlat0.xz;\n    u_xlat16_14 = u_xlat6.x * 0.5 + u_xlat16_14;\n    u_xlat16_8 = u_xlat16_14 \/ u_xlat16_8;\n    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + 1.0;\n    u_xlat6.xz = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_1 = texture2D(_OutlineTex, u_xlat6.xz);\n    u_xlat3 = u_xlat10_1 * _OutlineColor;\n    u_xlat1.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat6.xz = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat6.xz);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_4.xyz;\n    u_xlat6.x = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_5.xyz = u_xlat6.xxx * u_xlat1.xyz;\n    u_xlat16_3.xyz = u_xlat3.xyz * u_xlat3.www + (-u_xlat16_5.xyz);\n    u_xlat16_3.w = _OutlineColor.w * u_xlat10_1.w + (-u_xlat6.x);\n    u_xlat16_3 = vec4(u_xlat16_2) * u_xlat16_3;\n    u_xlat16_1.xyz = u_xlat1.xyz * u_xlat6.xxx + u_xlat16_3.xyz;\n    u_xlat16_1.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_3.w;\n    u_xlat16_1 = vec4(u_xlat16_8) * u_xlat16_1;\n    u_xlat6.xz = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat6.xz = u_xlat6.xz + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xz * u_xlat6.xz;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0 = u_xlat16_1 * vec4(u_xlat16_2);\n    u_xlat0 = u_xlat16_0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0,0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp float vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    vs_COLOR0 = in_COLOR0;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    vs_TEXCOORD1 = u_xlat8.x * 0.5;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp float vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump float u_xlat16_8;\nvec2 u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat6.x = (-vs_TEXCOORD1) + 0.5;\n    u_xlat1.x = dFdx(vs_TEXCOORD0.y);\n    u_xlat1.y = dFdy(vs_TEXCOORD0.y);\n    u_xlat12.x = _TextureWidth * 0.75;\n    u_xlat12.xy = u_xlat12.xx * u_xlat1.xy;\n    u_xlat12.x = dot(u_xlat12.xy, u_xlat12.xy);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat12.x = u_xlat12.x * _GradientScale;\n    u_xlat18 = _Sharpness + 1.0;\n    u_xlat12.x = u_xlat18 * u_xlat12.x;\n    u_xlat18 = 0.5 \/ u_xlat12.x;\n    u_xlat6.x = u_xlat18 + u_xlat6.x;\n    u_xlat0.x = (-u_xlat10_0) + u_xlat6.x;\n    u_xlat6.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat6.x = u_xlat12.x * u_xlat6.x;\n    u_xlat16_2 = u_xlat6.x * 0.5;\n    u_xlat16_8 = min(u_xlat6.x, 1.0);\n    u_xlat16_8 = sqrt(u_xlat16_8);\n    u_xlat16_14 = u_xlat0.x * u_xlat12.x + (-u_xlat16_2);\n    u_xlat16_2 = u_xlat0.x * u_xlat12.x + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_8 * u_xlat16_2;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat6.x = u_xlat12.x * u_xlat0.x;\n    u_xlat16_8 = u_xlat0.x * u_xlat12.x + 1.0;\n    u_xlat0.x = float(1.0) \/ u_xlat12.x;\n    u_xlat0.xz = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xx;\n    u_xlat0.xz = vec2(0.25, 0.25) \/ u_xlat0.xz;\n    u_xlat16_14 = u_xlat6.x * 0.5 + u_xlat16_14;\n    u_xlat16_8 = u_xlat16_14 \/ u_xlat16_8;\n    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + 1.0;\n    u_xlat6.xz = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_1 = texture2D(_OutlineTex, u_xlat6.xz);\n    u_xlat3 = u_xlat10_1 * _OutlineColor;\n    u_xlat1.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat6.xz = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat6.xz);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_4.xyz;\n    u_xlat6.x = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_5.xyz = u_xlat6.xxx * u_xlat1.xyz;\n    u_xlat16_3.xyz = u_xlat3.xyz * u_xlat3.www + (-u_xlat16_5.xyz);\n    u_xlat16_3.w = _OutlineColor.w * u_xlat10_1.w + (-u_xlat6.x);\n    u_xlat16_3 = vec4(u_xlat16_2) * u_xlat16_3;\n    u_xlat16_1.xyz = u_xlat1.xyz * u_xlat6.xxx + u_xlat16_3.xyz;\n    u_xlat16_1.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_3.w;\n    u_xlat16_1 = vec4(u_xlat16_8) * u_xlat16_1;\n    u_xlat6.xz = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat6.xz = u_xlat6.xz + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xz * u_xlat6.xz;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_8 = u_xlat16_1.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_0 = u_xlat16_1 * vec4(u_xlat16_2);\n    u_xlat0 = u_xlat16_0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n    u_xlatb4 = u_xlat16_8<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n",0,0]],[],0]],[],[["_FaceTex",4,0,0,0,0,"white",0],["_FaceUVSpeedX",3,0,-5,5,0,"",0],["_FaceUVSpeedY",3,0,-5,5,0,"",0],["_FaceColor",0,1,1,1,1,"",16],["_FaceDilate",3,0,-1,1,0,"",0],["_OutlineColor",0,0,0,0,1,"",16],["_OutlineTex",4,0,0,0,0,"white",0],["_OutlineUVSpeedX",3,0,-5,5,0,"",0],["_OutlineUVSpeedY",3,0,-5,5,0,"",0],["_OutlineWidth",3,0,0,1,0,"",0],["_OutlineSoftness",3,0,0,1,0,"",0],["_Bevel",3,0.5,0,1,0,"",0],["_BevelOffset",3,0,-0.5,0.5,0,"",0],["_BevelWidth",3,0,-0.5,0.5,0,"",0],["_BevelClamp",3,0,0,1,0,"",0],["_BevelRoundness",3,0,0,1,0,"",0],["_LightAngle",3,3.14159989356995,0,6.28318548202515,0,"",0],["_SpecularColor",0,1,1,1,1,"",16],["_SpecularPower",3,2,0,4,0,"",0],["_Reflectivity",3,10,5,15,0,"",0],["_Diffuse",3,0.5,0,1,0,"",0],["_Ambient",3,0.5,1,0,0,"",0],["_BumpMap",4,0,0,0,0,"bump",0],["_BumpOutline",3,0,0,1,0,"",0],["_BumpFace",3,0,0,1,0,"",0],["_ReflectFaceColor",0,0,0,0,1,"",0],["_ReflectOutlineColor",0,0,0,0,1,"",0],["_Cube",4,0,0,0,0,"black",0],["_EnvMatrixRotation",1,0,0,0,0,"",0],["_UnderlayColor",0,0,0,0,0.5,"",16],["_UnderlayOffsetX",3,0,-1,1,0,"",0],["_UnderlayOffsetY",3,0,-1,1,0,"",0],["_UnderlayDilate",3,0,-1,1,0,"",0],["_UnderlaySoftness",3,0,0,1,0,"",0],["_GlowColor",0,0,1,0,0.5,"",16],["_GlowOffset",3,0,-1,1,0,"",0],["_GlowInner",3,0.0500000007450581,0,1,0,"",0],["_GlowOuter",3,0.0500000007450581,0,1,0,"",0],["_GlowPower",3,0.75,1,0,0,"",0],["_WeightNormal",2,0,0,0,0,"",0],["_WeightBold",2,0.5,0,0,0,"",0],["_ShaderFlags",2,0,0,0,0,"",0],["_ScaleRatioA",2,1,0,0,0,"",0],["_ScaleRatioB",2,1,0,0,0,"",0],["_ScaleRatioC",2,1,0,0,0,"",0],["_MainTex",4,0,0,0,0,"white",0],["_TextureWidth",2,512,0,0,0,"",0],["_TextureHeight",2,512,0,0,0,"",0],["_GradientScale",2,5,0,0,0,"",0],["_ScaleX",2,1,0,0,0,"",0],["_ScaleY",2,1,0,0,0,"",0],["_PerspectiveFilter",3,0.875,0,1,0,"",0],["_Sharpness",3,0,-1,1,0,"",0],["_VertexOffsetX",2,0,0,0,0,"",0],["_VertexOffsetY",2,0,0,0,0,"",0],["_MaskCoord",1,0,0,32767,32767,"",0],["_ClipRect",1,-32767,-32767,32767,32767,"",0],["_MaskSoftnessX",2,0,0,0,0,"",0],["_MaskSoftnessY",2,0,0,0,0,"",0],["_StencilComp",2,8,0,0,0,"",0],["_Stencil",2,0,0,0,0,"",0],["_StencilOp",2,0,0,0,0,"",0],["_StencilWriteMask",2,255,0,0,0,"",0],["_StencilReadMask",2,255,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0],["_ColorMask",2,15,0,0,0,"",0]],0,408,0,0,0]}