{"id":430,"assetBundleId":-1,"data":[[],"TextMeshPro\/Mobile\/Distance Field SSD",null,["OUTLINE_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[0,0,"",0,"",0,[0,"unity_GUIZTestMode"],[0,null],[0,"_CullMode"],[[1,null],[10,null],[0,null]],[[1,null],[10,null],[0,null]],[0,"_ColorMask"],[0,null],[0,null],[0,"_Stencil"],[0,"_StencilReadMask"],[0,"_StencilWriteMask"],[[0,"_StencilOp"],[0,null],[0,null],[0,"_StencilComp"]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],["OUTLINE_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","OUTLINE_ON"],0],[["__","UNDERLAY_ON","UNDERLAY_INNER"],0],[["__","UNITY_UI_CLIP_RECT"],0],[["__","UNITY_UI_ALPHACLIP"],0]],[[0,0,[],"\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1 = in_COLOR0 * _FaceColor;\n    vs_COLOR0.xyz = u_xlat1.www * u_xlat1.xyz;\n    vs_COLOR0.w = u_xlat1.w;\n    u_xlat6.x = in_COLOR0.w * _OutlineColor.w;\n    vs_COLOR1.xyz = u_xlat6.xxx * _OutlineColor.xyz;\n    vs_COLOR1.w = u_xlat6.x;\n    u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy + (-u_xlat1.xy);\n    u_xlat6.xy = (-u_xlat1.xy) + u_xlat1.zw;\n    vs_TEXCOORD0.zw = u_xlat0.xy \/ u_xlat6.xy;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat3 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat3 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat0.x = _GradientScale * 1.33329999;\n    u_xlat3 = _Sharpness + 1.0;\n    u_xlat0.x = u_xlat3 * u_xlat0.x;\n    vs_TEXCOORD1.y = u_xlat0.x \/ _TextureWidth;\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    vs_TEXCOORD1.z = u_xlat0.x * 0.5;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2.xy = vec2(0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nfloat u_xlat1;\nlowp float u_xlat10_1;\nvec2 u_xlat2;\nvoid main()\n{\n    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);\n    u_xlat2.xy = dFdy(vs_TEXCOORD0.yx);\n    u_xlat1 = u_xlat2.y * u_xlat0.y;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x + (-u_xlat1);\n    u_xlat0.x = inversesqrt(abs(u_xlat0.x));\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat1 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat1 = u_xlat1 * u_xlat0.x + 1.0;\n    u_xlat0.x = u_xlat0.x \/ u_xlat1;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat1 = u_xlat10_1 + (-vs_TEXCOORD1.x);\n    u_xlat0.x = u_xlat1 * u_xlat0.x + 0.5;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    SV_Target0 = u_xlat0.xxxx * vs_COLOR0;\n    return;\n}\n\n",0,0],[0,0,["UNITY_UI_ALPHACLIP"],"\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1 = in_COLOR0 * _FaceColor;\n    vs_COLOR0.xyz = u_xlat1.www * u_xlat1.xyz;\n    vs_COLOR0.w = u_xlat1.w;\n    u_xlat6.x = in_COLOR0.w * _OutlineColor.w;\n    vs_COLOR1.xyz = u_xlat6.xxx * _OutlineColor.xyz;\n    vs_COLOR1.w = u_xlat6.x;\n    u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy + (-u_xlat1.xy);\n    u_xlat6.xy = (-u_xlat1.xy) + u_xlat1.zw;\n    vs_TEXCOORD0.zw = u_xlat0.xy \/ u_xlat6.xy;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat3 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat3 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat0.x = _GradientScale * 1.33329999;\n    u_xlat3 = _Sharpness + 1.0;\n    u_xlat0.x = u_xlat3 * u_xlat0.x;\n    vs_TEXCOORD1.y = u_xlat0.x \/ _TextureWidth;\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    vs_TEXCOORD1.z = u_xlat0.x * 0.5;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2.xy = vec2(0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp float u_xlat10_2;\nvec2 u_xlat4;\nvoid main()\n{\n    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);\n    u_xlat4.xy = dFdy(vs_TEXCOORD0.yx);\n    u_xlat2 = u_xlat4.y * u_xlat0.y;\n    u_xlat0.x = u_xlat0.x * u_xlat4.x + (-u_xlat2);\n    u_xlat0.x = inversesqrt(abs(u_xlat0.x));\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat2 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat2 = u_xlat2 * u_xlat0.x + 1.0;\n    u_xlat0.x = u_xlat0.x \/ u_xlat2;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat2 = u_xlat10_2 + (-vs_TEXCOORD1.x);\n    u_xlat0.x = u_xlat2 * u_xlat0.x + 0.5;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat2 = vs_COLOR0.w * u_xlat0.x + -0.00100000005;\n    u_xlat1 = u_xlat0.xxxx * vs_COLOR0;\n    SV_Target0 = u_xlat1;\n    u_xlatb0 = u_xlat2<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n",0,0],[0,0,["UNITY_UI_CLIP_RECT"],"\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1 = in_COLOR0 * _FaceColor;\n    vs_COLOR0.xyz = u_xlat1.www * u_xlat1.xyz;\n    vs_COLOR0.w = u_xlat1.w;\n    u_xlat6.x = in_COLOR0.w * _OutlineColor.w;\n    vs_COLOR1.xyz = u_xlat6.xxx * _OutlineColor.xyz;\n    vs_COLOR1.w = u_xlat6.x;\n    u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat6.xy = u_xlat0.xy + (-u_xlat1.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);\n    vs_TEXCOORD2.xy = (-u_xlat1.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat1.xy) + u_xlat1.zw;\n    vs_TEXCOORD0.zw = u_xlat6.xy \/ u_xlat0.xy;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat3 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat3 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat0.x = _GradientScale * 1.33329999;\n    u_xlat3 = _Sharpness + 1.0;\n    u_xlat0.x = u_xlat3 * u_xlat0.x;\n    vs_TEXCOORD1.y = u_xlat0.x \/ _TextureWidth;\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    vs_TEXCOORD1.z = u_xlat0.x * 0.5;\n    vs_TEXCOORD1.w = 0.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec2 u_xlat2;\nvec2 u_xlat4;\nlowp float u_xlat10_4;\nvoid main()\n{\n    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);\n    u_xlat4.xy = dFdy(vs_TEXCOORD0.yx);\n    u_xlat2.x = u_xlat4.y * u_xlat0.y;\n    u_xlat0.x = u_xlat0.x * u_xlat4.x + (-u_xlat2.x);\n    u_xlat0.x = inversesqrt(abs(u_xlat0.x));\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * u_xlat0.x + 1.0;\n    u_xlat0.x = u_xlat0.x \/ u_xlat2.x;\n    u_xlat2.x = float(1.0) \/ u_xlat0.x;\n    u_xlat2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat2.xx;\n    u_xlat2.xy = vec2(0.25, 0.25) \/ u_xlat2.xy;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat2.xy = u_xlat2.xy * u_xlat1.xy;\n    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);\n    u_xlat2.x = u_xlat2.y * u_xlat2.x;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat4.x = u_xlat10_4 + (-vs_TEXCOORD1.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 0.5;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = u_xlat0.xxxx * vs_COLOR0;\n    SV_Target0 = u_xlat2.xxxx * u_xlat1;\n    return;\n}\n\n",0,0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],"\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1 = in_COLOR0 * _FaceColor;\n    vs_COLOR0.xyz = u_xlat1.www * u_xlat1.xyz;\n    vs_COLOR0.w = u_xlat1.w;\n    u_xlat6.x = in_COLOR0.w * _OutlineColor.w;\n    vs_COLOR1.xyz = u_xlat6.xxx * _OutlineColor.xyz;\n    vs_COLOR1.w = u_xlat6.x;\n    u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat6.xy = u_xlat0.xy + (-u_xlat1.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);\n    vs_TEXCOORD2.xy = (-u_xlat1.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat1.xy) + u_xlat1.zw;\n    vs_TEXCOORD0.zw = u_xlat6.xy \/ u_xlat0.xy;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat3 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat3 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat0.x = _GradientScale * 1.33329999;\n    u_xlat3 = _Sharpness + 1.0;\n    u_xlat0.x = u_xlat3 * u_xlat0.x;\n    vs_TEXCOORD1.y = u_xlat0.x \/ _TextureWidth;\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    vs_TEXCOORD1.z = u_xlat0.x * 0.5;\n    vs_TEXCOORD1.w = 0.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec2 u_xlat2;\nvec2 u_xlat4;\nlowp float u_xlat10_4;\nvoid main()\n{\n    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);\n    u_xlat4.xy = dFdy(vs_TEXCOORD0.yx);\n    u_xlat2.x = u_xlat4.y * u_xlat0.y;\n    u_xlat0.x = u_xlat0.x * u_xlat4.x + (-u_xlat2.x);\n    u_xlat0.x = inversesqrt(abs(u_xlat0.x));\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * u_xlat0.x + 1.0;\n    u_xlat0.x = u_xlat0.x \/ u_xlat2.x;\n    u_xlat2.x = float(1.0) \/ u_xlat0.x;\n    u_xlat2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat2.xx;\n    u_xlat2.xy = vec2(0.25, 0.25) \/ u_xlat2.xy;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat2.xy = u_xlat2.xy * u_xlat1.xy;\n    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);\n    u_xlat2.x = u_xlat2.y * u_xlat2.x;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat4.x = u_xlat10_4 + (-vs_TEXCOORD1.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 0.5;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = u_xlat0.xxxx * vs_COLOR0;\n    u_xlat0.x = u_xlat1.w * u_xlat2.x + -0.00100000005;\n    u_xlat1 = u_xlat2.xxxx * u_xlat1;\n    SV_Target0 = u_xlat1;\n    u_xlatb0 = u_xlat0.x<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n",0,0]],[],0]],[],[["_FaceColor",0,1,1,1,1,"",16],["_FaceDilate",3,0,-1,1,0,"",0],["_OutlineColor",0,0,0,0,1,"",16],["_OutlineWidth",3,0,0,1,0,"",0],["_OutlineSoftness",3,0,0,1,0,"",0],["_UnderlayColor",0,0,0,0,0.5,"",16],["_UnderlayOffsetX",3,0,-1,1,0,"",0],["_UnderlayOffsetY",3,0,-1,1,0,"",0],["_UnderlayDilate",3,0,-1,1,0,"",0],["_UnderlaySoftness",3,0,0,1,0,"",0],["_WeightNormal",2,0,0,0,0,"",0],["_WeightBold",2,0.5,0,0,0,"",0],["_ShaderFlags",2,0,0,0,0,"",0],["_ScaleRatioA",2,1,0,0,0,"",0],["_ScaleRatioB",2,1,0,0,0,"",0],["_ScaleRatioC",2,1,0,0,0,"",0],["_MainTex",4,0,0,0,0,"white",0],["_TextureWidth",2,512,0,0,0,"",0],["_TextureHeight",2,512,0,0,0,"",0],["_GradientScale",2,5,0,0,0,"",0],["_ScaleX",2,1,0,0,0,"",0],["_ScaleY",2,1,0,0,0,"",0],["_PerspectiveFilter",3,0.875,0,1,0,"",0],["_Sharpness",3,0,-1,1,0,"",0],["_VertexOffsetX",2,0,0,0,0,"",0],["_VertexOffsetY",2,0,0,0,0,"",0],["_ClipRect",1,-32767,-32767,32767,32767,"",0],["_MaskSoftnessX",2,0,0,0,0,"",0],["_MaskSoftnessY",2,0,0,0,0,"",0],["_MaskTex",4,0,0,0,0,"white",0],["_MaskInverse",2,0,0,0,0,"",0],["_MaskEdgeColor",0,1,1,1,1,"",0],["_MaskEdgeSoftness",3,0.00999999977648258,0,1,0,"",0],["_MaskWipeControl",3,0.5,0,1,0,"",0],["_StencilComp",2,8,0,0,0,"",0],["_Stencil",2,0,0,0,0,"",0],["_StencilOp",2,0,0,0,0,"",0],["_StencilWriteMask",2,255,0,0,0,"",0],["_StencilReadMask",2,255,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0],["_ColorMask",2,15,0,0,0,"",0]],null,null,0,0,0]}