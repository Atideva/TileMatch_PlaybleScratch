{"id":432,"assetBundleId":-1,"data":[[],"TextMeshPro\/Distance Field (Surface)",null,["DIRECTIONAL","FOG_EXP","FOG_EXP2","FOG_LINEAR","GLOW_ON","LIGHTPROBE_SH","VERTEXLIGHT_ON","DIRECTIONAL_COOKIE","POINT","POINT_COOKIE","SPOT","SHADOWS_DEPTH","INSTANCING_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__","SHADOWS_CUBE"],[[0,0,"FORWARD",4,"",0,[4,null],[0,null],[0,"_CullMode"],[[5,null],[10,null],[0,null]],[[5,null],[10,null],[0,null]],[14,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDBASE"],["QUEUE","Transparent"],["RenderType","Transparent"]],["DIRECTIONAL","FOG_EXP","FOG_EXP2","FOG_LINEAR","GLOW_ON","INSTANCING_ON","LIGHTPROBE_SH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","VERTEXLIGHT_ON","__"],[[["__","GLOW_ON"],0],[["__","INSTANCING_ON"],0],[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"],0],[["DIRECTIONAL"],0],[["DIRECTIONAL","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","LIGHTPROBE_SH"],0]],[[0,0,["DIRECTIONAL"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD7;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nmediump float u_xlat16_5;\nmediump vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal) + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 * _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat21) \/ u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0 = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.w = u_xlat1.y;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD4.z = u_xlat3.w;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat16_5 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);\n    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform \tmediump vec4 _ReflectOutlineColor;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube _Cube;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec4 u_xlat5;\nmediump float u_xlat16_5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_11;\nvec3 u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nfloat u_xlat16;\nlowp vec2 u_xlat10_16;\nbool u_xlatb22;\nfloat u_xlat30;\nlowp float u_xlat10_30;\nmediump float u_xlat16_31;\nfloat u_xlat36;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD2.w;\n    u_xlat0.y = vs_TEXCOORD3.w;\n    u_xlat0.z = vs_TEXCOORD4.w;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = inversesqrt(u_xlat16_31);\n    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;\n    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;\n    u_xlat2.xy = vec2(1.0, 1.0) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat2.z = 0.0;\n    u_xlat3 = (-u_xlat2.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_4.x = texture2D(_MainTex, u_xlat3.xy).w;\n    u_xlat10_4.z = texture2D(_MainTex, u_xlat3.zw).w;\n    u_xlat10_4.y = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat10_4.w = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_4;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat2.x = _BevelWidth + _OutlineWidth;\n    u_xlat2.x = max(u_xlat2.x, 0.00999999978);\n    u_xlat0 = u_xlat0 \/ u_xlat2.xxxx;\n    u_xlat2.x = u_xlat2.x * _Bevel;\n    u_xlat2.x = u_xlat2.x * _GradientScale;\n    u_xlat2.x = u_xlat2.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat3 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat3 = -abs(u_xlat3) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat12.x = _ShaderFlags * 0.5;\n    u_xlatb22 = u_xlat12.x>=(-u_xlat12.x);\n    u_xlat12.x = fract(abs(u_xlat12.x));\n    u_xlat12.x = (u_xlatb22) ? u_xlat12.x : (-u_xlat12.x);\n    u_xlatb12 = u_xlat12.x>=0.5;\n    u_xlat0 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat0;\n    u_xlat3 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat3 = sin(u_xlat3);\n    u_xlat3 = (-u_xlat0) + u_xlat3;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat3 + u_xlat0;\n    u_xlat12.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat12.xxxx);\n    u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat2.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat30 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat3.x = u_xlat30 * u_xlat0.z;\n    u_xlat3.yz = vec2(u_xlat30) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz * u_xlat3.xyz;\n    u_xlat0.xyz = u_xlat3.zxy * u_xlat0.yzx + (-u_xlat2.xyz);\n    u_xlat10_30 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat30 = (-u_xlat10_30) + 0.5;\n    u_xlat30 = u_xlat30 + (-vs_TEXCOORD5.x);\n    u_xlat30 = u_xlat30 * vs_TEXCOORD5.y + 0.5;\n    u_xlat2.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_31 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_5 = min(u_xlat2.x, 1.0);\n    u_xlat16_5 = sqrt(u_xlat16_5);\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5;\n    u_xlat12.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_3 = texture2D(_OutlineTex, u_xlat12.xy);\n    u_xlat12.xyz = u_xlat10_3.xyz * _OutlineColor.xyz;\n    u_xlat3.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat13 = u_xlat10_3.w * u_xlat3.x;\n    u_xlat4.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat4.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_4 * u_xlat5;\n    u_xlat16_7.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat12.xyz * vec3(u_xlat13) + (-u_xlat16_7.xyz);\n    u_xlat16_7.w = u_xlat3.x * u_xlat10_3.w + (-u_xlat6.w);\n    u_xlat16_3 = vec4(u_xlat16_31) * u_xlat16_7;\n    u_xlat16_4.w = u_xlat5.w * u_xlat10_4.w + u_xlat16_3.w;\n    u_xlat16_4.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_3.xyz;\n    u_xlat16_31 = (-u_xlat2.x) * 0.5 + u_xlat30;\n    u_xlat30 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);\n    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat12.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_7.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_31 = u_xlat12.x * 0.5 + u_xlat16_31;\n    u_xlat16_31 = u_xlat16_31 \/ u_xlat16_7.x;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_2 = vec4(u_xlat16_31) * u_xlat16_4;\n    u_xlat6.x = (-_BumpFace) + _BumpOutline;\n    u_xlat6.x = u_xlat30 * u_xlat6.x + _BumpFace;\n    u_xlat10_16.xy = texture2D(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_7.xy = u_xlat10_16.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_31 = dot(u_xlat16_7.xy, u_xlat16_7.xy);\n    u_xlat16_31 = min(u_xlat16_31, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_7.z = sqrt(u_xlat16_31);\n    u_xlat6.xyz = u_xlat16_7.xyz * u_xlat6.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat6.xyz = u_xlat16_2.www * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);\n    u_xlat6.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xxx;\n    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat6.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat3.xyz = u_xlat6.xxx * u_xlat16_7.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_1.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat6.x = log2(u_xlat16_1.x);\n    u_xlat16 = (-_FaceShininess) + _OutlineShininess;\n    u_xlat16 = u_xlat30 * u_xlat16 + _FaceShininess;\n    u_xlat16_1.x = u_xlat16 * 128.0;\n    u_xlat6.x = u_xlat6.x * u_xlat16_1.x;\n    u_xlat6.x = exp2(u_xlat6.x);\n    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat6.xyz = u_xlat6.xxx * u_xlat16_1.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat36 = max(u_xlat16_2.w, 9.99999975e-05);\n    u_xlat8.xyz = u_xlat16_2.xyz \/ vec3(u_xlat36);\n    u_xlat16_11.xyz = u_xlat8.xyz * _LightColor0.xyz;\n    u_xlat6.xyz = u_xlat16_11.xyz * u_xlat16_1.xxx + u_xlat6.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_1.y = dot(unity_SHAg, u_xlat3);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat3);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat9.xyz = log2(u_xlat16_1.xyz);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat9.xyz = exp2(u_xlat9.xyz);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = u_xlat8.xyz * u_xlat9.xyz + u_xlat6.xyz;\n    u_xlat6.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;\n    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz + _ReflectFaceColor.xyz;\n    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat8.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat30 = dot(vs_TEXCOORD6.xyz, u_xlat0.xyz);\n    u_xlat30 = u_xlat30 + u_xlat30;\n    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + vs_TEXCOORD6.xyz;\n    u_xlat10_0.xyz = textureCube(_Cube, u_xlat0.xyz).xyz;\n    u_xlat0.xyz = u_xlat6.xyz * u_xlat10_0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.www + u_xlat16_1.xyz;\n    SV_Target0.w = u_xlat16_2.w;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD7;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nmediump float u_xlat16_5;\nmediump vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal) + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 * _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat21) \/ u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0 = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.w = u_xlat1.y;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD4.z = u_xlat3.w;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat16_5 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);\n    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform \tmediump vec4 _ReflectOutlineColor;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube _Cube;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec4 u_xlat5;\nmediump float u_xlat16_5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_11;\nvec3 u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nfloat u_xlat16;\nlowp vec2 u_xlat10_16;\nbool u_xlatb22;\nfloat u_xlat30;\nlowp float u_xlat10_30;\nmediump float u_xlat16_31;\nfloat u_xlat36;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD2.w;\n    u_xlat0.y = vs_TEXCOORD3.w;\n    u_xlat0.z = vs_TEXCOORD4.w;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = inversesqrt(u_xlat16_31);\n    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;\n    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;\n    u_xlat2.xy = vec2(1.0, 1.0) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat2.z = 0.0;\n    u_xlat3 = (-u_xlat2.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_4.x = texture2D(_MainTex, u_xlat3.xy).w;\n    u_xlat10_4.z = texture2D(_MainTex, u_xlat3.zw).w;\n    u_xlat10_4.y = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat10_4.w = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_4;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat2.x = _BevelWidth + _OutlineWidth;\n    u_xlat2.x = max(u_xlat2.x, 0.00999999978);\n    u_xlat0 = u_xlat0 \/ u_xlat2.xxxx;\n    u_xlat2.x = u_xlat2.x * _Bevel;\n    u_xlat2.x = u_xlat2.x * _GradientScale;\n    u_xlat2.x = u_xlat2.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat3 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat3 = -abs(u_xlat3) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat12.x = _ShaderFlags * 0.5;\n    u_xlatb22 = u_xlat12.x>=(-u_xlat12.x);\n    u_xlat12.x = fract(abs(u_xlat12.x));\n    u_xlat12.x = (u_xlatb22) ? u_xlat12.x : (-u_xlat12.x);\n    u_xlatb12 = u_xlat12.x>=0.5;\n    u_xlat0 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat0;\n    u_xlat3 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat3 = sin(u_xlat3);\n    u_xlat3 = (-u_xlat0) + u_xlat3;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat3 + u_xlat0;\n    u_xlat12.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat12.xxxx);\n    u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat2.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat30 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat3.x = u_xlat30 * u_xlat0.z;\n    u_xlat3.yz = vec2(u_xlat30) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz * u_xlat3.xyz;\n    u_xlat0.xyz = u_xlat3.zxy * u_xlat0.yzx + (-u_xlat2.xyz);\n    u_xlat10_30 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat30 = (-u_xlat10_30) + 0.5;\n    u_xlat30 = u_xlat30 + (-vs_TEXCOORD5.x);\n    u_xlat30 = u_xlat30 * vs_TEXCOORD5.y + 0.5;\n    u_xlat2.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_31 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_5 = min(u_xlat2.x, 1.0);\n    u_xlat16_5 = sqrt(u_xlat16_5);\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5;\n    u_xlat12.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_3 = texture2D(_OutlineTex, u_xlat12.xy);\n    u_xlat12.xyz = u_xlat10_3.xyz * _OutlineColor.xyz;\n    u_xlat3.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat13 = u_xlat10_3.w * u_xlat3.x;\n    u_xlat4.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat4.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_4 * u_xlat5;\n    u_xlat16_7.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat12.xyz * vec3(u_xlat13) + (-u_xlat16_7.xyz);\n    u_xlat16_7.w = u_xlat3.x * u_xlat10_3.w + (-u_xlat6.w);\n    u_xlat16_3 = vec4(u_xlat16_31) * u_xlat16_7;\n    u_xlat16_4.w = u_xlat5.w * u_xlat10_4.w + u_xlat16_3.w;\n    u_xlat16_4.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_3.xyz;\n    u_xlat16_31 = (-u_xlat2.x) * 0.5 + u_xlat30;\n    u_xlat30 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);\n    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat12.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_7.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_31 = u_xlat12.x * 0.5 + u_xlat16_31;\n    u_xlat16_31 = u_xlat16_31 \/ u_xlat16_7.x;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_2 = vec4(u_xlat16_31) * u_xlat16_4;\n    u_xlat6.x = (-_BumpFace) + _BumpOutline;\n    u_xlat6.x = u_xlat30 * u_xlat6.x + _BumpFace;\n    u_xlat10_16.xy = texture2D(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_7.xy = u_xlat10_16.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_31 = dot(u_xlat16_7.xy, u_xlat16_7.xy);\n    u_xlat16_31 = min(u_xlat16_31, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_7.z = sqrt(u_xlat16_31);\n    u_xlat6.xyz = u_xlat16_7.xyz * u_xlat6.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat6.xyz = u_xlat16_2.www * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);\n    u_xlat6.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xxx;\n    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat6.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat3.xyz = u_xlat6.xxx * u_xlat16_7.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_1.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat6.x = log2(u_xlat16_1.x);\n    u_xlat16 = (-_FaceShininess) + _OutlineShininess;\n    u_xlat16 = u_xlat30 * u_xlat16 + _FaceShininess;\n    u_xlat16_1.x = u_xlat16 * 128.0;\n    u_xlat6.x = u_xlat6.x * u_xlat16_1.x;\n    u_xlat6.x = exp2(u_xlat6.x);\n    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat6.xyz = u_xlat6.xxx * u_xlat16_1.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat36 = max(u_xlat16_2.w, 9.99999975e-05);\n    u_xlat8.xyz = u_xlat16_2.xyz \/ vec3(u_xlat36);\n    u_xlat16_11.xyz = u_xlat8.xyz * _LightColor0.xyz;\n    u_xlat6.xyz = u_xlat16_11.xyz * u_xlat16_1.xxx + u_xlat6.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_1.y = dot(unity_SHAg, u_xlat3);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat3);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat9.xyz = log2(u_xlat16_1.xyz);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat9.xyz = exp2(u_xlat9.xyz);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = u_xlat8.xyz * u_xlat9.xyz + u_xlat6.xyz;\n    u_xlat6.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;\n    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz + _ReflectFaceColor.xyz;\n    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat8.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat30 = dot(vs_TEXCOORD6.xyz, u_xlat0.xyz);\n    u_xlat30 = u_xlat30 + u_xlat30;\n    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + vs_TEXCOORD6.xyz;\n    u_xlat10_0.xyz = textureCube(_Cube, u_xlat0.xyz).xyz;\n    u_xlat0.xyz = u_xlat6.xyz * u_xlat10_0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.www + u_xlat16_1.xyz;\n    SV_Target0.w = u_xlat16_2.w;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD7;\nvec4 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal) + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 * _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat21) \/ u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0 = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD3.w = u_xlat1.y;\n    vs_TEXCOORD4.z = u_xlat3.w;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat0 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat2 = u_xlat3.yyyy * u_xlat0;\n    u_xlat0 = u_xlat0 * u_xlat0;\n    u_xlat4 = (-u_xlat1.xxxx) + unity_4LightPosX0;\n    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;\n    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;\n    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;\n    u_xlat0 = u_xlat1 * u_xlat1 + u_xlat0;\n    u_xlat1 = u_xlat1 * u_xlat3.wwzw + u_xlat2;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat2 = inversesqrt(u_xlat0);\n    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) \/ u_xlat0;\n    u_xlat1 = u_xlat1 * u_xlat2;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat0 * u_xlat1;\n    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_5.x = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_5.x);\n    u_xlat16_2 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD7.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform \tmediump vec4 _ReflectOutlineColor;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube _Cube;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec4 u_xlat5;\nmediump float u_xlat16_5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_11;\nvec3 u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nfloat u_xlat16;\nlowp vec2 u_xlat10_16;\nbool u_xlatb22;\nfloat u_xlat30;\nlowp float u_xlat10_30;\nmediump float u_xlat16_31;\nfloat u_xlat36;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD2.w;\n    u_xlat0.y = vs_TEXCOORD3.w;\n    u_xlat0.z = vs_TEXCOORD4.w;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = inversesqrt(u_xlat16_31);\n    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;\n    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;\n    u_xlat2.xy = vec2(1.0, 1.0) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat2.z = 0.0;\n    u_xlat3 = (-u_xlat2.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_4.x = texture2D(_MainTex, u_xlat3.xy).w;\n    u_xlat10_4.z = texture2D(_MainTex, u_xlat3.zw).w;\n    u_xlat10_4.y = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat10_4.w = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_4;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat2.x = _BevelWidth + _OutlineWidth;\n    u_xlat2.x = max(u_xlat2.x, 0.00999999978);\n    u_xlat0 = u_xlat0 \/ u_xlat2.xxxx;\n    u_xlat2.x = u_xlat2.x * _Bevel;\n    u_xlat2.x = u_xlat2.x * _GradientScale;\n    u_xlat2.x = u_xlat2.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat3 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat3 = -abs(u_xlat3) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat12.x = _ShaderFlags * 0.5;\n    u_xlatb22 = u_xlat12.x>=(-u_xlat12.x);\n    u_xlat12.x = fract(abs(u_xlat12.x));\n    u_xlat12.x = (u_xlatb22) ? u_xlat12.x : (-u_xlat12.x);\n    u_xlatb12 = u_xlat12.x>=0.5;\n    u_xlat0 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat0;\n    u_xlat3 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat3 = sin(u_xlat3);\n    u_xlat3 = (-u_xlat0) + u_xlat3;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat3 + u_xlat0;\n    u_xlat12.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat12.xxxx);\n    u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat2.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat30 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat3.x = u_xlat30 * u_xlat0.z;\n    u_xlat3.yz = vec2(u_xlat30) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz * u_xlat3.xyz;\n    u_xlat0.xyz = u_xlat3.zxy * u_xlat0.yzx + (-u_xlat2.xyz);\n    u_xlat10_30 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat30 = (-u_xlat10_30) + 0.5;\n    u_xlat30 = u_xlat30 + (-vs_TEXCOORD5.x);\n    u_xlat30 = u_xlat30 * vs_TEXCOORD5.y + 0.5;\n    u_xlat2.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_31 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_5 = min(u_xlat2.x, 1.0);\n    u_xlat16_5 = sqrt(u_xlat16_5);\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5;\n    u_xlat12.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_3 = texture2D(_OutlineTex, u_xlat12.xy);\n    u_xlat12.xyz = u_xlat10_3.xyz * _OutlineColor.xyz;\n    u_xlat3.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat13 = u_xlat10_3.w * u_xlat3.x;\n    u_xlat4.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat4.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_4 * u_xlat5;\n    u_xlat16_7.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat12.xyz * vec3(u_xlat13) + (-u_xlat16_7.xyz);\n    u_xlat16_7.w = u_xlat3.x * u_xlat10_3.w + (-u_xlat6.w);\n    u_xlat16_3 = vec4(u_xlat16_31) * u_xlat16_7;\n    u_xlat16_4.w = u_xlat5.w * u_xlat10_4.w + u_xlat16_3.w;\n    u_xlat16_4.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_3.xyz;\n    u_xlat16_31 = (-u_xlat2.x) * 0.5 + u_xlat30;\n    u_xlat30 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);\n    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat12.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_7.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_31 = u_xlat12.x * 0.5 + u_xlat16_31;\n    u_xlat16_31 = u_xlat16_31 \/ u_xlat16_7.x;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_2 = vec4(u_xlat16_31) * u_xlat16_4;\n    u_xlat6.x = (-_BumpFace) + _BumpOutline;\n    u_xlat6.x = u_xlat30 * u_xlat6.x + _BumpFace;\n    u_xlat10_16.xy = texture2D(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_7.xy = u_xlat10_16.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_31 = dot(u_xlat16_7.xy, u_xlat16_7.xy);\n    u_xlat16_31 = min(u_xlat16_31, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_7.z = sqrt(u_xlat16_31);\n    u_xlat6.xyz = u_xlat16_7.xyz * u_xlat6.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat6.xyz = u_xlat16_2.www * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);\n    u_xlat6.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xxx;\n    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat6.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat3.xyz = u_xlat6.xxx * u_xlat16_7.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_1.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat6.x = log2(u_xlat16_1.x);\n    u_xlat16 = (-_FaceShininess) + _OutlineShininess;\n    u_xlat16 = u_xlat30 * u_xlat16 + _FaceShininess;\n    u_xlat16_1.x = u_xlat16 * 128.0;\n    u_xlat6.x = u_xlat6.x * u_xlat16_1.x;\n    u_xlat6.x = exp2(u_xlat6.x);\n    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat6.xyz = u_xlat6.xxx * u_xlat16_1.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat36 = max(u_xlat16_2.w, 9.99999975e-05);\n    u_xlat8.xyz = u_xlat16_2.xyz \/ vec3(u_xlat36);\n    u_xlat16_11.xyz = u_xlat8.xyz * _LightColor0.xyz;\n    u_xlat6.xyz = u_xlat16_11.xyz * u_xlat16_1.xxx + u_xlat6.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_1.y = dot(unity_SHAg, u_xlat3);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat3);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat9.xyz = log2(u_xlat16_1.xyz);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat9.xyz = exp2(u_xlat9.xyz);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = u_xlat8.xyz * u_xlat9.xyz + u_xlat6.xyz;\n    u_xlat6.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;\n    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz + _ReflectFaceColor.xyz;\n    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat8.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat30 = dot(vs_TEXCOORD6.xyz, u_xlat0.xyz);\n    u_xlat30 = u_xlat30 + u_xlat30;\n    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + vs_TEXCOORD6.xyz;\n    u_xlat10_0.xyz = textureCube(_Cube, u_xlat0.xyz).xyz;\n    u_xlat0.xyz = u_xlat6.xyz * u_xlat10_0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.www + u_xlat16_1.xyz;\n    SV_Target0.w = u_xlat16_2.w;\n    return;\n}\n\n",0,0]],[],0],[1,0,"FORWARD",5,"",0,[4,null],[0,null],[0,"_CullMode"],[[5,null],[1,null],[0,null]],[[5,null],[1,null],[0,null]],[14,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["LIGHTMODE","FORWARDADD"],["QUEUE","Transparent"],["RenderType","Transparent"]],["DIRECTIONAL","DIRECTIONAL_COOKIE","FOG_EXP","FOG_EXP2","FOG_LINEAR","GLOW_ON","POINT","POINT_COOKIE","SPOT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[["__","GLOW_ON"],0],[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"],0],[["POINT"],0],[["DIRECTIONAL"],0],[["SPOT"],0],[["POINT_COOKIE"],0],[["DIRECTIONAL_COOKIE"],0]],[[1,0,["POINT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nint u_xlati5;\nfloat u_xlat7;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat15);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat15) \/ u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat7 = u_xlat12 * u_xlat7;\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat7);\n    u_xlat2.xzw = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xzw;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xzw;\n    u_xlat2.xzw = u_xlat2.xzw + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xzw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati5 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0 = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati5) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = (-u_xlat2.xzw) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xzw;\n    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xzw = u_xlat2.xxx * u_xlat3.xyz;\n    u_xlat2.x = dot(u_xlat0.yzx, u_xlat2.xzw);\n    vs_TEXCOORD6.y = abs(u_xlat2.x) * u_xlat15 + u_xlat7;\n    u_xlatb15 = 0.0>=in_TEXCOORD1.y;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;\n    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;\n    u_xlat15 = u_xlat15 * _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat15 * 0.5;\n    vs_TEXCOORD2.z = u_xlat0.y;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.z = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    vs_TEXCOORD8.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_12;\nlowp vec2 u_xlat10_13;\nbool u_xlatb17;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy = vec2(1.0, 1.0) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_3.x = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat10_3.z = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat10_3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat10_3.w = texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 \/ u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat24 = (-u_xlat10_24) + 0.5;\n    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.x);\n    u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat9.xyz = u_xlat10_2.xyz * _OutlineColor.xyz;\n    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat10 = u_xlat10_2.w * u_xlat2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex, u_xlat3.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_3 * u_xlat5;\n    u_xlat16_12.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat9.xyz * vec3(u_xlat10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w = u_xlat2.x * u_xlat10_2.w + (-u_xlat6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_7;\n    u_xlat16_3.w = u_xlat5.w * u_xlat10_3.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5 + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x \/ u_xlat16_12.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x + _BumpFace;\n    u_xlat10_13.xy = texture2D(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_4.xy = u_xlat10_13.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat6.xyz * vec3(u_xlat29) + u_xlat5.xyz;\n    u_xlat16_4.w = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_7.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx;\n    u_xlat16_4.x = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.xw = max(u_xlat16_4.xw, vec2(0.0, 0.0));\n    u_xlat0.x = log2(u_xlat16_4.x);\n    u_xlat8.x = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8.x = u_xlat24 * u_xlat8.x + _FaceShininess;\n    u_xlat16_4.x = u_xlat8.x * 128.0;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat8.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat8.xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat8.xyz;\n    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.x = texture2D(_LightTexture0, u_xlat8.xx).x;\n    u_xlat16_4.xyz = u_xlat8.xxx * _LightColor0.xyz;\n    u_xlat16_7.xyz = u_xlat16_4.xyz * _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_7.xyz;\n    u_xlat24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat5.xyz = u_xlat16_1.xyz \/ vec3(u_xlat24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat5.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD7;\nvec3 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat u_xlat4;\nint u_xlati4;\nvec3 u_xlat6;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat12);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat12 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat12 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat12;\n    u_xlat12 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat12;\n    u_xlat12 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat12;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat12) \/ u_xlat2.xy;\n    u_xlat12 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat13 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat13 = u_xlat13 * u_xlat2.x;\n    u_xlat2.x = u_xlat12 * u_xlat13;\n    u_xlat6.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat6.x * u_xlat2.x;\n    u_xlat12 = u_xlat12 * u_xlat13 + (-u_xlat2.x);\n    u_xlat6.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat6.xyz;\n    u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat6.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati4 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0 = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati4) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat6.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat6.xyz;\n    u_xlat1.x = dot(u_xlat0.yzx, u_xlat1.xyz);\n    vs_TEXCOORD6.y = abs(u_xlat1.x) * u_xlat12 + u_xlat2.x;\n    u_xlatb12 = 0.0>=in_TEXCOORD1.y;\n    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);\n    u_xlat1.x = (-_WeightNormal) + _WeightBold;\n    u_xlat12 = u_xlat12 * u_xlat1.x + _WeightNormal;\n    u_xlat12 = u_xlat12 * 0.25 + _FaceDilate;\n    u_xlat12 = u_xlat12 * _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat12 * 0.5;\n    vs_TEXCOORD2.z = u_xlat0.y;\n    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat3.xyz = u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat3.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat3.xyz);\n    u_xlat4 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat3.xyz = vec3(u_xlat4) * u_xlat3.xyz;\n    vs_TEXCOORD2.y = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat1.x;\n    vs_TEXCOORD4.x = u_xlat1.y;\n    vs_TEXCOORD3.y = u_xlat3.y;\n    vs_TEXCOORD4.y = u_xlat3.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat6.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat6.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat6.zzz + u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nfloat u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_12;\nlowp vec2 u_xlat10_13;\nbool u_xlatb17;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy = vec2(1.0, 1.0) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_3.x = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat10_3.z = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat10_3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat10_3.w = texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 \/ u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat24 = (-u_xlat10_24) + 0.5;\n    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.x);\n    u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat9.xyz = u_xlat10_2.xyz * _OutlineColor.xyz;\n    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat10 = u_xlat10_2.w * u_xlat2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex, u_xlat3.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_3 * u_xlat5;\n    u_xlat16_12.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat9.xyz * vec3(u_xlat10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w = u_xlat2.x * u_xlat10_2.w + (-u_xlat6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_7;\n    u_xlat16_3.w = u_xlat5.w * u_xlat10_3.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5 + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x \/ u_xlat16_12.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x + _BumpFace;\n    u_xlat10_13.xy = texture2D(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_4.xy = u_xlat10_13.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat29) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_28 = inversesqrt(u_xlat16_28);\n    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.y = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));\n    u_xlat0.x = log2(u_xlat16_4.x);\n    u_xlat8 = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8 = u_xlat24 * u_xlat8 + _FaceShininess;\n    u_xlat16_4.x = u_xlat8 * 128.0;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat16_4.xzw = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xzw;\n    u_xlat24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat5.xyz = u_xlat16_1.xyz \/ vec3(u_xlat24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xzw = u_xlat5.xyz * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_4.xzw * u_xlat16_4.yyy + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n",0,0],[1,0,["SPOT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD7;\nvarying highp vec4 vs_TEXCOORD8;\nvec4 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nint u_xlati5;\nfloat u_xlat7;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat15);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat15) \/ u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat7 = u_xlat12 * u_xlat7;\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat7);\n    u_xlat2.xzw = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xzw;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xzw;\n    u_xlat2.xzw = u_xlat2.xzw + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xzw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati5 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0 = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati5) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = (-u_xlat2.xzw) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xzw;\n    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xzw = u_xlat2.xxx * u_xlat3.xyz;\n    u_xlat2.x = dot(u_xlat0.yzx, u_xlat2.xzw);\n    vs_TEXCOORD6.y = abs(u_xlat2.x) * u_xlat15 + u_xlat7;\n    u_xlatb15 = 0.0>=in_TEXCOORD1.y;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;\n    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;\n    u_xlat15 = u_xlat15 * _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat15 * 0.5;\n    vs_TEXCOORD2.z = u_xlat0.y;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.z = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat1.zzzz + u_xlat0;\n    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat1.wwww + u_xlat0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_12;\nlowp vec2 u_xlat10_13;\nbool u_xlatb16;\nbool u_xlatb17;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy = vec2(1.0, 1.0) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_3.x = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat10_3.z = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat10_3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat10_3.w = texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 \/ u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat24 = (-u_xlat10_24) + 0.5;\n    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.x);\n    u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat9.xyz = u_xlat10_2.xyz * _OutlineColor.xyz;\n    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat10 = u_xlat10_2.w * u_xlat2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex, u_xlat3.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_3 * u_xlat5;\n    u_xlat16_12.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat9.xyz * vec3(u_xlat10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w = u_xlat2.x * u_xlat10_2.w + (-u_xlat6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_7;\n    u_xlat16_3.w = u_xlat5.w * u_xlat10_3.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5 + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x \/ u_xlat16_12.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x + _BumpFace;\n    u_xlat10_13.xy = texture2D(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_4.xy = u_xlat10_13.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat6.xyz * vec3(u_xlat29) + u_xlat5.xyz;\n    u_xlat16_4.w = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_7.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx;\n    u_xlat16_4.x = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.xw = max(u_xlat16_4.xw, vec2(0.0, 0.0));\n    u_xlat0.x = log2(u_xlat16_4.x);\n    u_xlat8.x = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8.x = u_xlat24 * u_xlat8.x + _FaceShininess;\n    u_xlat16_4.x = u_xlat8.x * 128.0;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat2 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat2;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat8.xy = u_xlat2.xy \/ u_xlat2.ww;\n    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);\n    u_xlat8.x = texture2D(_LightTexture0, u_xlat8.xy).w;\n    u_xlatb16 = 0.0<u_xlat2.z;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat16_4.x = (u_xlatb16) ? 1.0 : 0.0;\n    u_xlat16_4.x = u_xlat8.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_7.xyz = u_xlat16_4.xyz * _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_7.xyz;\n    u_xlat24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat5.xyz = u_xlat16_1.xyz \/ vec3(u_xlat24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat5.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n",0,0],[1,0,["POINT_COOKIE"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nint u_xlati5;\nfloat u_xlat7;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat15);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat15) \/ u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat7 = u_xlat12 * u_xlat7;\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat7);\n    u_xlat2.xzw = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xzw;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xzw;\n    u_xlat2.xzw = u_xlat2.xzw + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xzw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati5 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0 = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati5) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = (-u_xlat2.xzw) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xzw;\n    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xzw = u_xlat2.xxx * u_xlat3.xyz;\n    u_xlat2.x = dot(u_xlat0.yzx, u_xlat2.xzw);\n    vs_TEXCOORD6.y = abs(u_xlat2.x) * u_xlat15 + u_xlat7;\n    u_xlatb15 = 0.0>=in_TEXCOORD1.y;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;\n    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;\n    u_xlat15 = u_xlat15 * _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat15 * 0.5;\n    vs_TEXCOORD2.z = u_xlat0.y;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.z = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    vs_TEXCOORD8.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_12;\nlowp vec2 u_xlat10_13;\nfloat u_xlat16;\nbool u_xlatb17;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy = vec2(1.0, 1.0) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_3.x = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat10_3.z = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat10_3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat10_3.w = texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 \/ u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat24 = (-u_xlat10_24) + 0.5;\n    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.x);\n    u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat9.xyz = u_xlat10_2.xyz * _OutlineColor.xyz;\n    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat10 = u_xlat10_2.w * u_xlat2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex, u_xlat3.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_3 * u_xlat5;\n    u_xlat16_12.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat9.xyz * vec3(u_xlat10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w = u_xlat2.x * u_xlat10_2.w + (-u_xlat6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_7;\n    u_xlat16_3.w = u_xlat5.w * u_xlat10_3.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5 + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x \/ u_xlat16_12.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x + _BumpFace;\n    u_xlat10_13.xy = texture2D(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_4.xy = u_xlat10_13.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat6.xyz * vec3(u_xlat29) + u_xlat5.xyz;\n    u_xlat16_4.w = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_7.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx;\n    u_xlat16_4.x = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.xw = max(u_xlat16_4.xw, vec2(0.0, 0.0));\n    u_xlat0.x = log2(u_xlat16_4.x);\n    u_xlat8.x = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8.x = u_xlat24 * u_xlat8.x + _FaceShininess;\n    u_xlat16_4.x = u_xlat8.x * 128.0;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat8.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat8.xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat8.xyz;\n    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat5.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.x = textureCube(_LightTexture0, u_xlat8.xyz).w;\n    u_xlat16 = texture2D(_LightTextureB0, u_xlat5.xx).x;\n    u_xlat8.x = u_xlat8.x * u_xlat16;\n    u_xlat16_4.xyz = u_xlat8.xxx * _LightColor0.xyz;\n    u_xlat16_7.xyz = u_xlat16_4.xyz * _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_7.xyz;\n    u_xlat24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat5.xyz = u_xlat16_1.xyz \/ vec3(u_xlat24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat5.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL_COOKIE"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD7;\nvarying highp vec2 vs_TEXCOORD8;\nvec3 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nint u_xlati5;\nfloat u_xlat7;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat15);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat15) \/ u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat7 = u_xlat12 * u_xlat7;\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat7);\n    u_xlat2.xzw = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xzw;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xzw;\n    u_xlat2.xzw = u_xlat2.xzw + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xzw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati5 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0 = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati5) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = (-u_xlat2.xzw) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xzw;\n    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xzw = u_xlat2.xxx * u_xlat3.xyz;\n    u_xlat2.x = dot(u_xlat0.yzx, u_xlat2.xzw);\n    vs_TEXCOORD6.y = abs(u_xlat2.x) * u_xlat15 + u_xlat7;\n    u_xlatb15 = 0.0>=in_TEXCOORD1.y;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;\n    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;\n    u_xlat15 = u_xlat15 * _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat15 * 0.5;\n    vs_TEXCOORD2.z = u_xlat0.y;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.z = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;\n    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;\n    vs_TEXCOORD8.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_12;\nlowp vec2 u_xlat10_13;\nbool u_xlatb17;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy = vec2(1.0, 1.0) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_3.x = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat10_3.z = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat10_3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat10_3.w = texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 \/ u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat24 = (-u_xlat10_24) + 0.5;\n    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.x);\n    u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat9.xyz = u_xlat10_2.xyz * _OutlineColor.xyz;\n    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat10 = u_xlat10_2.w * u_xlat2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex, u_xlat3.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_3 * u_xlat5;\n    u_xlat16_12.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat9.xyz * vec3(u_xlat10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w = u_xlat2.x * u_xlat10_2.w + (-u_xlat6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_7;\n    u_xlat16_3.w = u_xlat5.w * u_xlat10_3.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5 + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x \/ u_xlat16_12.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x + _BumpFace;\n    u_xlat10_13.xy = texture2D(_BumpMap, vs_TEXCOORD0.zw).yw;\n    u_xlat16_4.xy = u_xlat10_13.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat29) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_28 = inversesqrt(u_xlat16_28);\n    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.y = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));\n    u_xlat0.x = log2(u_xlat16_4.x);\n    u_xlat8.x = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8.x = u_xlat24 * u_xlat8.x + _FaceShininess;\n    u_xlat16_4.x = u_xlat8.x * 128.0;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat8.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat8.xy;\n    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat8.xy;\n    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat8.x = texture2D(_LightTexture0, u_xlat8.xy).w;\n    u_xlat16_4.xzw = u_xlat8.xxx * _LightColor0.xyz;\n    u_xlat16_7.xyz = u_xlat16_4.xzw * _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_7.xyz;\n    u_xlat24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat5.xyz = u_xlat16_1.xyz \/ vec3(u_xlat24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat5.xyz;\n    u_xlat0.xyz = u_xlat16_4.xzw * u_xlat16_4.yyy + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n",0,0]],[],0],[2,0,"Caster",8,"",0,[4,null],[1,null],[0,null],[[1,null],[0,null],[0,null]],[[1,null],[0,null],[0,null]],[14,null],[1,null],[1,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["LIGHTMODE","SHADOWCASTER"],["QUEUE","Transparent"],["RenderType","Transparent"],["SHADOWSUPPORT","true"]],["SHADOWS_CUBE","SHADOWS_DEPTH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO"],[[["SHADOWS_DEPTH"],0],[["SHADOWS_CUBE"],0]],[[2,0,["SHADOWS_DEPTH"],"\n#version 100\n\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _ScaleRatioA;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD3;\nvarying highp float vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat4;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat1.x = unity_LightShadowBias.x \/ u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat4 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat4);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat4) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;\n    vs_TEXCOORD2 = u_xlat0.x * 0.5;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp float vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nlowp float u_xlat10_0;\nbool u_xlatb0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).w;\n    u_xlat0 = u_xlat10_0 + (-vs_TEXCOORD2);\n    u_xlatb0 = u_xlat0<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n",0,0]],[],0]],[],[["_FaceTex",4,0,0,0,0,"white",0],["_FaceUVSpeedX",3,0,-5,5,0,"",0],["_FaceUVSpeedY",3,0,-5,5,0,"",0],["_FaceColor",0,1,1,1,1,"",16],["_FaceDilate",3,0,-1,1,0,"",0],["_OutlineColor",0,0,0,0,1,"",16],["_OutlineTex",4,0,0,0,0,"white",0],["_OutlineUVSpeedX",3,0,-5,5,0,"",0],["_OutlineUVSpeedY",3,0,-5,5,0,"",0],["_OutlineWidth",3,0,0,1,0,"",0],["_OutlineSoftness",3,0,0,1,0,"",0],["_Bevel",3,0.5,0,1,0,"",0],["_BevelOffset",3,0,-0.5,0.5,0,"",0],["_BevelWidth",3,0,-0.5,0.5,0,"",0],["_BevelClamp",3,0,0,1,0,"",0],["_BevelRoundness",3,0,0,1,0,"",0],["_BumpMap",4,0,0,0,0,"bump",0],["_BumpOutline",3,0.5,0,1,0,"",0],["_BumpFace",3,0.5,0,1,0,"",0],["_ReflectFaceColor",0,0,0,0,1,"",0],["_ReflectOutlineColor",0,0,0,0,1,"",0],["_Cube",4,0,0,0,0,"black",0],["_EnvMatrixRotation",1,0,0,0,0,"",0],["_SpecColor",0,0,0,0,1,"",16],["_FaceShininess",3,0,0,1,0,"",0],["_OutlineShininess",3,0,0,1,0,"",0],["_GlowColor",0,0,1,0,0.5,"",16],["_GlowOffset",3,0,-1,1,0,"",0],["_GlowInner",3,0.0500000007450581,0,1,0,"",0],["_GlowOuter",3,0.0500000007450581,0,1,0,"",0],["_GlowPower",3,0.75,1,0,0,"",0],["_WeightNormal",2,0,0,0,0,"",0],["_WeightBold",2,0.5,0,0,0,"",0],["_ShaderFlags",2,0,0,0,0,"",0],["_ScaleRatioA",2,1,0,0,0,"",0],["_ScaleRatioB",2,1,0,0,0,"",0],["_ScaleRatioC",2,1,0,0,0,"",0],["_MainTex",4,0,0,0,0,"white",0],["_TextureWidth",2,512,0,0,0,"",0],["_TextureHeight",2,512,0,0,0,"",0],["_GradientScale",2,5,0,0,0,"",0],["_ScaleX",2,1,0,0,0,"",0],["_ScaleY",2,1,0,0,0,"",0],["_PerspectiveFilter",3,0.875,0,1,0,"",0],["_Sharpness",3,0,-1,1,0,"",0],["_VertexOffsetX",2,0,0,0,0,"",0],["_VertexOffsetY",2,0,0,0,0,"",0],["_CullMode",2,0,0,0,0,"",0]],null,null,0,0,0]}